#include <erl_nif.h>
#include "nif_utils.hpp"
using namespace evision::nif;
CV_ERL_TYPE(Algorithm, Algorithm, Ptr<cv::Algorithm>, Ptr, NoBase, 0, Algorithm);
CV_ERL_TYPE(AsyncArray, AsyncArray, Ptr<cv::AsyncArray>, Ptr, NoBase, ('asyncArray_AsyncArray', 'evision_cv_asyncArray_AsyncArray'), AsyncArray);
CV_ERL_TYPE(utils_ClassWithKeywordProperties, utils_ClassWithKeywordProperties, cv::utils::ClassWithKeywordProperties, ClassWithKeywordProperties, NoBase, ('utils_utils_ClassWithKeywordProperties_ClassWithKeywordProperties', 'evision_cv_utils_utils_ClassWithKeywordProperties_ClassWithKeywordProperties'), Utils.ClassWithKeywordProperties);
CV_ERL_TYPE(utils_nested_ExportClassName, utils_nested_OriginalClassName, Ptr<cv::utils::nested::OriginalClassName>, Ptr, NoBase, 0, Utils.Nested.OriginalClassName);
CV_ERL_TYPE(utils_nested_OriginalClassName_Params, utils_nested_OriginalClassName_Params, cv::utils::nested::OriginalClassName::Params, Params, NoBase, ('utils_nested_utils_nested_OriginalClassName_Params_OriginalClassName_Params', 'evision_cv_utils_nested_utils_nested_OriginalClassName_Params_OriginalClassName_Params'), Utils.Nested.OriginalClassName.Params);
CV_ERL_TYPE(cuda_GpuMat, cuda_GpuMat, Ptr<cv::cuda::GpuMat>, Ptr, NoBase, ('cuda_cuda_GpuMat_GpuMat', 'evision_cv_cuda_cuda_GpuMat_GpuMat'), CUDA.GpuMat);
CV_ERL_TYPE(cuda_GpuMat_Allocator, cuda_GpuMat_Allocator, Ptr<cv::cuda::GpuMat::Allocator>, Ptr, NoBase, 0, CUDA.GpuMat.Allocator);
CV_ERL_TYPE(cuda_GpuData, cuda_GpuData, Ptr<cv::cuda::GpuData>, Ptr, NoBase, 0, CUDA.GpuData);
CV_ERL_TYPE(cuda_GpuMatND, cuda_GpuMatND, Ptr<cv::cuda::GpuMatND>, Ptr, NoBase, 0, CUDA.GpuMatND);
CV_ERL_TYPE(cuda_BufferPool, cuda_BufferPool, Ptr<cv::cuda::BufferPool>, Ptr, NoBase, ('cuda_cuda_BufferPool_BufferPool', 'evision_cv_cuda_cuda_BufferPool_BufferPool'), CUDA.BufferPool);
CV_ERL_TYPE(cuda_HostMem, cuda_HostMem, Ptr<cv::cuda::HostMem>, Ptr, NoBase, ('cuda_cuda_HostMem_HostMem', 'evision_cv_cuda_cuda_HostMem_HostMem'), CUDA.HostMem);
CV_ERL_TYPE(cuda_Stream, cuda_Stream, Ptr<cv::cuda::Stream>, Ptr, NoBase, ('cuda_cuda_Stream_Stream', 'evision_cv_cuda_cuda_Stream_Stream'), CUDA.Stream);
CV_ERL_TYPE(cuda_Event, cuda_Event, Ptr<cv::cuda::Event>, Ptr, NoBase, ('cuda_cuda_Event_Event', 'evision_cv_cuda_cuda_Event_Event'), CUDA.Event);
CV_ERL_TYPE(cuda_TargetArchs, cuda_TargetArchs, Ptr<cv::cuda::TargetArchs>, Ptr, NoBase, 0, CUDA.TargetArchs);
CV_ERL_TYPE(cuda_DeviceInfo, cuda_DeviceInfo, Ptr<cv::cuda::DeviceInfo>, Ptr, NoBase, ('cuda_cuda_DeviceInfo_DeviceInfo', 'evision_cv_cuda_cuda_DeviceInfo_DeviceInfo'), CUDA.DeviceInfo);
CV_ERL_TYPE(ocl_Device, ocl_Device, cv::ocl::Device, Device, NoBase, ('ocl_ocl_Device_Device', 'evision_cv_ocl_ocl_Device_Device'), OCL.Device);
CV_ERL_TYPE(ocl_OpenCLExecutionContext, ocl_OpenCLExecutionContext, Ptr<cv::ocl::OpenCLExecutionContext>, Ptr, NoBase, 0, OCL.OpenCLExecutionContext);
CV_ERL_TYPE(FileStorage, FileStorage, Ptr<cv::FileStorage>, Ptr, NoBase, ('fileStorage_FileStorage', 'evision_cv_fileStorage_FileStorage'), FileStorage);
CV_ERL_TYPE(FileNode, FileNode, cv::FileNode, FileNode, NoBase, ('fileNode_FileNode', 'evision_cv_fileNode_FileNode'), FileNode);
CV_ERL_TYPE(RotatedRect, RotatedRect, cv::RotatedRect, RotatedRect, NoBase, ('rotatedRect_RotatedRect', 'evision_cv_rotatedRect_RotatedRect'), RotatedRect);
CV_ERL_TYPE(KeyPoint, KeyPoint, cv::KeyPoint, KeyPoint, NoBase, ('keyPoint_KeyPoint', 'evision_cv_keyPoint_KeyPoint'), KeyPoint);
CV_ERL_TYPE(DMatch, DMatch, cv::DMatch, DMatch, NoBase, ('dMatch_DMatch', 'evision_cv_dMatch_DMatch'), DMatch);
CV_ERL_TYPE(TickMeter, TickMeter, Ptr<cv::TickMeter>, Ptr, NoBase, ('tickMeter_TickMeter', 'evision_cv_tickMeter_TickMeter'), TickMeter);
CV_ERL_TYPE(UMat, UMat, Ptr<cv::UMat>, Ptr, NoBase, ('uMat_UMat', 'evision_cv_uMat_UMat'), UMat);
CV_ERL_TYPE(flann_Index, flann_Index, Ptr<cv::flann::Index>, Ptr, NoBase, ('flann_flann_Index_Index', 'evision_cv_flann_flann_Index_Index'), Flann.Index);
CV_ERL_TYPE(GeneralizedHough, GeneralizedHough, Ptr<cv::GeneralizedHough>, Ptr, Algorithm, 0, GeneralizedHough);
CV_ERL_TYPE(GeneralizedHoughBallard, GeneralizedHoughBallard, Ptr<cv::GeneralizedHoughBallard>, Ptr, GeneralizedHough, 0, GeneralizedHoughBallard);
CV_ERL_TYPE(GeneralizedHoughGuil, GeneralizedHoughGuil, Ptr<cv::GeneralizedHoughGuil>, Ptr, GeneralizedHough, 0, GeneralizedHoughGuil);
CV_ERL_TYPE(CLAHE, CLAHE, Ptr<cv::CLAHE>, Ptr, Algorithm, 0, CLAHE);
CV_ERL_TYPE(Subdiv2D, Subdiv2D, Ptr<cv::Subdiv2D>, Ptr, NoBase, ('subdiv2D_Subdiv2D', 'evision_cv_subdiv2D_Subdiv2D'), Subdiv2D);
CV_ERL_TYPE(LineSegmentDetector, LineSegmentDetector, Ptr<cv::LineSegmentDetector>, Ptr, Algorithm, 0, LineSegmentDetector);
CV_ERL_TYPE(segmentation_IntelligentScissorsMB, segmentation_IntelligentScissorsMB, cv::segmentation::IntelligentScissorsMB, IntelligentScissorsMB, NoBase, ('segmentation_segmentation_IntelligentScissorsMB_IntelligentScissorsMB', 'evision_cv_segmentation_segmentation_IntelligentScissorsMB_IntelligentScissorsMB'), Segmentation.IntelligentScissorsMB);
CV_ERL_TYPE(ml_ParamGrid, ml_ParamGrid, Ptr<cv::ml::ParamGrid>, Ptr, NoBase, 0, ML.ParamGrid);
CV_ERL_TYPE(ml_TrainData, ml_TrainData, Ptr<cv::ml::TrainData>, Ptr, NoBase, 0, ML.TrainData);
CV_ERL_TYPE(ml_StatModel, ml_StatModel, Ptr<cv::ml::StatModel>, Ptr, Algorithm, 0, ML.StatModel);
CV_ERL_TYPE(ml_NormalBayesClassifier, ml_NormalBayesClassifier, Ptr<cv::ml::NormalBayesClassifier>, Ptr, ml_StatModel, 0, ML.NormalBayesClassifier);
CV_ERL_TYPE(ml_KNearest, ml_KNearest, Ptr<cv::ml::KNearest>, Ptr, ml_StatModel, 0, ML.KNearest);
CV_ERL_TYPE(ml_SVM, ml_SVM, Ptr<cv::ml::SVM>, Ptr, ml_StatModel, 0, ML.SVM);
CV_ERL_TYPE(ml_EM, ml_EM, Ptr<cv::ml::EM>, Ptr, ml_StatModel, 0, ML.EM);
CV_ERL_TYPE(ml_DTrees, ml_DTrees, Ptr<cv::ml::DTrees>, Ptr, ml_StatModel, 0, ML.DTrees);
CV_ERL_TYPE(ml_RTrees, ml_RTrees, Ptr<cv::ml::RTrees>, Ptr, ml_DTrees, 0, ML.RTrees);
CV_ERL_TYPE(ml_Boost, ml_Boost, Ptr<cv::ml::Boost>, Ptr, ml_DTrees, 0, ML.Boost);
CV_ERL_TYPE(ml_ANN_MLP, ml_ANN_MLP, Ptr<cv::ml::ANN_MLP>, Ptr, ml_StatModel, 0, ML.ANNMLP);
CV_ERL_TYPE(ml_LogisticRegression, ml_LogisticRegression, Ptr<cv::ml::LogisticRegression>, Ptr, ml_StatModel, 0, ML.LogisticRegression);
CV_ERL_TYPE(ml_SVMSGD, ml_SVMSGD, Ptr<cv::ml::SVMSGD>, Ptr, ml_StatModel, 0, ML.SVMSGD);
CV_ERL_TYPE(phase_unwrapping_HistogramPhaseUnwrapping, phase_unwrapping_HistogramPhaseUnwrapping, Ptr<cv::phase_unwrapping::HistogramPhaseUnwrapping>, Ptr, phase_unwrapping_PhaseUnwrapping, 0, PhaseUnwrapping.HistogramPhaseUnwrapping);
CV_ERL_TYPE(phase_unwrapping_HistogramPhaseUnwrapping_Params, phase_unwrapping_HistogramPhaseUnwrapping_Params, cv::phase_unwrapping::HistogramPhaseUnwrapping::Params, Params, NoBase, ('phase_unwrapping_phase_unwrapping_HistogramPhaseUnwrapping_Params_HistogramPhaseUnwrapping_Params', 'evision_cv_phase_unwrapping_phase_unwrapping_HistogramPhaseUnwrapping_Params_HistogramPhaseUnwrapping_Params'), PhaseUnwrapping.HistogramPhaseUnwrapping.Params);
CV_ERL_TYPE(phase_unwrapping_PhaseUnwrapping, phase_unwrapping_PhaseUnwrapping, Ptr<cv::phase_unwrapping::PhaseUnwrapping>, Ptr, Algorithm, 0, PhaseUnwrapping.PhaseUnwrapping);
CV_ERL_TYPE(Tonemap, Tonemap, Ptr<cv::Tonemap>, Ptr, Algorithm, 0, Tonemap);
CV_ERL_TYPE(TonemapDrago, TonemapDrago, Ptr<cv::TonemapDrago>, Ptr, Tonemap, 0, TonemapDrago);
CV_ERL_TYPE(TonemapReinhard, TonemapReinhard, Ptr<cv::TonemapReinhard>, Ptr, Tonemap, 0, TonemapReinhard);
CV_ERL_TYPE(TonemapMantiuk, TonemapMantiuk, Ptr<cv::TonemapMantiuk>, Ptr, Tonemap, 0, TonemapMantiuk);
CV_ERL_TYPE(AlignExposures, AlignExposures, Ptr<cv::AlignExposures>, Ptr, Algorithm, 0, AlignExposures);
CV_ERL_TYPE(AlignMTB, AlignMTB, Ptr<cv::AlignMTB>, Ptr, AlignExposures, 0, AlignMTB);
CV_ERL_TYPE(CalibrateCRF, CalibrateCRF, Ptr<cv::CalibrateCRF>, Ptr, Algorithm, 0, CalibrateCRF);
CV_ERL_TYPE(CalibrateDebevec, CalibrateDebevec, Ptr<cv::CalibrateDebevec>, Ptr, CalibrateCRF, 0, CalibrateDebevec);
CV_ERL_TYPE(CalibrateRobertson, CalibrateRobertson, Ptr<cv::CalibrateRobertson>, Ptr, CalibrateCRF, 0, CalibrateRobertson);
CV_ERL_TYPE(MergeExposures, MergeExposures, Ptr<cv::MergeExposures>, Ptr, Algorithm, 0, MergeExposures);
CV_ERL_TYPE(MergeDebevec, MergeDebevec, Ptr<cv::MergeDebevec>, Ptr, MergeExposures, 0, MergeDebevec);
CV_ERL_TYPE(MergeMertens, MergeMertens, Ptr<cv::MergeMertens>, Ptr, MergeExposures, 0, MergeMertens);
CV_ERL_TYPE(MergeRobertson, MergeRobertson, Ptr<cv::MergeRobertson>, Ptr, MergeExposures, 0, MergeRobertson);
CV_ERL_TYPE(plot_Plot2d, plot_Plot2d, Ptr<cv::plot::Plot2d>, Ptr, Algorithm, 0, Plot.Plot2d);
CV_ERL_TYPE(quality_QualityBase, quality_QualityBase, Ptr<cv::quality::QualityBase>, Ptr, Algorithm, 0, Quality.QualityBase);
CV_ERL_TYPE(quality_QualityBRISQUE, quality_QualityBRISQUE, Ptr<cv::quality::QualityBRISQUE>, Ptr, quality_QualityBase, 0, Quality.QualityBRISQUE);
CV_ERL_TYPE(quality_QualityGMSD, quality_QualityGMSD, Ptr<cv::quality::QualityGMSD>, Ptr, quality_QualityBase, 0, Quality.QualityGMSD);
CV_ERL_TYPE(quality_QualityMSE, quality_QualityMSE, Ptr<cv::quality::QualityMSE>, Ptr, quality_QualityBase, 0, Quality.QualityMSE);
CV_ERL_TYPE(quality_QualityPSNR, quality_QualityPSNR, Ptr<cv::quality::QualityPSNR>, Ptr, quality_QualityBase, 0, Quality.QualityPSNR);
CV_ERL_TYPE(quality_QualitySSIM, quality_QualitySSIM, Ptr<cv::quality::QualitySSIM>, Ptr, quality_QualityBase, 0, Quality.QualitySSIM);
CV_ERL_TYPE(reg_Map, reg_Map, Ptr<cv::reg::Map>, Ptr, NoBase, 0, Reg.Map);
CV_ERL_TYPE(reg_MapAffine, reg_MapAffine, Ptr<cv::reg::MapAffine>, Ptr, reg_Map, ('reg_reg_MapAffine_MapAffine', 'evision_cv_reg_reg_MapAffine_MapAffine'), Reg.MapAffine);
CV_ERL_TYPE(reg_Mapper, reg_Mapper, Ptr<cv::reg::Mapper>, Ptr, NoBase, 0, Reg.Mapper);
CV_ERL_TYPE(reg_MapperGradAffine, reg_MapperGradAffine, Ptr<cv::reg::MapperGradAffine>, Ptr, reg_Mapper, ('reg_reg_MapperGradAffine_MapperGradAffine', 'evision_cv_reg_reg_MapperGradAffine_MapperGradAffine'), Reg.MapperGradAffine);
CV_ERL_TYPE(reg_MapperGradEuclid, reg_MapperGradEuclid, Ptr<cv::reg::MapperGradEuclid>, Ptr, reg_Mapper, ('reg_reg_MapperGradEuclid_MapperGradEuclid', 'evision_cv_reg_reg_MapperGradEuclid_MapperGradEuclid'), Reg.MapperGradEuclid);
CV_ERL_TYPE(reg_MapperGradProj, reg_MapperGradProj, Ptr<cv::reg::MapperGradProj>, Ptr, reg_Mapper, ('reg_reg_MapperGradProj_MapperGradProj', 'evision_cv_reg_reg_MapperGradProj_MapperGradProj'), Reg.MapperGradProj);
CV_ERL_TYPE(reg_MapperGradShift, reg_MapperGradShift, Ptr<cv::reg::MapperGradShift>, Ptr, reg_Mapper, ('reg_reg_MapperGradShift_MapperGradShift', 'evision_cv_reg_reg_MapperGradShift_MapperGradShift'), Reg.MapperGradShift);
CV_ERL_TYPE(reg_MapperGradSimilar, reg_MapperGradSimilar, Ptr<cv::reg::MapperGradSimilar>, Ptr, reg_Mapper, ('reg_reg_MapperGradSimilar_MapperGradSimilar', 'evision_cv_reg_reg_MapperGradSimilar_MapperGradSimilar'), Reg.MapperGradSimilar);
CV_ERL_TYPE(reg_MapperPyramid, reg_MapperPyramid, Ptr<cv::reg::MapperPyramid>, Ptr, reg_Mapper, ('reg_reg_MapperPyramid_MapperPyramid', 'evision_cv_reg_reg_MapperPyramid_MapperPyramid'), Reg.MapperPyramid);
CV_ERL_TYPE(reg_MapTypeCaster, reg_MapTypeCaster, Ptr<cv::reg::MapTypeCaster>, Ptr, NoBase, 0, Reg.MapTypeCaster);
CV_ERL_TYPE(reg_MapProjec, reg_MapProjec, Ptr<cv::reg::MapProjec>, Ptr, reg_Map, ('reg_reg_MapProjec_MapProjec', 'evision_cv_reg_reg_MapProjec_MapProjec'), Reg.MapProjec);
CV_ERL_TYPE(reg_MapShift, reg_MapShift, Ptr<cv::reg::MapShift>, Ptr, reg_Map, ('reg_reg_MapShift_MapShift', 'evision_cv_reg_reg_MapShift_MapShift'), Reg.MapShift);
CV_ERL_TYPE(ppf_match_3d_ICP, ppf_match_3d_ICP, Ptr<cv::ppf_match_3d::ICP>, Ptr, NoBase, ('ppf_match_3d_ppf_match_3d_ICP_ICP', 'evision_cv_ppf_match_3d_ppf_match_3d_ICP_ICP'), PPFMatch3D.ICP);
CV_ERL_TYPE(ppf_match_3d_Pose3D, ppf_match_3d_Pose3D, Ptr<cv::ppf_match_3d::Pose3D>, Ptr, NoBase, ('ppf_match_3d_ppf_match_3d_Pose3D_Pose3D', 'evision_cv_ppf_match_3d_ppf_match_3d_Pose3D_Pose3D'), PPFMatch3D.Pose3D);
CV_ERL_TYPE(ppf_match_3d_PoseCluster3D, ppf_match_3d_PoseCluster3D, Ptr<cv::ppf_match_3d::PoseCluster3D>, Ptr, NoBase, 0, PPFMatch3D.PoseCluster3D);
CV_ERL_TYPE(ppf_match_3d_PPF3DDetector, ppf_match_3d_PPF3DDetector, Ptr<cv::ppf_match_3d::PPF3DDetector>, Ptr, NoBase, ('ppf_match_3d_ppf_match_3d_PPF3DDetector_PPF3DDetector', 'evision_cv_ppf_match_3d_ppf_match_3d_PPF3DDetector_PPF3DDetector'), PPFMatch3D.PPF3DDetector);
CV_ERL_TYPE(xphoto_TonemapDurand, xphoto_TonemapDurand, Ptr<cv::xphoto::TonemapDurand>, Ptr, Tonemap, 0, XPhoto.TonemapDurand);
CV_ERL_TYPE(xphoto_WhiteBalancer, xphoto_WhiteBalancer, Ptr<cv::xphoto::WhiteBalancer>, Ptr, Algorithm, 0, XPhoto.WhiteBalancer);
CV_ERL_TYPE(xphoto_SimpleWB, xphoto_SimpleWB, Ptr<cv::xphoto::SimpleWB>, Ptr, xphoto_WhiteBalancer, 0, XPhoto.SimpleWB);
CV_ERL_TYPE(xphoto_GrayworldWB, xphoto_GrayworldWB, Ptr<cv::xphoto::GrayworldWB>, Ptr, xphoto_WhiteBalancer, 0, XPhoto.GrayworldWB);
CV_ERL_TYPE(xphoto_LearningBasedWB, xphoto_LearningBasedWB, Ptr<cv::xphoto::LearningBasedWB>, Ptr, xphoto_WhiteBalancer, 0, XPhoto.LearningBasedWB);
CV_ERL_TYPE(dnn_DictValue, dnn_DictValue, Ptr<cv::dnn::DictValue>, Ptr, NoBase, ('dnn_dnn_DictValue_DictValue', 'evision_cv_dnn_dnn_DictValue_DictValue'), DNN.DictValue);
CV_ERL_TYPE(dnn_Layer, dnn_Layer, Ptr<cv::dnn::Layer>, Ptr, Algorithm, 0, DNN.Layer);
CV_ERL_TYPE(dnn_Net, dnn_Net, cv::dnn::Net, Net, NoBase, ('dnn_dnn_Net_Net', 'evision_cv_dnn_dnn_Net_Net'), DNN.Net);
CV_ERL_TYPE(dnn_Image2BlobParams, dnn_Image2BlobParams, cv::dnn::Image2BlobParams, Image2BlobParams, NoBase, ('dnn_dnn_Image2BlobParams_Image2BlobParams', 'evision_cv_dnn_dnn_Image2BlobParams_Image2BlobParams'), DNN.Image2BlobParams);
CV_ERL_TYPE(dnn_Model, dnn_Model, cv::dnn::Model, Model, NoBase, ('dnn_dnn_Model_Model', 'evision_cv_dnn_dnn_Model_Model'), DNN.Model);
CV_ERL_TYPE(dnn_ClassificationModel, dnn_ClassificationModel, cv::dnn::ClassificationModel, ClassificationModel, dnn_Model, ('dnn_dnn_ClassificationModel_ClassificationModel', 'evision_cv_dnn_dnn_ClassificationModel_ClassificationModel'), DNN.ClassificationModel);
CV_ERL_TYPE(dnn_KeypointsModel, dnn_KeypointsModel, cv::dnn::KeypointsModel, KeypointsModel, dnn_Model, ('dnn_dnn_KeypointsModel_KeypointsModel', 'evision_cv_dnn_dnn_KeypointsModel_KeypointsModel'), DNN.KeypointsModel);
CV_ERL_TYPE(dnn_SegmentationModel, dnn_SegmentationModel, cv::dnn::SegmentationModel, SegmentationModel, dnn_Model, ('dnn_dnn_SegmentationModel_SegmentationModel', 'evision_cv_dnn_dnn_SegmentationModel_SegmentationModel'), DNN.SegmentationModel);
CV_ERL_TYPE(dnn_DetectionModel, dnn_DetectionModel, cv::dnn::DetectionModel, DetectionModel, dnn_Model, ('dnn_dnn_DetectionModel_DetectionModel', 'evision_cv_dnn_dnn_DetectionModel_DetectionModel'), DNN.DetectionModel);
CV_ERL_TYPE(dnn_TextRecognitionModel, dnn_TextRecognitionModel, cv::dnn::TextRecognitionModel, TextRecognitionModel, dnn_Model, ('dnn_dnn_TextRecognitionModel_TextRecognitionModel', 'evision_cv_dnn_dnn_TextRecognitionModel_TextRecognitionModel'), DNN.TextRecognitionModel);
CV_ERL_TYPE(dnn_TextDetectionModel, dnn_TextDetectionModel, cv::dnn::TextDetectionModel, TextDetectionModel, dnn_Model, 0, DNN.TextDetectionModel);
CV_ERL_TYPE(dnn_TextDetectionModel_EAST, dnn_TextDetectionModel_EAST, cv::dnn::TextDetectionModel_EAST, TextDetectionModel_EAST, dnn_TextDetectionModel, ('dnn_dnn_TextDetectionModel_EAST_TextDetectionModel_EAST', 'evision_cv_dnn_dnn_TextDetectionModel_EAST_TextDetectionModel_EAST'), DNN.TextDetectionModelEAST);
CV_ERL_TYPE(dnn_TextDetectionModel_DB, dnn_TextDetectionModel_DB, cv::dnn::TextDetectionModel_DB, TextDetectionModel_DB, dnn_TextDetectionModel, ('dnn_dnn_TextDetectionModel_DB_TextDetectionModel_DB', 'evision_cv_dnn_dnn_TextDetectionModel_DB_TextDetectionModel_DB'), DNN.TextDetectionModelDB);
CV_ERL_TYPE(dnn_superres_DnnSuperResImpl, dnn_superres_DnnSuperResImpl, Ptr<cv::dnn_superres::DnnSuperResImpl>, Ptr, NoBase, 0, DNNSuperRes.DNNSuperResImpl);
CV_ERL_TYPE(Feature2D, Feature2D, Ptr<cv::Feature2D>, Ptr, NoBase, 0, Feature2D);
CV_ERL_TYPE(AffineFeature, AffineFeature, Ptr<cv::AffineFeature>, Ptr, Feature2D, 0, AffineFeature);
CV_ERL_TYPE(SIFT, SIFT, Ptr<cv::SIFT>, Ptr, Feature2D, 0, SIFT);
CV_ERL_TYPE(BRISK, BRISK, Ptr<cv::BRISK>, Ptr, Feature2D, 0, BRISK);
CV_ERL_TYPE(ORB, ORB, Ptr<cv::ORB>, Ptr, Feature2D, 0, ORB);
CV_ERL_TYPE(MSER, MSER, Ptr<cv::MSER>, Ptr, Feature2D, 0, MSER);
CV_ERL_TYPE(FastFeatureDetector, FastFeatureDetector, Ptr<cv::FastFeatureDetector>, Ptr, Feature2D, 0, FastFeatureDetector);
CV_ERL_TYPE(AgastFeatureDetector, AgastFeatureDetector, Ptr<cv::AgastFeatureDetector>, Ptr, Feature2D, 0, AgastFeatureDetector);
CV_ERL_TYPE(GFTTDetector, GFTTDetector, Ptr<cv::GFTTDetector>, Ptr, Feature2D, 0, GFTTDetector);
CV_ERL_TYPE(SimpleBlobDetector, SimpleBlobDetector, Ptr<cv::SimpleBlobDetector>, Ptr, Feature2D, 0, SimpleBlobDetector);
CV_ERL_TYPE(SimpleBlobDetector_Params, SimpleBlobDetector_Params, cv::SimpleBlobDetector::Params, Params, NoBase, ('simpleBlobDetector_Params_SimpleBlobDetector_Params', 'evision_cv_simpleBlobDetector_Params_SimpleBlobDetector_Params'), SimpleBlobDetector.Params);
CV_ERL_TYPE(KAZE, KAZE, Ptr<cv::KAZE>, Ptr, Feature2D, 0, KAZE);
CV_ERL_TYPE(AKAZE, AKAZE, Ptr<cv::AKAZE>, Ptr, Feature2D, 0, AKAZE);
CV_ERL_TYPE(DescriptorMatcher, DescriptorMatcher, Ptr<cv::DescriptorMatcher>, Ptr, Algorithm, 0, DescriptorMatcher);
CV_ERL_TYPE(BFMatcher, BFMatcher, Ptr<cv::BFMatcher>, Ptr, DescriptorMatcher, ('bfMatcher_BFMatcher', 'evision_cv_bfMatcher_BFMatcher'), BFMatcher);
CV_ERL_TYPE(FlannBasedMatcher, FlannBasedMatcher, Ptr<cv::FlannBasedMatcher>, Ptr, DescriptorMatcher, ('flannBasedMatcher_FlannBasedMatcher', 'evision_cv_flannBasedMatcher_FlannBasedMatcher'), FlannBasedMatcher);
CV_ERL_TYPE(BOWTrainer, BOWTrainer, Ptr<cv::BOWTrainer>, Ptr, NoBase, 0, BOWTrainer);
CV_ERL_TYPE(BOWKMeansTrainer, BOWKMeansTrainer, Ptr<cv::BOWKMeansTrainer>, Ptr, BOWTrainer, ('bowKMeansTrainer_BOWKMeansTrainer', 'evision_cv_bowKMeansTrainer_BOWKMeansTrainer'), BOWKMeansTrainer);
CV_ERL_TYPE(BOWImgDescriptorExtractor, BOWImgDescriptorExtractor, Ptr<cv::BOWImgDescriptorExtractor>, Ptr, NoBase, ('bowImgDescriptorExtractor_BOWImgDescriptorExtractor', 'evision_cv_bowImgDescriptorExtractor_BOWImgDescriptorExtractor'), BOWImgDescriptorExtractor);
CV_ERL_TYPE(hfs_HfsSegment, hfs_HfsSegment, Ptr<cv::hfs::HfsSegment>, Ptr, Algorithm, 0, HFS.HfsSegment);
CV_ERL_TYPE(img_hash_AverageHash, img_hash_AverageHash, Ptr<cv::img_hash::AverageHash>, Ptr, img_hash_ImgHashBase, 0, ImgHash.AverageHash);
CV_ERL_TYPE(img_hash_BlockMeanHash, img_hash_BlockMeanHash, Ptr<cv::img_hash::BlockMeanHash>, Ptr, img_hash_ImgHashBase, 0, ImgHash.BlockMeanHash);
CV_ERL_TYPE(img_hash_ColorMomentHash, img_hash_ColorMomentHash, Ptr<cv::img_hash::ColorMomentHash>, Ptr, img_hash_ImgHashBase, 0, ImgHash.ColorMomentHash);
CV_ERL_TYPE(img_hash_ImgHashBase, img_hash_ImgHashBase, Ptr<cv::img_hash::ImgHashBase>, Ptr, Algorithm, 0, ImgHash.ImgHashBase);
CV_ERL_TYPE(img_hash_MarrHildrethHash, img_hash_MarrHildrethHash, Ptr<cv::img_hash::MarrHildrethHash>, Ptr, img_hash_ImgHashBase, 0, ImgHash.MarrHildrethHash);
CV_ERL_TYPE(img_hash_PHash, img_hash_PHash, Ptr<cv::img_hash::PHash>, Ptr, img_hash_ImgHashBase, 0, ImgHash.PHash);
CV_ERL_TYPE(img_hash_RadialVarianceHash, img_hash_RadialVarianceHash, Ptr<cv::img_hash::RadialVarianceHash>, Ptr, img_hash_ImgHashBase, 0, ImgHash.RadialVarianceHash);
CV_ERL_TYPE(line_descriptor_KeyLine, line_descriptor_KeyLine, cv::line_descriptor::KeyLine, KeyLine, NoBase, ('line_descriptor_line_descriptor_KeyLine_KeyLine', 'evision_cv_line_descriptor_line_descriptor_KeyLine_KeyLine'), LineDescriptor.KeyLine);
CV_ERL_TYPE(line_descriptor_BinaryDescriptor, line_descriptor_BinaryDescriptor, Ptr<cv::line_descriptor::BinaryDescriptor>, Ptr, Algorithm, 0, LineDescriptor.BinaryDescriptor);
CV_ERL_TYPE(line_descriptor_LSDParam, line_descriptor_LSDParam, cv::line_descriptor::LSDParam, LSDParam, NoBase, ('line_descriptor_line_descriptor_LSDParam_LSDParam', 'evision_cv_line_descriptor_line_descriptor_LSDParam_LSDParam'), LineDescriptor.LSDParam);
CV_ERL_TYPE(line_descriptor_LSDDetector, line_descriptor_LSDDetector, Ptr<cv::line_descriptor::LSDDetector>, Ptr, Algorithm, ('line_descriptor_line_descriptor_LSDDetector_LSDDetectorWithParams', 'evision_cv_line_descriptor_line_descriptor_LSDDetector_LSDDetectorWithParams'), LineDescriptor.LSDDetector);
CV_ERL_TYPE(line_descriptor_BinaryDescriptorMatcher, line_descriptor_BinaryDescriptorMatcher, Ptr<cv::line_descriptor::BinaryDescriptorMatcher>, Ptr, Algorithm, ('line_descriptor_line_descriptor_BinaryDescriptorMatcher_BinaryDescriptorMatcher', 'evision_cv_line_descriptor_line_descriptor_BinaryDescriptorMatcher_BinaryDescriptorMatcher'), LineDescriptor.BinaryDescriptorMatcher);
CV_ERL_TYPE(line_descriptor_DrawLinesMatchesFlags, line_descriptor_DrawLinesMatchesFlags, cv::line_descriptor::DrawLinesMatchesFlags, DrawLinesMatchesFlags, NoBase, 0, LineDescriptor.DrawLinesMatchesFlags);
CV_ERL_TYPE(saliency_Saliency, saliency_Saliency, Ptr<cv::saliency::Saliency>, Ptr, Algorithm, 0, Saliency.Saliency);
CV_ERL_TYPE(saliency_StaticSaliency, saliency_StaticSaliency, Ptr<cv::saliency::StaticSaliency>, Ptr, saliency_Saliency, 0, Saliency.StaticSaliency);
CV_ERL_TYPE(saliency_MotionSaliency, saliency_MotionSaliency, Ptr<cv::saliency::MotionSaliency>, Ptr, saliency_Saliency, 0, Saliency.MotionSaliency);
CV_ERL_TYPE(saliency_Objectness, saliency_Objectness, Ptr<cv::saliency::Objectness>, Ptr, saliency_Saliency, 0, Saliency.Objectness);
CV_ERL_TYPE(saliency_StaticSaliencySpectralResidual, saliency_StaticSaliencySpectralResidual, Ptr<cv::saliency::StaticSaliencySpectralResidual>, Ptr, saliency_StaticSaliency, 0, Saliency.StaticSaliencySpectralResidual);
CV_ERL_TYPE(saliency_StaticSaliencyFineGrained, saliency_StaticSaliencyFineGrained, Ptr<cv::saliency::StaticSaliencyFineGrained>, Ptr, saliency_StaticSaliency, 0, Saliency.StaticSaliencyFineGrained);
CV_ERL_TYPE(saliency_MotionSaliencyBinWangApr2014, saliency_MotionSaliencyBinWangApr2014, Ptr<cv::saliency::MotionSaliencyBinWangApr2014>, Ptr, saliency_MotionSaliency, 0, Saliency.MotionSaliencyBinWangApr2014);
CV_ERL_TYPE(saliency_ObjectnessBING, saliency_ObjectnessBING, Ptr<cv::saliency::ObjectnessBING>, Ptr, saliency_Objectness, 0, Saliency.ObjectnessBING);
CV_ERL_TYPE(text_ERFilter, text_ERFilter, Ptr<cv::text::ERFilter>, Ptr, Algorithm, 0, Text.ERFilter);
CV_ERL_TYPE(text_ERFilter_Callback, text_ERFilter_Callback, Ptr<cv::text::ERFilter::Callback>, Ptr, NoBase, 0, Text.ERFilter.Callback);
CV_ERL_TYPE(text_BaseOCR, text_BaseOCR, Ptr<cv::text::BaseOCR>, Ptr, NoBase, 0, Text.BaseOCR);
CV_ERL_TYPE(text_OCRTesseract, text_OCRTesseract, Ptr<cv::text::OCRTesseract>, Ptr, text_BaseOCR, 0, Text.OCRTesseract);
CV_ERL_TYPE(text_OCRHMMDecoder, text_OCRHMMDecoder, Ptr<cv::text::OCRHMMDecoder>, Ptr, text_BaseOCR, 0, Text.OCRHMMDecoder);
CV_ERL_TYPE(text_OCRHMMDecoder_ClassifierCallback, text_OCRHMMDecoder_ClassifierCallback, Ptr<cv::text::OCRHMMDecoder::ClassifierCallback>, Ptr, NoBase, 0, Text.OCRHMMDecoder.ClassifierCallback);
CV_ERL_TYPE(text_OCRBeamSearchDecoder, text_OCRBeamSearchDecoder, Ptr<cv::text::OCRBeamSearchDecoder>, Ptr, text_BaseOCR, 0, Text.OCRBeamSearchDecoder);
CV_ERL_TYPE(text_OCRBeamSearchDecoder_ClassifierCallback, text_OCRBeamSearchDecoder_ClassifierCallback, Ptr<cv::text::OCRBeamSearchDecoder::ClassifierCallback>, Ptr, NoBase, 0, Text.OCRBeamSearchDecoder.ClassifierCallback);
CV_ERL_TYPE(text_TextDetector, text_TextDetector, Ptr<cv::text::TextDetector>, Ptr, NoBase, 0, Text.TextDetector);
CV_ERL_TYPE(text_TextDetectorCNN, text_TextDetectorCNN, Ptr<cv::text::TextDetectorCNN>, Ptr, text_TextDetector, 0, Text.TextDetectorCNN);
CV_ERL_TYPE(VideoCapture, VideoCapture, Ptr<cv::VideoCapture>, Ptr, NoBase, ('videoCapture_VideoCapture', 'evision_cv_videoCapture_VideoCapture'), VideoCapture);
CV_ERL_TYPE(VideoWriter, VideoWriter, Ptr<cv::VideoWriter>, Ptr, NoBase, ('videoWriter_VideoWriter', 'evision_cv_videoWriter_VideoWriter'), VideoWriter);
CV_ERL_TYPE(UsacParams, UsacParams, cv::UsacParams, UsacParams, NoBase, ('usacParams_UsacParams', 'evision_cv_usacParams_UsacParams'), UsacParams);
CV_ERL_TYPE(CirclesGridFinderParameters, CirclesGridFinderParameters, cv::CirclesGridFinderParameters, CirclesGridFinderParameters, NoBase, ('circlesGridFinderParameters_CirclesGridFinderParameters', 'evision_cv_circlesGridFinderParameters_CirclesGridFinderParameters'), CirclesGridFinderParameters);
CV_ERL_TYPE(StereoMatcher, StereoMatcher, Ptr<cv::StereoMatcher>, Ptr, Algorithm, 0, StereoMatcher);
CV_ERL_TYPE(StereoBM, StereoBM, Ptr<cv::StereoBM>, Ptr, StereoMatcher, 0, StereoBM);
CV_ERL_TYPE(StereoSGBM, StereoSGBM, Ptr<cv::StereoSGBM>, Ptr, StereoMatcher, 0, StereoSGBM);
CV_ERL_TYPE(ccm_ColorCorrectionModel, ccm_ColorCorrectionModel, Ptr<cv::ccm::ColorCorrectionModel>, Ptr, NoBase, ('ccm_ccm_ColorCorrectionModel_ColorCorrectionModel', 'evision_cv_ccm_ccm_ColorCorrectionModel_ColorCorrectionModel'), CCM.ColorCorrectionModel);
CV_ERL_TYPE(mcc_DetectorParameters, mcc_DetectorParameters, Ptr<cv::mcc::DetectorParameters>, Ptr, NoBase, 0, MCC.DetectorParameters);
CV_ERL_TYPE(mcc_CCheckerDetector, mcc_CCheckerDetector, Ptr<cv::mcc::CCheckerDetector>, Ptr, Algorithm, 0, MCC.CCheckerDetector);
CV_ERL_TYPE(mcc_CChecker, mcc_CChecker, Ptr<cv::mcc::CChecker>, Ptr, NoBase, 0, MCC.CChecker);
CV_ERL_TYPE(mcc_CCheckerDraw, mcc_CCheckerDraw, Ptr<cv::mcc::CCheckerDraw>, Ptr, NoBase, 0, MCC.CCheckerDraw);
CV_ERL_TYPE(BaseCascadeClassifier, BaseCascadeClassifier, Ptr<cv::BaseCascadeClassifier>, Ptr, Algorithm, 0, BaseCascadeClassifier);
CV_ERL_TYPE(CascadeClassifier, CascadeClassifier, Ptr<cv::CascadeClassifier>, Ptr, NoBase, ('cascadeClassifier_CascadeClassifier', 'evision_cv_cascadeClassifier_CascadeClassifier'), CascadeClassifier);
CV_ERL_TYPE(HOGDescriptor, HOGDescriptor, Ptr<cv::HOGDescriptor>, Ptr, NoBase, ('hogDescriptor_HOGDescriptor', 'evision_cv_hogDescriptor_HOGDescriptor'), HOGDescriptor);
CV_ERL_TYPE(QRCodeEncoder, QRCodeEncoder, Ptr<cv::QRCodeEncoder>, Ptr, NoBase, 0, QRCodeEncoder);
CV_ERL_TYPE(QRCodeEncoder_Params, QRCodeEncoder_Params, cv::QRCodeEncoder::Params, Params, NoBase, ('qrCodeEncoder_Params_QRCodeEncoder_Params', 'evision_cv_qrCodeEncoder_Params_QRCodeEncoder_Params'), QRCodeEncoder.Params);
CV_ERL_TYPE(QRCodeDetector, QRCodeDetector, cv::QRCodeDetector, QRCodeDetector, GraphicalCodeDetector, ('qrCodeDetector_QRCodeDetector', 'evision_cv_qrCodeDetector_QRCodeDetector'), QRCodeDetector);
CV_ERL_TYPE(QRCodeDetectorAruco, QRCodeDetectorAruco, cv::QRCodeDetectorAruco, QRCodeDetectorAruco, GraphicalCodeDetector, ('qrCodeDetectorAruco_QRCodeDetectorAruco', 'evision_cv_qrCodeDetectorAruco_QRCodeDetectorAruco'), QRCodeDetectorAruco);
CV_ERL_TYPE(QRCodeDetectorAruco_Params, QRCodeDetectorAruco_Params, cv::QRCodeDetectorAruco::Params, Params, NoBase, ('qrCodeDetectorAruco_Params_QRCodeDetectorAruco_Params', 'evision_cv_qrCodeDetectorAruco_Params_QRCodeDetectorAruco_Params'), QRCodeDetectorAruco.Params);
CV_ERL_TYPE(aruco_Board, aruco_Board, cv::aruco::Board, Board, NoBase, ('aruco_aruco_Board_Board', 'evision_cv_aruco_aruco_Board_Board'), ArUco.Board);
CV_ERL_TYPE(aruco_GridBoard, aruco_GridBoard, cv::aruco::GridBoard, GridBoard, aruco_Board, ('aruco_aruco_GridBoard_GridBoard', 'evision_cv_aruco_aruco_GridBoard_GridBoard'), ArUco.GridBoard);
CV_ERL_TYPE(aruco_CharucoBoard, aruco_CharucoBoard, cv::aruco::CharucoBoard, CharucoBoard, aruco_Board, ('aruco_aruco_CharucoBoard_CharucoBoard', 'evision_cv_aruco_aruco_CharucoBoard_CharucoBoard'), ArUco.CharucoBoard);
CV_ERL_TYPE(aruco_DetectorParameters, aruco_DetectorParameters, cv::aruco::DetectorParameters, DetectorParameters, NoBase, ('aruco_aruco_DetectorParameters_DetectorParameters', 'evision_cv_aruco_aruco_DetectorParameters_DetectorParameters'), ArUco.DetectorParameters);
CV_ERL_TYPE(aruco_RefineParameters, aruco_RefineParameters, cv::aruco::RefineParameters, RefineParameters, NoBase, ('aruco_aruco_RefineParameters_RefineParameters', 'evision_cv_aruco_aruco_RefineParameters_RefineParameters'), ArUco.RefineParameters);
CV_ERL_TYPE(aruco_ArucoDetector, aruco_ArucoDetector, Ptr<cv::aruco::ArucoDetector>, Ptr, Algorithm, ('aruco_aruco_ArucoDetector_ArucoDetector', 'evision_cv_aruco_aruco_ArucoDetector_ArucoDetector'), ArUco.ArucoDetector);
CV_ERL_TYPE(aruco_Dictionary, aruco_Dictionary, cv::aruco::Dictionary, Dictionary, NoBase, ('aruco_aruco_Dictionary_Dictionary', 'evision_cv_aruco_aruco_Dictionary_Dictionary'), ArUco.Dictionary);
CV_ERL_TYPE(barcode_BarcodeDetector, barcode_BarcodeDetector, cv::barcode::BarcodeDetector, BarcodeDetector, GraphicalCodeDetector, ('barcode_barcode_BarcodeDetector_BarcodeDetector', 'evision_cv_barcode_barcode_BarcodeDetector_BarcodeDetector'), Barcode.BarcodeDetector);
CV_ERL_TYPE(aruco_CharucoParameters, aruco_CharucoParameters, cv::aruco::CharucoParameters, CharucoParameters, NoBase, ('aruco_aruco_CharucoParameters_CharucoParameters', 'evision_cv_aruco_aruco_CharucoParameters_CharucoParameters'), ArUco.CharucoParameters);
CV_ERL_TYPE(aruco_CharucoDetector, aruco_CharucoDetector, Ptr<cv::aruco::CharucoDetector>, Ptr, Algorithm, ('aruco_aruco_CharucoDetector_CharucoDetector', 'evision_cv_aruco_aruco_CharucoDetector_CharucoDetector'), ArUco.CharucoDetector);
CV_ERL_TYPE(FaceDetectorYN, FaceDetectorYN, Ptr<cv::FaceDetectorYN>, Ptr, NoBase, 0, FaceDetectorYN);
CV_ERL_TYPE(FaceRecognizerSF, FaceRecognizerSF, Ptr<cv::FaceRecognizerSF>, Ptr, NoBase, 0, FaceRecognizerSF);
CV_ERL_TYPE(GraphicalCodeDetector, GraphicalCodeDetector, cv::GraphicalCodeDetector, GraphicalCodeDetector, NoBase, 0, GraphicalCodeDetector);
CV_ERL_TYPE(rapid_Tracker, rapid_Tracker, Ptr<cv::rapid::Tracker>, Ptr, Algorithm, 0, Rapid.Tracker);
CV_ERL_TYPE(rapid_Rapid, rapid_Rapid, Ptr<cv::rapid::Rapid>, Ptr, rapid_Tracker, 0, Rapid.Rapid);
CV_ERL_TYPE(rapid_OLSTracker, rapid_OLSTracker, Ptr<cv::rapid::OLSTracker>, Ptr, rapid_Tracker, 0, Rapid.OLSTracker);
CV_ERL_TYPE(rapid_GOSTracker, rapid_GOSTracker, Ptr<cv::rapid::GOSTracker>, Ptr, rapid_Tracker, 0, Rapid.GOSTracker);
CV_ERL_TYPE(colored_kinfu_Params, colored_kinfu_Params, Ptr<cv::colored_kinfu::Params>, Ptr, NoBase, ('colored_kinfu_colored_kinfu_Params_Params', 'evision_cv_colored_kinfu_colored_kinfu_Params_Params'), ColoredKinFu.Params);
CV_ERL_TYPE(colored_kinfu_ColoredKinFu, colored_kinfu_ColoredKinFu, Ptr<cv::colored_kinfu::ColoredKinFu>, Ptr, NoBase, 0, ColoredKinFu.ColoredKinFu);
CV_ERL_TYPE(rgbd_RgbdNormals, rgbd_RgbdNormals, Ptr<cv::rgbd::RgbdNormals>, Ptr, Algorithm, 0, RGBD.RgbdNormals);
CV_ERL_TYPE(rgbd_DepthCleaner, rgbd_DepthCleaner, Ptr<cv::rgbd::DepthCleaner>, Ptr, Algorithm, 0, RGBD.DepthCleaner);
CV_ERL_TYPE(rgbd_RgbdPlane, rgbd_RgbdPlane, Ptr<cv::rgbd::RgbdPlane>, Ptr, Algorithm, 0, RGBD.RgbdPlane);
CV_ERL_TYPE(rgbd_RgbdFrame, rgbd_RgbdFrame, Ptr<cv::rgbd::RgbdFrame>, Ptr, NoBase, 0, RGBD.RgbdFrame);
CV_ERL_TYPE(rgbd_OdometryFrame, rgbd_OdometryFrame, Ptr<cv::rgbd::OdometryFrame>, Ptr, rgbd_RgbdFrame, 0, RGBD.OdometryFrame);
CV_ERL_TYPE(rgbd_Odometry, rgbd_Odometry, Ptr<cv::rgbd::Odometry>, Ptr, Algorithm, 0, RGBD.Odometry);
CV_ERL_TYPE(rgbd_RgbdOdometry, rgbd_RgbdOdometry, Ptr<cv::rgbd::RgbdOdometry>, Ptr, rgbd_Odometry, 0, RGBD.RgbdOdometry);
CV_ERL_TYPE(rgbd_ICPOdometry, rgbd_ICPOdometry, Ptr<cv::rgbd::ICPOdometry>, Ptr, rgbd_Odometry, 0, RGBD.ICPOdometry);
CV_ERL_TYPE(rgbd_RgbdICPOdometry, rgbd_RgbdICPOdometry, Ptr<cv::rgbd::RgbdICPOdometry>, Ptr, rgbd_Odometry, 0, RGBD.RgbdICPOdometry);
CV_ERL_TYPE(rgbd_FastICPOdometry, rgbd_FastICPOdometry, Ptr<cv::rgbd::FastICPOdometry>, Ptr, rgbd_Odometry, 0, RGBD.FastICPOdometry);
CV_ERL_TYPE(kinfu_detail_PoseGraph, kinfu_detail_PoseGraph, Ptr<cv::kinfu::detail::PoseGraph>, Ptr, NoBase, 0, KinFu.Detail.PoseGraph);
CV_ERL_TYPE(dynafu_DynaFu, dynafu_DynaFu, Ptr<cv::dynafu::DynaFu>, Ptr, NoBase, 0, DynaFu.DynaFu);
CV_ERL_TYPE(kinfu_Params, kinfu_Params, Ptr<cv::kinfu::Params>, Ptr, NoBase, ('kinfu_kinfu_Params_Params', 'evision_cv_kinfu_kinfu_Params_Params'), KinFu.Params);
CV_ERL_TYPE(kinfu_KinFu, kinfu_KinFu, Ptr<cv::kinfu::KinFu>, Ptr, NoBase, 0, KinFu.KinFu);
CV_ERL_TYPE(large_kinfu_Params, large_kinfu_Params, Ptr<cv::large_kinfu::Params>, Ptr, NoBase, 0, LargeKinfu.Params);
CV_ERL_TYPE(large_kinfu_LargeKinfu, large_kinfu_LargeKinfu, Ptr<cv::large_kinfu::LargeKinfu>, Ptr, NoBase, 0, LargeKinfu.LargeKinfu);
CV_ERL_TYPE(linemod_Feature, linemod_Feature, cv::linemod::Feature, Feature, NoBase, ('linemod_linemod_Feature_Feature', 'evision_cv_linemod_linemod_Feature_Feature'), LineMod.Feature);
CV_ERL_TYPE(linemod_Template, linemod_Template, cv::linemod::Template, Template, NoBase, 0, LineMod.Template);
CV_ERL_TYPE(linemod_QuantizedPyramid, linemod_QuantizedPyramid, Ptr<cv::linemod::QuantizedPyramid>, Ptr, NoBase, 0, LineMod.QuantizedPyramid);
CV_ERL_TYPE(linemod_Modality, linemod_Modality, Ptr<cv::linemod::Modality>, Ptr, NoBase, 0, LineMod.Modality);
CV_ERL_TYPE(linemod_ColorGradient, linemod_ColorGradient, Ptr<cv::linemod::ColorGradient>, Ptr, linemod_Modality, 0, LineMod.ColorGradient);
CV_ERL_TYPE(linemod_DepthNormal, linemod_DepthNormal, Ptr<cv::linemod::DepthNormal>, Ptr, linemod_Modality, 0, LineMod.DepthNormal);
CV_ERL_TYPE(linemod_Match, linemod_Match, cv::linemod::Match, Match, NoBase, ('linemod_linemod_Match_Match', 'evision_cv_linemod_linemod_Match_Match'), LineMod.Match);
CV_ERL_TYPE(linemod_Detector, linemod_Detector, Ptr<cv::linemod::Detector>, Ptr, NoBase, ('linemod_linemod_Detector_Detector', 'evision_cv_linemod_linemod_Detector_Detector'), LineMod.Detector);
CV_ERL_TYPE(kinfu_Volume, kinfu_Volume, Ptr<cv::kinfu::Volume>, Ptr, NoBase, 0, KinFu.Volume);
CV_ERL_TYPE(kinfu_VolumeParams, kinfu_VolumeParams, Ptr<cv::kinfu::VolumeParams>, Ptr, NoBase, 0, KinFu.VolumeParams);
CV_ERL_TYPE(HistogramCostExtractor, HistogramCostExtractor, Ptr<cv::HistogramCostExtractor>, Ptr, Algorithm, 0, HistogramCostExtractor);
CV_ERL_TYPE(NormHistogramCostExtractor, NormHistogramCostExtractor, Ptr<cv::NormHistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, NormHistogramCostExtractor);
CV_ERL_TYPE(EMDHistogramCostExtractor, EMDHistogramCostExtractor, Ptr<cv::EMDHistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, EMDHistogramCostExtractor);
CV_ERL_TYPE(ChiHistogramCostExtractor, ChiHistogramCostExtractor, Ptr<cv::ChiHistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, ChiHistogramCostExtractor);
CV_ERL_TYPE(EMDL1HistogramCostExtractor, EMDL1HistogramCostExtractor, Ptr<cv::EMDL1HistogramCostExtractor>, Ptr, HistogramCostExtractor, 0, EMDL1HistogramCostExtractor);
CV_ERL_TYPE(ShapeDistanceExtractor, ShapeDistanceExtractor, Ptr<cv::ShapeDistanceExtractor>, Ptr, Algorithm, 0, ShapeDistanceExtractor);
CV_ERL_TYPE(ShapeContextDistanceExtractor, ShapeContextDistanceExtractor, Ptr<cv::ShapeContextDistanceExtractor>, Ptr, ShapeDistanceExtractor, 0, ShapeContextDistanceExtractor);
CV_ERL_TYPE(HausdorffDistanceExtractor, HausdorffDistanceExtractor, Ptr<cv::HausdorffDistanceExtractor>, Ptr, ShapeDistanceExtractor, 0, HausdorffDistanceExtractor);
CV_ERL_TYPE(ShapeTransformer, ShapeTransformer, Ptr<cv::ShapeTransformer>, Ptr, Algorithm, 0, ShapeTransformer);
CV_ERL_TYPE(ThinPlateSplineShapeTransformer, ThinPlateSplineShapeTransformer, Ptr<cv::ThinPlateSplineShapeTransformer>, Ptr, ShapeTransformer, 0, ThinPlateSplineShapeTransformer);
CV_ERL_TYPE(AffineTransformer, AffineTransformer, Ptr<cv::AffineTransformer>, Ptr, ShapeTransformer, 0, AffineTransformer);
CV_ERL_TYPE(structured_light_GrayCodePattern, structured_light_GrayCodePattern, Ptr<cv::structured_light::GrayCodePattern>, Ptr, structured_light_StructuredLightPattern, 0, StructuredLight.GrayCodePattern);
CV_ERL_TYPE(structured_light_SinusoidalPattern, structured_light_SinusoidalPattern, Ptr<cv::structured_light::SinusoidalPattern>, Ptr, structured_light_StructuredLightPattern, 0, StructuredLight.SinusoidalPattern);
CV_ERL_TYPE(structured_light_SinusoidalPattern_Params, structured_light_SinusoidalPattern_Params, Ptr<cv::structured_light::SinusoidalPattern::Params>, Ptr, NoBase, ('structured_light_structured_light_SinusoidalPattern_Params_SinusoidalPattern_Params', 'evision_cv_structured_light_structured_light_SinusoidalPattern_Params_SinusoidalPattern_Params'), StructuredLight.SinusoidalPattern.Params);
CV_ERL_TYPE(structured_light_StructuredLightPattern, structured_light_StructuredLightPattern, Ptr<cv::structured_light::StructuredLightPattern>, Ptr, Algorithm, 0, StructuredLight.StructuredLightPattern);
CV_ERL_TYPE(BackgroundSubtractor, BackgroundSubtractor, Ptr<cv::BackgroundSubtractor>, Ptr, Algorithm, 0, BackgroundSubtractor);
CV_ERL_TYPE(BackgroundSubtractorMOG2, BackgroundSubtractorMOG2, Ptr<cv::BackgroundSubtractorMOG2>, Ptr, BackgroundSubtractor, 0, BackgroundSubtractorMOG2);
CV_ERL_TYPE(BackgroundSubtractorKNN, BackgroundSubtractorKNN, Ptr<cv::BackgroundSubtractorKNN>, Ptr, BackgroundSubtractor, 0, BackgroundSubtractorKNN);
CV_ERL_TYPE(KalmanFilter, KalmanFilter, Ptr<cv::KalmanFilter>, Ptr, NoBase, ('kalmanFilter_KalmanFilter', 'evision_cv_kalmanFilter_KalmanFilter'), KalmanFilter);
CV_ERL_TYPE(DenseOpticalFlow, DenseOpticalFlow, Ptr<cv::DenseOpticalFlow>, Ptr, Algorithm, 0, DenseOpticalFlow);
CV_ERL_TYPE(SparseOpticalFlow, SparseOpticalFlow, Ptr<cv::SparseOpticalFlow>, Ptr, Algorithm, 0, SparseOpticalFlow);
CV_ERL_TYPE(FarnebackOpticalFlow, FarnebackOpticalFlow, Ptr<cv::FarnebackOpticalFlow>, Ptr, DenseOpticalFlow, 0, FarnebackOpticalFlow);
CV_ERL_TYPE(VariationalRefinement, VariationalRefinement, Ptr<cv::VariationalRefinement>, Ptr, DenseOpticalFlow, 0, VariationalRefinement);
CV_ERL_TYPE(DISOpticalFlow, DISOpticalFlow, Ptr<cv::DISOpticalFlow>, Ptr, DenseOpticalFlow, 0, DISOpticalFlow);
CV_ERL_TYPE(SparsePyrLKOpticalFlow, SparsePyrLKOpticalFlow, Ptr<cv::SparsePyrLKOpticalFlow>, Ptr, SparseOpticalFlow, 0, SparsePyrLKOpticalFlow);
CV_ERL_TYPE(Tracker, Tracker, Ptr<cv::Tracker>, Ptr, NoBase, 0, Tracker);
CV_ERL_TYPE(TrackerMIL, TrackerMIL, Ptr<cv::TrackerMIL>, Ptr, Tracker, 0, TrackerMIL);
CV_ERL_TYPE(TrackerMIL_Params, TrackerMIL_Params, cv::TrackerMIL::Params, Params, NoBase, ('trackerMIL_Params_TrackerMIL_Params', 'evision_cv_trackerMIL_Params_TrackerMIL_Params'), TrackerMIL.Params);
CV_ERL_TYPE(TrackerGOTURN, TrackerGOTURN, Ptr<cv::TrackerGOTURN>, Ptr, Tracker, 0, TrackerGOTURN);
CV_ERL_TYPE(TrackerGOTURN_Params, TrackerGOTURN_Params, cv::TrackerGOTURN::Params, Params, NoBase, ('trackerGOTURN_Params_TrackerGOTURN_Params', 'evision_cv_trackerGOTURN_Params_TrackerGOTURN_Params'), TrackerGOTURN.Params);
CV_ERL_TYPE(TrackerDaSiamRPN, TrackerDaSiamRPN, Ptr<cv::TrackerDaSiamRPN>, Ptr, Tracker, 0, TrackerDaSiamRPN);
CV_ERL_TYPE(TrackerDaSiamRPN_Params, TrackerDaSiamRPN_Params, cv::TrackerDaSiamRPN::Params, Params, NoBase, ('trackerDaSiamRPN_Params_TrackerDaSiamRPN_Params', 'evision_cv_trackerDaSiamRPN_Params_TrackerDaSiamRPN_Params'), TrackerDaSiamRPN.Params);
CV_ERL_TYPE(TrackerNano, TrackerNano, Ptr<cv::TrackerNano>, Ptr, Tracker, 0, TrackerNano);
CV_ERL_TYPE(TrackerNano_Params, TrackerNano_Params, cv::TrackerNano::Params, Params, NoBase, ('trackerNano_Params_TrackerNano_Params', 'evision_cv_trackerNano_Params_TrackerNano_Params'), TrackerNano.Params);
CV_ERL_TYPE(TrackerVit, TrackerVit, Ptr<cv::TrackerVit>, Ptr, Tracker, 0, TrackerVit);
CV_ERL_TYPE(TrackerVit_Params, TrackerVit_Params, cv::TrackerVit::Params, Params, NoBase, ('trackerVit_Params_TrackerVit_Params', 'evision_cv_trackerVit_Params_TrackerVit_Params'), TrackerVit.Params);
CV_ERL_TYPE(wechat_qrcode_WeChatQRCode, wechat_qrcode_WeChatQRCode, Ptr<cv::wechat_qrcode::WeChatQRCode>, Ptr, NoBase, ('wechat_qrcode_wechat_qrcode_WeChatQRCode_WeChatQRCode', 'evision_cv_wechat_qrcode_wechat_qrcode_WeChatQRCode_WeChatQRCode'), WeChatQRCode.WeChatQRCode);
CV_ERL_TYPE(xfeatures2d_FREAK, xfeatures2d_FREAK, Ptr<cv::xfeatures2d::FREAK>, Ptr, Feature2D, 0, XFeatures2D.FREAK);
CV_ERL_TYPE(xfeatures2d_StarDetector, xfeatures2d_StarDetector, Ptr<cv::xfeatures2d::StarDetector>, Ptr, Feature2D, 0, XFeatures2D.StarDetector);
CV_ERL_TYPE(xfeatures2d_BriefDescriptorExtractor, xfeatures2d_BriefDescriptorExtractor, Ptr<cv::xfeatures2d::BriefDescriptorExtractor>, Ptr, Feature2D, 0, XFeatures2D.BriefDescriptorExtractor);
CV_ERL_TYPE(xfeatures2d_LUCID, xfeatures2d_LUCID, Ptr<cv::xfeatures2d::LUCID>, Ptr, Feature2D, 0, XFeatures2D.LUCID);
CV_ERL_TYPE(xfeatures2d_LATCH, xfeatures2d_LATCH, Ptr<cv::xfeatures2d::LATCH>, Ptr, Feature2D, 0, XFeatures2D.LATCH);
CV_ERL_TYPE(xfeatures2d_BEBLID, xfeatures2d_BEBLID, Ptr<cv::xfeatures2d::BEBLID>, Ptr, Feature2D, 0, XFeatures2D.BEBLID);
CV_ERL_TYPE(xfeatures2d_TEBLID, xfeatures2d_TEBLID, Ptr<cv::xfeatures2d::TEBLID>, Ptr, Feature2D, 0, XFeatures2D.TEBLID);
CV_ERL_TYPE(xfeatures2d_DAISY, xfeatures2d_DAISY, Ptr<cv::xfeatures2d::DAISY>, Ptr, Feature2D, 0, XFeatures2D.DAISY);
CV_ERL_TYPE(xfeatures2d_MSDDetector, xfeatures2d_MSDDetector, Ptr<cv::xfeatures2d::MSDDetector>, Ptr, Feature2D, 0, XFeatures2D.MSDDetector);
CV_ERL_TYPE(xfeatures2d_VGG, xfeatures2d_VGG, Ptr<cv::xfeatures2d::VGG>, Ptr, Feature2D, 0, XFeatures2D.VGG);
CV_ERL_TYPE(xfeatures2d_BoostDesc, xfeatures2d_BoostDesc, Ptr<cv::xfeatures2d::BoostDesc>, Ptr, Feature2D, 0, XFeatures2D.BoostDesc);
CV_ERL_TYPE(xfeatures2d_PCTSignatures, xfeatures2d_PCTSignatures, Ptr<cv::xfeatures2d::PCTSignatures>, Ptr, Algorithm, 0, XFeatures2D.PCTSignatures);
CV_ERL_TYPE(xfeatures2d_PCTSignaturesSQFD, xfeatures2d_PCTSignaturesSQFD, Ptr<cv::xfeatures2d::PCTSignaturesSQFD>, Ptr, Algorithm, 0, XFeatures2D.PCTSignaturesSQFD);
CV_ERL_TYPE(xfeatures2d_HarrisLaplaceFeatureDetector, xfeatures2d_HarrisLaplaceFeatureDetector, Ptr<cv::xfeatures2d::HarrisLaplaceFeatureDetector>, Ptr, Feature2D, 0, XFeatures2D.HarrisLaplaceFeatureDetector);
CV_ERL_TYPE(xfeatures2d_AffineFeature2D, xfeatures2d_AffineFeature2D, Ptr<cv::xfeatures2d::AffineFeature2D>, Ptr, Feature2D, 0, XFeatures2D.AffineFeature2D);
CV_ERL_TYPE(xfeatures2d_TBMR, xfeatures2d_TBMR, Ptr<cv::xfeatures2d::TBMR>, Ptr, xfeatures2d_AffineFeature2D, 0, XFeatures2D.TBMR);
CV_ERL_TYPE(cuda_SURF_CUDA, cuda_SURF_CUDA, Ptr<cv::cuda::SURF_CUDA>, Ptr, NoBase, 0, CUDA.SURFCUDA);
CV_ERL_TYPE(xfeatures2d_SURF, xfeatures2d_SURF, Ptr<cv::xfeatures2d::SURF>, Ptr, Feature2D, 0, XFeatures2D.SURF);
CV_ERL_TYPE(ximgproc_DisparityFilter, ximgproc_DisparityFilter, Ptr<cv::ximgproc::DisparityFilter>, Ptr, Algorithm, 0, XImgProc.DisparityFilter);
CV_ERL_TYPE(ximgproc_DisparityWLSFilter, ximgproc_DisparityWLSFilter, Ptr<cv::ximgproc::DisparityWLSFilter>, Ptr, ximgproc_DisparityFilter, 0, XImgProc.DisparityWLSFilter);
CV_ERL_TYPE(ximgproc_EdgeDrawing, ximgproc_EdgeDrawing, Ptr<cv::ximgproc::EdgeDrawing>, Ptr, Algorithm, 0, XImgProc.EdgeDrawing);
CV_ERL_TYPE(ximgproc_EdgeDrawing_Params, ximgproc_EdgeDrawing_Params, cv::ximgproc::EdgeDrawing::Params, Params, NoBase, ('ximgproc_ximgproc_EdgeDrawing_Params_EdgeDrawing_Params', 'evision_cv_ximgproc_ximgproc_EdgeDrawing_Params_EdgeDrawing_Params'), XImgProc.EdgeDrawing.Params);
CV_ERL_TYPE(ximgproc_DTFilter, ximgproc_DTFilter, Ptr<cv::ximgproc::DTFilter>, Ptr, Algorithm, 0, XImgProc.DTFilter);
CV_ERL_TYPE(ximgproc_GuidedFilter, ximgproc_GuidedFilter, Ptr<cv::ximgproc::GuidedFilter>, Ptr, Algorithm, 0, XImgProc.GuidedFilter);
CV_ERL_TYPE(ximgproc_AdaptiveManifoldFilter, ximgproc_AdaptiveManifoldFilter, Ptr<cv::ximgproc::AdaptiveManifoldFilter>, Ptr, Algorithm, 0, XImgProc.AdaptiveManifoldFilter);
CV_ERL_TYPE(ximgproc_FastBilateralSolverFilter, ximgproc_FastBilateralSolverFilter, Ptr<cv::ximgproc::FastBilateralSolverFilter>, Ptr, Algorithm, 0, XImgProc.FastBilateralSolverFilter);
CV_ERL_TYPE(ximgproc_FastGlobalSmootherFilter, ximgproc_FastGlobalSmootherFilter, Ptr<cv::ximgproc::FastGlobalSmootherFilter>, Ptr, Algorithm, 0, XImgProc.FastGlobalSmootherFilter);
CV_ERL_TYPE(ximgproc_EdgeBoxes, ximgproc_EdgeBoxes, Ptr<cv::ximgproc::EdgeBoxes>, Ptr, Algorithm, 0, XImgProc.EdgeBoxes);
CV_ERL_TYPE(ximgproc_FastLineDetector, ximgproc_FastLineDetector, Ptr<cv::ximgproc::FastLineDetector>, Ptr, Algorithm, 0, XImgProc.FastLineDetector);
CV_ERL_TYPE(ximgproc_ContourFitting, ximgproc_ContourFitting, Ptr<cv::ximgproc::ContourFitting>, Ptr, Algorithm, 0, XImgProc.ContourFitting);
CV_ERL_TYPE(ximgproc_SuperpixelLSC, ximgproc_SuperpixelLSC, Ptr<cv::ximgproc::SuperpixelLSC>, Ptr, Algorithm, 0, XImgProc.SuperpixelLSC);
CV_ERL_TYPE(ximgproc_RidgeDetectionFilter, ximgproc_RidgeDetectionFilter, Ptr<cv::ximgproc::RidgeDetectionFilter>, Ptr, Algorithm, 0, XImgProc.RidgeDetectionFilter);
CV_ERL_TYPE(ximgproc_ScanSegment, ximgproc_ScanSegment, Ptr<cv::ximgproc::ScanSegment>, Ptr, Algorithm, 0, XImgProc.ScanSegment);
CV_ERL_TYPE(ximgproc_SuperpixelSEEDS, ximgproc_SuperpixelSEEDS, Ptr<cv::ximgproc::SuperpixelSEEDS>, Ptr, Algorithm, 0, XImgProc.SuperpixelSEEDS);
CV_ERL_TYPE(ximgproc_segmentation_GraphSegmentation, ximgproc_segmentation_GraphSegmentation, Ptr<cv::ximgproc::segmentation::GraphSegmentation>, Ptr, Algorithm, 0, XImgProc.GraphSegmentation);
CV_ERL_TYPE(ximgproc_segmentation_SelectiveSearchSegmentationStrategy, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategy>, Ptr, Algorithm, 0, XImgProc.SelectiveSearchSegmentationStrategy);
CV_ERL_TYPE(ximgproc_segmentation_SelectiveSearchSegmentationStrategyColor, ximgproc_segmentation_SelectiveSearchSegmentationStrategyColor, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyColor>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, XImgProc.SelectiveSearchSegmentationStrategyColor);
CV_ERL_TYPE(ximgproc_segmentation_SelectiveSearchSegmentationStrategySize, ximgproc_segmentation_SelectiveSearchSegmentationStrategySize, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategySize>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, XImgProc.SelectiveSearchSegmentationStrategySize);
CV_ERL_TYPE(ximgproc_segmentation_SelectiveSearchSegmentationStrategyTexture, ximgproc_segmentation_SelectiveSearchSegmentationStrategyTexture, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyTexture>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, XImgProc.SelectiveSearchSegmentationStrategyTexture);
CV_ERL_TYPE(ximgproc_segmentation_SelectiveSearchSegmentationStrategyFill, ximgproc_segmentation_SelectiveSearchSegmentationStrategyFill, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyFill>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, XImgProc.SelectiveSearchSegmentationStrategyFill);
CV_ERL_TYPE(ximgproc_segmentation_SelectiveSearchSegmentationStrategyMultiple, ximgproc_segmentation_SelectiveSearchSegmentationStrategyMultiple, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentationStrategyMultiple>, Ptr, ximgproc_segmentation_SelectiveSearchSegmentationStrategy, 0, XImgProc.SelectiveSearchSegmentationStrategyMultiple);
CV_ERL_TYPE(ximgproc_segmentation_SelectiveSearchSegmentation, ximgproc_segmentation_SelectiveSearchSegmentation, Ptr<cv::ximgproc::segmentation::SelectiveSearchSegmentation>, Ptr, Algorithm, 0, XImgProc.SelectiveSearchSegmentation);
CV_ERL_TYPE(ximgproc_SuperpixelSLIC, ximgproc_SuperpixelSLIC, Ptr<cv::ximgproc::SuperpixelSLIC>, Ptr, Algorithm, 0, XImgProc.SuperpixelSLIC);
CV_ERL_TYPE(ximgproc_SparseMatchInterpolator, ximgproc_SparseMatchInterpolator, Ptr<cv::ximgproc::SparseMatchInterpolator>, Ptr, Algorithm, 0, XImgProc.SparseMatchInterpolator);
CV_ERL_TYPE(ximgproc_EdgeAwareInterpolator, ximgproc_EdgeAwareInterpolator, Ptr<cv::ximgproc::EdgeAwareInterpolator>, Ptr, ximgproc_SparseMatchInterpolator, 0, XImgProc.EdgeAwareInterpolator);
CV_ERL_TYPE(ximgproc_RICInterpolator, ximgproc_RICInterpolator, Ptr<cv::ximgproc::RICInterpolator>, Ptr, ximgproc_SparseMatchInterpolator, 0, XImgProc.RICInterpolator);
CV_ERL_TYPE(ximgproc_RFFeatureGetter, ximgproc_RFFeatureGetter, Ptr<cv::ximgproc::RFFeatureGetter>, Ptr, Algorithm, 0, XImgProc.RFFeatureGetter);
CV_ERL_TYPE(ximgproc_StructuredEdgeDetection, ximgproc_StructuredEdgeDetection, Ptr<cv::ximgproc::StructuredEdgeDetection>, Ptr, Algorithm, 0, XImgProc.StructuredEdgeDetection);
CV_ERL_TYPE(aruco_EstimateParameters, aruco_EstimateParameters, cv::aruco::EstimateParameters, EstimateParameters, NoBase, ('aruco_aruco_EstimateParameters_EstimateParameters', 'evision_cv_aruco_aruco_EstimateParameters_EstimateParameters'), ArUco.EstimateParameters);
CV_ERL_TYPE(bgsegm_BackgroundSubtractorMOG, bgsegm_BackgroundSubtractorMOG, Ptr<cv::bgsegm::BackgroundSubtractorMOG>, Ptr, BackgroundSubtractor, 0, BgSegm.BackgroundSubtractorMOG);
CV_ERL_TYPE(bgsegm_BackgroundSubtractorGMG, bgsegm_BackgroundSubtractorGMG, Ptr<cv::bgsegm::BackgroundSubtractorGMG>, Ptr, BackgroundSubtractor, 0, BgSegm.BackgroundSubtractorGMG);
CV_ERL_TYPE(bgsegm_BackgroundSubtractorCNT, bgsegm_BackgroundSubtractorCNT, Ptr<cv::bgsegm::BackgroundSubtractorCNT>, Ptr, BackgroundSubtractor, 0, BgSegm.BackgroundSubtractorCNT);
CV_ERL_TYPE(bgsegm_BackgroundSubtractorGSOC, bgsegm_BackgroundSubtractorGSOC, Ptr<cv::bgsegm::BackgroundSubtractorGSOC>, Ptr, BackgroundSubtractor, 0, BgSegm.BackgroundSubtractorGSOC);
CV_ERL_TYPE(bgsegm_BackgroundSubtractorLSBP, bgsegm_BackgroundSubtractorLSBP, Ptr<cv::bgsegm::BackgroundSubtractorLSBP>, Ptr, BackgroundSubtractor, 0, BgSegm.BackgroundSubtractorLSBP);
CV_ERL_TYPE(bgsegm_BackgroundSubtractorLSBPDesc, bgsegm_BackgroundSubtractorLSBPDesc, Ptr<cv::bgsegm::BackgroundSubtractorLSBPDesc>, Ptr, NoBase, 0, BgSegm.BackgroundSubtractorLSBPDesc);
CV_ERL_TYPE(bgsegm_SyntheticSequenceGenerator, bgsegm_SyntheticSequenceGenerator, Ptr<cv::bgsegm::SyntheticSequenceGenerator>, Ptr, Algorithm, ('bgsegm_bgsegm_SyntheticSequenceGenerator_SyntheticSequenceGenerator', 'evision_cv_bgsegm_bgsegm_SyntheticSequenceGenerator_SyntheticSequenceGenerator'), BgSegm.SyntheticSequenceGenerator);
CV_ERL_TYPE(bioinspired_Retina, bioinspired_Retina, Ptr<cv::bioinspired::Retina>, Ptr, Algorithm, 0, Bioinspired.Retina);
CV_ERL_TYPE(bioinspired_RetinaFastToneMapping, bioinspired_RetinaFastToneMapping, Ptr<cv::bioinspired::RetinaFastToneMapping>, Ptr, Algorithm, 0, Bioinspired.RetinaFastToneMapping);
CV_ERL_TYPE(bioinspired_TransientAreasSegmentationModule, bioinspired_TransientAreasSegmentationModule, Ptr<cv::bioinspired::TransientAreasSegmentationModule>, Ptr, Algorithm, 0, Bioinspired.TransientAreasSegmentationModule);
CV_ERL_TYPE(face_FaceRecognizer, face_FaceRecognizer, Ptr<cv::face::FaceRecognizer>, Ptr, Algorithm, 0, Face.FaceRecognizer);
CV_ERL_TYPE(face_BIF, face_BIF, Ptr<cv::face::BIF>, Ptr, Algorithm, 0, Face.BIF);
CV_ERL_TYPE(face_FacemarkKazemi, face_FacemarkKazemi, Ptr<cv::face::FacemarkKazemi>, Ptr, face_Facemark, 0, Face.FacemarkKazemi);
CV_ERL_TYPE(face_Facemark, face_Facemark, Ptr<cv::face::Facemark>, Ptr, Algorithm, 0, Face.Facemark);
CV_ERL_TYPE(face_FacemarkAAM, face_FacemarkAAM, Ptr<cv::face::FacemarkAAM>, Ptr, face_FacemarkTrain, 0, Face.FacemarkAAM);
CV_ERL_TYPE(face_FacemarkLBF, face_FacemarkLBF, Ptr<cv::face::FacemarkLBF>, Ptr, face_FacemarkTrain, 0, Face.FacemarkLBF);
CV_ERL_TYPE(face_FacemarkTrain, face_FacemarkTrain, Ptr<cv::face::FacemarkTrain>, Ptr, face_Facemark, 0, Face.FacemarkTrain);
CV_ERL_TYPE(face_BasicFaceRecognizer, face_BasicFaceRecognizer, Ptr<cv::face::BasicFaceRecognizer>, Ptr, face_FaceRecognizer, 0, Face.BasicFaceRecognizer);
CV_ERL_TYPE(face_EigenFaceRecognizer, face_EigenFaceRecognizer, Ptr<cv::face::EigenFaceRecognizer>, Ptr, face_BasicFaceRecognizer, 0, Face.EigenFaceRecognizer);
CV_ERL_TYPE(face_FisherFaceRecognizer, face_FisherFaceRecognizer, Ptr<cv::face::FisherFaceRecognizer>, Ptr, face_BasicFaceRecognizer, 0, Face.FisherFaceRecognizer);
CV_ERL_TYPE(face_LBPHFaceRecognizer, face_LBPHFaceRecognizer, Ptr<cv::face::LBPHFaceRecognizer>, Ptr, face_FaceRecognizer, 0, Face.LBPHFaceRecognizer);
CV_ERL_TYPE(face_MACE, face_MACE, Ptr<cv::face::MACE>, Ptr, Algorithm, 0, Face.MACE);
CV_ERL_TYPE(face_PredictCollector, face_PredictCollector, Ptr<cv::face::PredictCollector>, Ptr, NoBase, 0, Face.PredictCollector);
CV_ERL_TYPE(face_StandardCollector, face_StandardCollector, Ptr<cv::face::StandardCollector>, Ptr, face_PredictCollector, 0, Face.StandardCollector);
CV_ERL_TYPE(Stitcher, Stitcher, Ptr<cv::Stitcher>, Ptr, NoBase, 0, Stitcher);
CV_ERL_TYPE(detail_Blender, detail_Blender, Ptr<cv::detail::Blender>, Ptr, NoBase, 0, Detail.Blender);
CV_ERL_TYPE(detail_FeatherBlender, detail_FeatherBlender, Ptr<cv::detail::FeatherBlender>, Ptr, detail_Blender, ('detail_detail_FeatherBlender_FeatherBlender', 'evision_cv_detail_detail_FeatherBlender_FeatherBlender'), Detail.FeatherBlender);
CV_ERL_TYPE(detail_MultiBandBlender, detail_MultiBandBlender, Ptr<cv::detail::MultiBandBlender>, Ptr, detail_Blender, ('detail_detail_MultiBandBlender_MultiBandBlender', 'evision_cv_detail_detail_MultiBandBlender_MultiBandBlender'), Detail.MultiBandBlender);
CV_ERL_TYPE(detail_CameraParams, detail_CameraParams, cv::detail::CameraParams, CameraParams, NoBase, 0, Detail.CameraParams);
CV_ERL_TYPE(detail_ExposureCompensator, detail_ExposureCompensator, Ptr<cv::detail::ExposureCompensator>, Ptr, NoBase, 0, Detail.ExposureCompensator);
CV_ERL_TYPE(detail_NoExposureCompensator, detail_NoExposureCompensator, Ptr<cv::detail::NoExposureCompensator>, Ptr, detail_ExposureCompensator, 0, Detail.NoExposureCompensator);
CV_ERL_TYPE(detail_GainCompensator, detail_GainCompensator, Ptr<cv::detail::GainCompensator>, Ptr, detail_ExposureCompensator, ('detail_detail_GainCompensator_GainCompensator', 'evision_cv_detail_detail_GainCompensator_GainCompensator'), Detail.GainCompensator);
CV_ERL_TYPE(detail_ChannelsCompensator, detail_ChannelsCompensator, Ptr<cv::detail::ChannelsCompensator>, Ptr, detail_ExposureCompensator, ('detail_detail_ChannelsCompensator_ChannelsCompensator', 'evision_cv_detail_detail_ChannelsCompensator_ChannelsCompensator'), Detail.ChannelsCompensator);
CV_ERL_TYPE(detail_BlocksCompensator, detail_BlocksCompensator, Ptr<cv::detail::BlocksCompensator>, Ptr, detail_ExposureCompensator, 0, Detail.BlocksCompensator);
CV_ERL_TYPE(detail_BlocksGainCompensator, detail_BlocksGainCompensator, Ptr<cv::detail::BlocksGainCompensator>, Ptr, detail_BlocksCompensator, ('detail_detail_BlocksGainCompensator_BlocksGainCompensator', 'evision_cv_detail_detail_BlocksGainCompensator_BlocksGainCompensator'), Detail.BlocksGainCompensator);
CV_ERL_TYPE(detail_BlocksChannelsCompensator, detail_BlocksChannelsCompensator, Ptr<cv::detail::BlocksChannelsCompensator>, Ptr, detail_BlocksCompensator, ('detail_detail_BlocksChannelsCompensator_BlocksChannelsCompensator', 'evision_cv_detail_detail_BlocksChannelsCompensator_BlocksChannelsCompensator'), Detail.BlocksChannelsCompensator);
CV_ERL_TYPE(detail_ImageFeatures, detail_ImageFeatures, cv::detail::ImageFeatures, ImageFeatures, NoBase, 0, Detail.ImageFeatures);
CV_ERL_TYPE(detail_MatchesInfo, detail_MatchesInfo, cv::detail::MatchesInfo, MatchesInfo, NoBase, 0, Detail.MatchesInfo);
CV_ERL_TYPE(detail_FeaturesMatcher, detail_FeaturesMatcher, Ptr<cv::detail::FeaturesMatcher>, Ptr, NoBase, 0, Detail.FeaturesMatcher);
CV_ERL_TYPE(detail_BestOf2NearestMatcher, detail_BestOf2NearestMatcher, Ptr<cv::detail::BestOf2NearestMatcher>, Ptr, detail_FeaturesMatcher, ('detail_detail_BestOf2NearestMatcher_BestOf2NearestMatcher', 'evision_cv_detail_detail_BestOf2NearestMatcher_BestOf2NearestMatcher'), Detail.BestOf2NearestMatcher);
CV_ERL_TYPE(detail_BestOf2NearestRangeMatcher, detail_BestOf2NearestRangeMatcher, Ptr<cv::detail::BestOf2NearestRangeMatcher>, Ptr, detail_BestOf2NearestMatcher, ('detail_detail_BestOf2NearestRangeMatcher_BestOf2NearestRangeMatcher', 'evision_cv_detail_detail_BestOf2NearestRangeMatcher_BestOf2NearestRangeMatcher'), Detail.BestOf2NearestRangeMatcher);
CV_ERL_TYPE(detail_AffineBestOf2NearestMatcher, detail_AffineBestOf2NearestMatcher, Ptr<cv::detail::AffineBestOf2NearestMatcher>, Ptr, detail_BestOf2NearestMatcher, ('detail_detail_AffineBestOf2NearestMatcher_AffineBestOf2NearestMatcher', 'evision_cv_detail_detail_AffineBestOf2NearestMatcher_AffineBestOf2NearestMatcher'), Detail.AffineBestOf2NearestMatcher);
CV_ERL_TYPE(detail_Estimator, detail_Estimator, Ptr<cv::detail::Estimator>, Ptr, NoBase, 0, Detail.Estimator);
CV_ERL_TYPE(detail_HomographyBasedEstimator, detail_HomographyBasedEstimator, Ptr<cv::detail::HomographyBasedEstimator>, Ptr, detail_Estimator, ('detail_detail_HomographyBasedEstimator_HomographyBasedEstimator', 'evision_cv_detail_detail_HomographyBasedEstimator_HomographyBasedEstimator'), Detail.HomographyBasedEstimator);
CV_ERL_TYPE(detail_AffineBasedEstimator, detail_AffineBasedEstimator, Ptr<cv::detail::AffineBasedEstimator>, Ptr, detail_Estimator, ('detail_detail_AffineBasedEstimator_AffineBasedEstimator', 'evision_cv_detail_detail_AffineBasedEstimator_AffineBasedEstimator'), Detail.AffineBasedEstimator);
CV_ERL_TYPE(detail_BundleAdjusterBase, detail_BundleAdjusterBase, Ptr<cv::detail::BundleAdjusterBase>, Ptr, detail_Estimator, 0, Detail.BundleAdjusterBase);
CV_ERL_TYPE(detail_NoBundleAdjuster, detail_NoBundleAdjuster, Ptr<cv::detail::NoBundleAdjuster>, Ptr, detail_BundleAdjusterBase, ('detail_detail_NoBundleAdjuster_NoBundleAdjuster', 'evision_cv_detail_detail_NoBundleAdjuster_NoBundleAdjuster'), Detail.NoBundleAdjuster);
CV_ERL_TYPE(detail_BundleAdjusterReproj, detail_BundleAdjusterReproj, Ptr<cv::detail::BundleAdjusterReproj>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterReproj_BundleAdjusterReproj', 'evision_cv_detail_detail_BundleAdjusterReproj_BundleAdjusterReproj'), Detail.BundleAdjusterReproj);
CV_ERL_TYPE(detail_BundleAdjusterRay, detail_BundleAdjusterRay, Ptr<cv::detail::BundleAdjusterRay>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterRay_BundleAdjusterRay', 'evision_cv_detail_detail_BundleAdjusterRay_BundleAdjusterRay'), Detail.BundleAdjusterRay);
CV_ERL_TYPE(detail_BundleAdjusterAffine, detail_BundleAdjusterAffine, Ptr<cv::detail::BundleAdjusterAffine>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterAffine_BundleAdjusterAffine', 'evision_cv_detail_detail_BundleAdjusterAffine_BundleAdjusterAffine'), Detail.BundleAdjusterAffine);
CV_ERL_TYPE(detail_BundleAdjusterAffinePartial, detail_BundleAdjusterAffinePartial, Ptr<cv::detail::BundleAdjusterAffinePartial>, Ptr, detail_BundleAdjusterBase, ('detail_detail_BundleAdjusterAffinePartial_BundleAdjusterAffinePartial', 'evision_cv_detail_detail_BundleAdjusterAffinePartial_BundleAdjusterAffinePartial'), Detail.BundleAdjusterAffinePartial);
CV_ERL_TYPE(detail_SeamFinder, detail_SeamFinder, Ptr<cv::detail::SeamFinder>, Ptr, NoBase, 0, Detail.SeamFinder);
CV_ERL_TYPE(detail_NoSeamFinder, detail_NoSeamFinder, Ptr<cv::detail::NoSeamFinder>, Ptr, detail_SeamFinder, 0, Detail.NoSeamFinder);
CV_ERL_TYPE(detail_PairwiseSeamFinder, detail_PairwiseSeamFinder, Ptr<cv::detail::PairwiseSeamFinder>, Ptr, detail_SeamFinder, 0, Detail.PairwiseSeamFinder);
CV_ERL_TYPE(detail_VoronoiSeamFinder, detail_VoronoiSeamFinder, Ptr<cv::detail::VoronoiSeamFinder>, Ptr, detail_PairwiseSeamFinder, 0, Detail.VoronoiSeamFinder);
CV_ERL_TYPE(detail_DpSeamFinder, detail_DpSeamFinder, Ptr<cv::detail::DpSeamFinder>, Ptr, detail_SeamFinder, ('detail_detail_DpSeamFinder_DpSeamFinder', 'evision_cv_detail_detail_DpSeamFinder_DpSeamFinder'), Detail.DpSeamFinder);
CV_ERL_TYPE(detail_GraphCutSeamFinder, detail_GraphCutSeamFinder, Ptr<cv::detail::GraphCutSeamFinder>, Ptr, NoBase, ('detail_detail_GraphCutSeamFinder_GraphCutSeamFinder', 'evision_cv_detail_detail_GraphCutSeamFinder_GraphCutSeamFinder'), Detail.GraphCutSeamFinder);
CV_ERL_TYPE(detail_Timelapser, detail_Timelapser, Ptr<cv::detail::Timelapser>, Ptr, NoBase, 0, Detail.Timelapser);
CV_ERL_TYPE(detail_TimelapserCrop, detail_TimelapserCrop, Ptr<cv::detail::TimelapserCrop>, Ptr, detail_Timelapser, 0, Detail.TimelapserCrop);
CV_ERL_TYPE(detail_ProjectorBase, detail_ProjectorBase, cv::detail::ProjectorBase, ProjectorBase, NoBase, 0, Detail.ProjectorBase);
CV_ERL_TYPE(detail_SphericalProjector, detail_SphericalProjector, cv::detail::SphericalProjector, SphericalProjector, detail_ProjectorBase, 0, Detail.SphericalProjector);
CV_ERL_TYPE(PyRotationWarper, PyRotationWarper, Ptr<cv::PyRotationWarper>, Ptr, NoBase, ('pyRotationWarper_PyRotationWarper', 'evision_cv_pyRotationWarper_PyRotationWarper'), PyRotationWarper);
CV_ERL_TYPE(WarperCreator, WarperCreator, Ptr<cv::WarperCreator>, Ptr, NoBase, 0, WarperCreator);
CV_ERL_TYPE(TrackerCSRT, TrackerCSRT, Ptr<cv::TrackerCSRT>, Ptr, Tracker, 0, TrackerCSRT);
CV_ERL_TYPE(TrackerCSRT_Params, TrackerCSRT_Params, cv::TrackerCSRT::Params, Params, NoBase, ('trackerCSRT_Params_TrackerCSRT_Params', 'evision_cv_trackerCSRT_Params_TrackerCSRT_Params'), TrackerCSRT.Params);
CV_ERL_TYPE(TrackerKCF, TrackerKCF, Ptr<cv::TrackerKCF>, Ptr, Tracker, 0, TrackerKCF);
CV_ERL_TYPE(TrackerKCF_Params, TrackerKCF_Params, cv::TrackerKCF::Params, Params, NoBase, ('trackerKCF_Params_TrackerKCF_Params', 'evision_cv_trackerKCF_Params_TrackerKCF_Params'), TrackerKCF.Params);
CV_ERL_TYPE(legacy_Tracker, legacy_Tracker, Ptr<cv::legacy::Tracker>, Ptr, Algorithm, 0, Legacy.Tracker);
CV_ERL_TYPE(legacy_TrackerMIL, legacy_TrackerMIL, Ptr<cv::legacy::TrackerMIL>, Ptr, legacy_Tracker, 0, Legacy.TrackerMIL);
CV_ERL_TYPE(legacy_TrackerBoosting, legacy_TrackerBoosting, Ptr<cv::legacy::TrackerBoosting>, Ptr, legacy_Tracker, 0, Legacy.TrackerBoosting);
CV_ERL_TYPE(legacy_TrackerMedianFlow, legacy_TrackerMedianFlow, Ptr<cv::legacy::TrackerMedianFlow>, Ptr, legacy_Tracker, 0, Legacy.TrackerMedianFlow);
CV_ERL_TYPE(legacy_TrackerTLD, legacy_TrackerTLD, Ptr<cv::legacy::TrackerTLD>, Ptr, legacy_Tracker, 0, Legacy.TrackerTLD);
CV_ERL_TYPE(legacy_TrackerKCF, legacy_TrackerKCF, Ptr<cv::legacy::TrackerKCF>, Ptr, legacy_Tracker, 0, Legacy.TrackerKCF);
CV_ERL_TYPE(legacy_TrackerMOSSE, legacy_TrackerMOSSE, Ptr<cv::legacy::TrackerMOSSE>, Ptr, legacy_Tracker, 0, Legacy.TrackerMOSSE);
CV_ERL_TYPE(legacy_MultiTracker, legacy_MultiTracker, Ptr<cv::legacy::MultiTracker>, Ptr, Algorithm, ('legacy_legacy_MultiTracker_MultiTracker', 'evision_cv_legacy_legacy_MultiTracker_MultiTracker'), Legacy.MultiTracker);
CV_ERL_TYPE(legacy_TrackerCSRT, legacy_TrackerCSRT, Ptr<cv::legacy::TrackerCSRT>, Ptr, legacy_Tracker, 0, Legacy.TrackerCSRT);
CV_ERL_TYPE(stereo_MatchQuasiDense, stereo_MatchQuasiDense, cv::stereo::MatchQuasiDense, MatchQuasiDense, NoBase, ('stereo_stereo_MatchQuasiDense_MatchQuasiDense', 'evision_cv_stereo_stereo_MatchQuasiDense_MatchQuasiDense'), Stereo.MatchQuasiDense);
CV_ERL_TYPE(stereo_PropagationParameters, stereo_PropagationParameters, cv::stereo::PropagationParameters, PropagationParameters, NoBase, 0, Stereo.PropagationParameters);
CV_ERL_TYPE(stereo_QuasiDenseStereo, stereo_QuasiDenseStereo, Ptr<cv::stereo::QuasiDenseStereo>, Ptr, NoBase, 0, Stereo.QuasiDenseStereo);
