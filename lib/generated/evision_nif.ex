defmodule :evision_nif do

  @moduledoc false
  @on_load :load_nif
  def load_nif do
    require Logger
    nif_file = ~c"#{:code.priv_dir(:evision)}/evision"
    case :evision_windows_fix.run_once() do
      :ok -> :ok
      {:error, reason} -> Logger.warning("Failed to run windows fix: #{inspect(reason)}")
    end

    case :erlang.load_nif(nif_file, 0) do
      :ok -> :ok
      {:error, {:reload, _}} -> :ok
      {:error, reason} ->
        Logger.warning("Failed to load nif: #{inspect(reason)}")
        case :os.type() do
          {:win32, _} ->
            case :erlang.load_nif("#{nif_file}.dll", 0) do
              :ok -> :ok
              {:error, {:reload, _}} -> :ok
              {:error, reason} -> Logger.warning("Failed to load nif: #{inspect(reason)}")
            end
          _ ->
            {:error, reason}
        end
    end
  end

  def enabled_modules, do: :erlang.nif_error(:undefined)
  def imshow(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def waitKey(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def destroyWindow(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def destroyAllWindows(), do: :erlang.nif_error(:undefinedined)
  def imdecode(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def cuda_cuda_GpuMat_to_pointer(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_empty(), do: :erlang.nif_error(:undefinedined)
  def mat_to_pointer(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_type(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_as_type(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_shape(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_roi(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_update_roi(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_clone(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_zeros(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_ones(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_arange(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_full(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_at(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_set_to(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_dot(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_channels(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_depth(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_isSubmatrix(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_isContinuous(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_total(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_elemSize(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_elemSize1(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_raw_type(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_dims(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_size(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_as_shape(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_last_dim_as_channel(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def videoCapture_waitAny(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_bitwise_xor(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_bitwise_and(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_abs(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_logical_xor(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_broadcast_to(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_expm1(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_matrix_multiply(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_cmp(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_negate(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_floor(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_to_batched(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_subtract(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_subtract_typed(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_add(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_add_typed(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_from_binary(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_from_binary_by_shape(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_clip(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_sign(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_to_binary(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_reshape(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_bitwise_not(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_divide(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_divide_typed(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_logical_or(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_eye(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_ceil(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_transpose(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_logical_and(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_multiply(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_multiply_typed(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_round(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def mat_bitwise_or(_opts \\ []), do: :erlang.nif_error(:undefinedined)
  def akaze_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getDescriptorChannels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getDescriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getDiffusivity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getMaxPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setDescriptorChannels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setDescriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setDiffusivity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setMaxPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_getViewParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_setViewParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineTransformer_getFullAffine(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def affineTransformer_setFullAffine(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_getNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_getType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_setNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_setType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def algorithm_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def algorithm_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def algorithm_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def algorithm_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def algorithm_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def algorithm_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignExposures_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignExposures_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignExposures_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignExposures_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignExposures_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignExposures_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignExposures_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_calculateShift(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_computeBitmaps(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_getCut(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_getExcludeRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_getMaxBits(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_setCut(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_setExcludeRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_setMaxBits(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def alignMTB_shiftMat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def asyncArray_AsyncArray(_opts \\ []), do: :erlang.nif_error(:undefined)
  def asyncArray_get(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def asyncArray_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def asyncArray_valid(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def asyncArray_wait_for(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_BFMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_add(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_clone(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_getTrainDescriptors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_isMaskSupported(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_radiusMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowImgDescriptorExtractor_BOWImgDescriptorExtractor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bowImgDescriptorExtractor_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowImgDescriptorExtractor_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowImgDescriptorExtractor_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowImgDescriptorExtractor_getVocabulary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowImgDescriptorExtractor_setVocabulary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowKMeansTrainer_BOWKMeansTrainer(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bowKMeansTrainer_cluster(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowTrainer_add(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowTrainer_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowTrainer_cluster(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowTrainer_descriptorsCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bowTrainer_getDescriptors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_getOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_getPatternScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_setOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_setPatternScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_getBackgroundImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractor_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_getDetectShadows(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_getDist2Threshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_getHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_getNSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_getShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_getShadowValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_getkNNSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_setDetectShadows(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_setDist2Threshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_setHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_setNSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_setShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_setShadowValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorKNN_setkNNSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getComplexityReductionThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getDetectShadows(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getNMixtures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getShadowValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getVarInit(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getVarMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getVarMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getVarThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_getVarThresholdGen(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setComplexityReductionThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setDetectShadows(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setNMixtures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setShadowThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setShadowValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setVarInit(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setVarMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setVarMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setVarThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def backgroundSubtractorMOG2_setVarThresholdGen(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def baseCascadeClassifier_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def baseCascadeClassifier_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def baseCascadeClassifier_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def baseCascadeClassifier_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def baseCascadeClassifier_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def baseCascadeClassifier_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_getClipLimit(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_getTilesGridSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_setClipLimit(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_setTilesGridSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def clahe_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCRF_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCRF_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCRF_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCRF_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCRF_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCRF_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCRF_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_getLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_getRandom(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_getSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_setLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_setRandom(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_setSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateDebevec_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_getMaxIter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_getRadiance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_setMaxIter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobertson_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_CascadeClassifier(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_convert_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_detectMultiScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_detectMultiScale2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_detectMultiScale3(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_getFeatureType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_getOriginalWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_isOldFormatCascade(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_load(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_CirclesGridFinderParameters(_opts \\ []), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_convexHullFactor(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_convexHullFactor(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_densityNeighborhoodSize(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_densityNeighborhoodSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_edgeGain(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_edgeGain(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_edgePenalty(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_edgePenalty(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_existingVertexGain(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_existingVertexGain(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_keypointScale(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_keypointScale(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_kmeansAttempts(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_kmeansAttempts(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_maxRectifiedDistance(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_maxRectifiedDistance(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_minDensity(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_minDensity(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_minDistanceToAddKeypoint(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_minDistanceToAddKeypoint(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_minGraphConfidence(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_minGraphConfidence(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_minRNGEdgeSwitchDist(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_minRNGEdgeSwitchDist(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_squareSize(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_squareSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_vertexGain(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_vertexGain(_self, _prop), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_get_vertexPenalty(_self), do: :erlang.nif_error(:undefined)
  def circlesGridFinderParameters_set_vertexPenalty(_self, _prop), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getFinestScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getGradientDescentIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getPatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getPatchStride(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getUseMeanNormalization(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getUseSpatialPropagation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getVariationalRefinementAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getVariationalRefinementDelta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getVariationalRefinementEpsilon(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getVariationalRefinementGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_getVariationalRefinementIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setFinestScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setGradientDescentIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setPatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setPatchStride(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setUseMeanNormalization(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setUseSpatialPropagation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setVariationalRefinementAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setVariationalRefinementDelta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setVariationalRefinementEpsilon(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setVariationalRefinementGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_setVariationalRefinementIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dMatch_DMatch(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dMatch_get_distance(_self), do: :erlang.nif_error(:undefined)
  def dMatch_set_distance(_self, _prop), do: :erlang.nif_error(:undefined)
  def dMatch_get_imgIdx(_self), do: :erlang.nif_error(:undefined)
  def dMatch_set_imgIdx(_self, _prop), do: :erlang.nif_error(:undefined)
  def dMatch_get_queryIdx(_self), do: :erlang.nif_error(:undefined)
  def dMatch_set_queryIdx(_self, _prop), do: :erlang.nif_error(:undefined)
  def dMatch_get_trainIdx(_self), do: :erlang.nif_error(:undefined)
  def dMatch_set_trainIdx(_self, _prop), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_calc(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def denseOpticalFlow_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_add(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_clone(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_getTrainDescriptors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_isMaskSupported(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_radiusMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def emdHistogramCostExtractor_getNormFlag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def emdHistogramCostExtractor_setNormFlag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_getInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_getNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_getScoreThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_getTopK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_setNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_setScoreThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_setTopK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceRecognizerSF_alignCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceRecognizerSF_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def faceRecognizerSF_feature(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def faceRecognizerSF_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getFastPyramids(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getFlags(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getNumIters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getNumLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getPolyN(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getPolySigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getPyrScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_getWinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setFastPyramids(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setFlags(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setNumIters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setNumLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setPolyN(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setPolySigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setPyrScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_setWinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_getNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_getType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_setNonmaxSuppression(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_setType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def feature2D_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_FileNode(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_at(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_getNode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_isInt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_isMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_isNamed(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_isNone(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_isReal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_isSeq(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_isString(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_keys(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_mat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_name(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_rawSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_real(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_size(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_string(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileNode_type(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_FileStorage(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_endWriteStruct(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_getFirstTopLevelNode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_getFormat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_getNode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_isOpened(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_open(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_releaseAndGetString(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_root(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_startWriteStruct(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def fileStorage_writeComment(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_FlannBasedMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_add(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_clone(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_getTrainDescriptors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_isMaskSupported(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_radiusMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getGradientSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getHarrisDetector(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getMinDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_getQualityLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_setGradientSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_setHarrisDetector(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_setK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_setMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_setMinDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_setQualityLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_getCannyHighThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_getCannyLowThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_getDp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_getMaxBufferSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_getMinDist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_setCannyHighThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_setCannyLowThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_setDp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_setMaxBufferSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_setMinDist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_setTemplate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHough_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughBallard_getLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughBallard_getVotesThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughBallard_setLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughBallard_setVotesThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getAngleEpsilon(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getAngleStep(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getAngleThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getMaxAngle(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getMaxScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getMinAngle(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getMinScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getPosThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getScaleStep(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getScaleThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_getXi(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setAngleEpsilon(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setAngleStep(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setAngleThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setMaxAngle(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setMaxScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setMinAngle(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setMinScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setPosThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setScaleStep(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setScaleThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def generalizedHoughGuil_setXi(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def graphicalCodeDetector_decode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def graphicalCodeDetector_decodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def graphicalCodeDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def graphicalCodeDetector_detectAndDecode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def graphicalCodeDetector_detectAndDecodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def graphicalCodeDetector_detectMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_HOGDescriptor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_checkDetectorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_computeGradient(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_detectMultiScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_getDaimlerPeopleDetector_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_getDefaultPeopleDetector_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_getDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_getWinSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_load(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_setSVMDetector(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_L2HysThreshold(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_blockSize(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_blockStride(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_cellSize(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_derivAperture(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_gammaCorrection(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_histogramNormType(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_nbins(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_nlevels(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_signedGradient(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_svmDetector(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_winSigma(_self), do: :erlang.nif_error(:undefined)
  def hogDescriptor_get_winSize(_self), do: :erlang.nif_error(:undefined)
  def hausdorffDistanceExtractor_getDistanceFlag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hausdorffDistanceExtractor_getRankProportion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hausdorffDistanceExtractor_setDistanceFlag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hausdorffDistanceExtractor_setRankProportion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_buildCostMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_getDefaultCost(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_getNDummies(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_setDefaultCost(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_setNDummies(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def histogramCostExtractor_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_getDiffusivity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_getExtended(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_getNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_getNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_getUpright(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_setDiffusivity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_setExtended(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_setNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_setNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_setUpright(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kalmanFilter_KalmanFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kalmanFilter_correct(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kalmanFilter_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_controlMatrix(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_controlMatrix(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_errorCovPost(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_errorCovPost(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_errorCovPre(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_errorCovPre(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_gain(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_gain(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_measurementMatrix(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_measurementMatrix(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_measurementNoiseCov(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_measurementNoiseCov(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_processNoiseCov(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_processNoiseCov(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_statePost(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_statePost(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_statePre(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_statePre(_self, _prop), do: :erlang.nif_error(:undefined)
  def kalmanFilter_get_transitionMatrix(_self), do: :erlang.nif_error(:undefined)
  def kalmanFilter_set_transitionMatrix(_self, _prop), do: :erlang.nif_error(:undefined)
  def keyPoint_KeyPoint(_opts \\ []), do: :erlang.nif_error(:undefined)
  def keyPoint_convert_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def keyPoint_overlap_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def keyPoint_get_angle(_self), do: :erlang.nif_error(:undefined)
  def keyPoint_set_angle(_self, _prop), do: :erlang.nif_error(:undefined)
  def keyPoint_get_class_id(_self), do: :erlang.nif_error(:undefined)
  def keyPoint_set_class_id(_self, _prop), do: :erlang.nif_error(:undefined)
  def keyPoint_get_octave(_self), do: :erlang.nif_error(:undefined)
  def keyPoint_set_octave(_self, _prop), do: :erlang.nif_error(:undefined)
  def keyPoint_get_pt(_self), do: :erlang.nif_error(:undefined)
  def keyPoint_set_pt(_self, _prop), do: :erlang.nif_error(:undefined)
  def keyPoint_get_response(_self), do: :erlang.nif_error(:undefined)
  def keyPoint_set_response(_self, _prop), do: :erlang.nif_error(:undefined)
  def keyPoint_get_size(_self), do: :erlang.nif_error(:undefined)
  def keyPoint_set_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_compareSegments(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_drawSegments(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def lineSegmentDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_detectRegions(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getAreaThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getDelta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getEdgeBlurSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getMaxArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getMaxEvolution(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getMaxVariation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getMinArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getMinDiversity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getMinMargin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_getPass2Only(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setAreaThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setDelta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setEdgeBlurSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setMaxArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setMaxEvolution(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setMaxVariation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setMinArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setMinDiversity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setMinMargin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_setPass2Only(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeDebevec_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeExposures_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeExposures_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeExposures_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeExposures_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeExposures_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeExposures_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeExposures_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeMertens_getContrastWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeMertens_getExposureWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeMertens_getSaturationWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeMertens_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeMertens_setContrastWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeMertens_setExposureWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeMertens_setSaturationWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mergeRobertson_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def normHistogramCostExtractor_getNormFlag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def normHistogramCostExtractor_setNormFlag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getFastThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getFirstLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getNLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getPatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getScoreType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_getWTA_K(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setFastThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setFirstLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setNLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setPatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setScoreType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_setWTA_K(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_PyRotationWarper(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_buildMaps(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_getScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_setScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_warp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_warpBackward(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_warpPoint(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_warpPointBackward(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def pyRotationWarper_warpRoi(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_QRCodeDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_decode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_decodeCurved(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_decodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_detectAndDecode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_detectAndDecodeCurved(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_detectAndDecodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_detectMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_setEpsX(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_setEpsY(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetector_setUseAlignmentMarkers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_QRCodeDetectorAruco(_opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_decode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_decodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_detectAndDecode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_detectAndDecodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_detectMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_getArucoParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_getDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_setArucoParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_setDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_QRCodeDetectorAruco_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_get_maxColorsMismatch(_self), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_set_maxColorsMismatch(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_get_maxModuleSizeMismatch(_self), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_set_maxModuleSizeMismatch(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_get_maxPenalties(_self), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_set_maxPenalties(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_get_maxRotation(_self), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_set_maxRotation(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_get_maxTimingPatternMismatch(_self), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_set_maxTimingPatternMismatch(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_get_minModuleSizeInPyramid(_self), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_set_minModuleSizeInPyramid(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_get_scaleTimingPatternScore(_self), do: :erlang.nif_error(:undefined)
  def qrCodeDetectorAruco_Params_set_scaleTimingPatternScore(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_encode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_encodeStructuredAppend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_QRCodeEncoder_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_get_correction_level(_self), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_set_correction_level(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_get_mode(_self), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_set_mode(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_get_structure_number(_self), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_set_structure_number(_self, _prop), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_get_version(_self), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_Params_set_version(_self, _prop), do: :erlang.nif_error(:undefined)
  def rotatedRect_RotatedRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rotatedRect_boundingRect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rotatedRect_boundingRect2f(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rotatedRect_points(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rotatedRect_get_angle(_self), do: :erlang.nif_error(:undefined)
  def rotatedRect_set_angle(_self, _prop), do: :erlang.nif_error(:undefined)
  def rotatedRect_get_center(_self), do: :erlang.nif_error(:undefined)
  def rotatedRect_set_center(_self, _prop), do: :erlang.nif_error(:undefined)
  def rotatedRect_get_size(_self), do: :erlang.nif_error(:undefined)
  def rotatedRect_set_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def sift_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_getContrastThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_getEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_getNFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_getNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_getSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_setContrastThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_setEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_setNFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_setNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_setSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getAngularBins(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getBendingEnergyWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getCostExtractor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getImageAppearanceWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getImages(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getInnerRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getOuterRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getRadialBins(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getRotationInvariant(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getShapeContextWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getStdDev(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_getTransformAlgorithm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setAngularBins(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setBendingEnergyWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setCostExtractor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setImageAppearanceWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setImages(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setInnerRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setOuterRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setRadialBins(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setRotationInvariant(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setShapeContextWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setStdDev(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeContextDistanceExtractor_setTransformAlgorithm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeDistanceExtractor_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeDistanceExtractor_computeDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeDistanceExtractor_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeDistanceExtractor_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeDistanceExtractor_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeDistanceExtractor_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeDistanceExtractor_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_applyTransformation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_estimateTransformation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_warpImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def shapeTransformer_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_getBlobContours(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_getParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_setParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_SimpleBlobDetector_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_blobColor(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_blobColor(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_collectContours(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_collectContours(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_filterByArea(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_filterByArea(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_filterByCircularity(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_filterByCircularity(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_filterByColor(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_filterByColor(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_filterByConvexity(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_filterByConvexity(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_filterByInertia(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_filterByInertia(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_maxArea(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_maxArea(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_maxCircularity(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_maxCircularity(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_maxConvexity(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_maxConvexity(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_maxInertiaRatio(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_maxInertiaRatio(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_maxThreshold(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_maxThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_minArea(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_minArea(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_minCircularity(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_minCircularity(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_minConvexity(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_minConvexity(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_minDistBetweenBlobs(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_minDistBetweenBlobs(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_minInertiaRatio(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_minInertiaRatio(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_minRepeatability(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_minRepeatability(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_minThreshold(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_minThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_get_thresholdStep(_self), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_Params_set_thresholdStep(_self, _prop), do: :erlang.nif_error(:undefined)
  def sparseOpticalFlow_calc(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparseOpticalFlow_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparseOpticalFlow_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparseOpticalFlow_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparseOpticalFlow_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparseOpticalFlow_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparseOpticalFlow_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_getFlags(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_getMaxLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_getMinEigThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_getWinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_setFlags(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_setMaxLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_setMinEigThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_setWinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getPreFilterSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getPreFilterType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getROI1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getROI2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getSmallerBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getTextureThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_getUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setPreFilterSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setPreFilterType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setROI1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setROI2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setSmallerBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setTextureThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_setUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_getDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_getMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_getSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_getSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_setDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_setMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_setSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_setSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoMatcher_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getP1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getP2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_getUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setP1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setP2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setPreFilterCap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_setUniquenessRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_composePanorama(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_compositingResol(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_estimateTransform(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_interpolationFlags(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_panoConfidenceThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_registrationResol(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_seamEstimationResol(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_setCompositingResol(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_setInterpolationFlags(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_setPanoConfidenceThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_setRegistrationResol(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_setSeamEstimationResol(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_setWaveCorrection(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_stitch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_waveCorrection(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_workScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_Subdiv2D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_edgeDst(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_edgeOrg(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_findNearest(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_getEdge(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_getEdgeList(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_getLeadingEdgeList(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_getTriangleList(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_getVertex(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_getVoronoiFacetList(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_initDelaunay(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_insert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_locate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_nextEdge(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_rotateEdge(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def subdiv2D_symEdge(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def thinPlateSplineShapeTransformer_getRegularizationParameter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def thinPlateSplineShapeTransformer_setRegularizationParameter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_TickMeter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getAvgTimeMilli(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getAvgTimeSec(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getCounter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getFPS(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getTimeMicro(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getTimeMilli(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getTimeSec(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_getTimeTicks(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_reset(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_start(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tickMeter_stop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_getGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_setGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemap_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapDrago_getBias(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapDrago_getSaturation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapDrago_setBias(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapDrago_setSaturation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapMantiuk_getSaturation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapMantiuk_getScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapMantiuk_setSaturation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapMantiuk_setScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapReinhard_getColorAdaptation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapReinhard_getIntensity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapReinhard_getLightAdaptation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapReinhard_setColorAdaptation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapReinhard_setIntensity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tonemapReinhard_setLightAdaptation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tracker_init(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def tracker_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerCSRT_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerCSRT_setInitialMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_TrackerCSRT_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_admm_iterations(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_admm_iterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_background_ratio(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_background_ratio(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_cheb_attenuation(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_cheb_attenuation(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_filter_lr(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_filter_lr(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_gsl_sigma(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_gsl_sigma(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_histogram_bins(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_histogram_bins(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_histogram_lr(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_histogram_lr(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_hog_clip(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_hog_clip(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_hog_orientations(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_hog_orientations(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_kaiser_alpha(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_kaiser_alpha(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_num_hog_channels_used(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_num_hog_channels_used(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_number_of_scales(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_number_of_scales(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_padding(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_padding(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_psr_threshold(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_psr_threshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_scale_lr(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_scale_lr(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_scale_model_max_area(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_scale_model_max_area(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_scale_sigma_factor(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_scale_sigma_factor(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_scale_step(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_scale_step(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_template_size(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_template_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_use_channel_weights(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_use_channel_weights(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_use_color_names(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_use_color_names(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_use_gray(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_use_gray(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_use_hog(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_use_hog(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_use_rgb(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_use_rgb(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_use_segmentation(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_use_segmentation(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_weights_lr(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_weights_lr(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_get_window_function(_self), do: :erlang.nif_error(:undefined)
  def trackerCSRT_Params_set_window_function(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_getTrackingScore(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_TrackerDaSiamRPN_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_get_backend(_self), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_set_backend(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_get_kernel_cls1(_self), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_set_kernel_cls1(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_get_kernel_r1(_self), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_set_kernel_r1(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_get_model(_self), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_set_model(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_get_target(_self), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_Params_set_target(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerGOTURN_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerGOTURN_Params_TrackerGOTURN_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerGOTURN_Params_get_modelBin(_self), do: :erlang.nif_error(:undefined)
  def trackerGOTURN_Params_set_modelBin(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerGOTURN_Params_get_modelTxt(_self), do: :erlang.nif_error(:undefined)
  def trackerGOTURN_Params_set_modelTxt(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_TrackerKCF_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_compress_feature(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_compress_feature(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_compressed_size(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_compressed_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_desc_npca(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_desc_npca(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_desc_pca(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_desc_pca(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_detect_thresh(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_detect_thresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_interp_factor(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_interp_factor(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_lambda(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_lambda(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_max_patch_size(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_max_patch_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_output_sigma_factor(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_output_sigma_factor(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_pca_learning_rate(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_pca_learning_rate(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_resize(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_resize(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_sigma(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_sigma(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_split_coeff(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_split_coeff(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_get_wrap_kernel(_self), do: :erlang.nif_error(:undefined)
  def trackerKCF_Params_set_wrap_kernel(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerMIL_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_TrackerMIL_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_get_featureSetNumFeatures(_self), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_set_featureSetNumFeatures(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_get_samplerInitInRadius(_self), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_set_samplerInitInRadius(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_get_samplerInitMaxNegNum(_self), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_set_samplerInitMaxNegNum(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_get_samplerSearchWinSize(_self), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_set_samplerSearchWinSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_get_samplerTrackInRadius(_self), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_set_samplerTrackInRadius(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_get_samplerTrackMaxNegNum(_self), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_set_samplerTrackMaxNegNum(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_get_samplerTrackMaxPosNum(_self), do: :erlang.nif_error(:undefined)
  def trackerMIL_Params_set_samplerTrackMaxPosNum(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerNano_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerNano_getTrackingScore(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_TrackerNano_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_get_backbone(_self), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_set_backbone(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_get_backend(_self), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_set_backend(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_get_neckhead(_self), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_set_neckhead(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_get_target(_self), do: :erlang.nif_error(:undefined)
  def trackerNano_Params_set_target(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerVit_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerVit_getTrackingScore(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_TrackerVit_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_get_backend(_self), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_set_backend(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_get_meanvalue(_self), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_set_meanvalue(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_get_net(_self), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_set_net(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_get_stdvalue(_self), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_set_stdvalue(_self, _prop), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_get_target(_self), do: :erlang.nif_error(:undefined)
  def trackerVit_Params_set_target(_self, _prop), do: :erlang.nif_error(:undefined)
  def uMat_UMat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_context_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_get(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_handle(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_isContinuous(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_isSubmatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_queue_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_get_offset(_self), do: :erlang.nif_error(:undefined)
  def uMat_set_offset(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_UsacParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def usacParams_get_confidence(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_confidence(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_final_polisher(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_final_polisher(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_final_polisher_iterations(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_final_polisher_iterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_isParallel(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_isParallel(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_loIterations(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_loIterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_loMethod(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_loMethod(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_loSampleSize(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_loSampleSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_maxIterations(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_maxIterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_neighborsSearch(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_neighborsSearch(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_randomGeneratorState(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_randomGeneratorState(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_sampler(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_sampler(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_score(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_score(_self, _prop), do: :erlang.nif_error(:undefined)
  def usacParams_get_threshold(_self), do: :erlang.nif_error(:undefined)
  def usacParams_set_threshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def variationalRefinement_calcUV(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_getAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_getDelta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_getEpsilon(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_getFixedPointIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_getGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_getOmega(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_getSorIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_setAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_setDelta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_setEpsilon(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_setFixedPointIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_setGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_setOmega(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_setSorIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_VideoCapture(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_get(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_getBackendName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_getExceptionMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_grab(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_isOpened(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_open(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_retrieve(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_set(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoCapture_setExceptionMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_VideoWriter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_fourcc_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_get(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_getBackendName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_isOpened(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_open(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_set(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_ArucoDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_ArucoDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_detectMarkers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_ArucoDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_ArucoDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_getDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_getDictionary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_getRefineParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_refineDetectedMarkers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_ArucoDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_setDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_setDictionary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_setRefineParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_ArucoDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Board_Board(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Board_generateImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Board_getDictionary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Board_getIds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Board_getObjPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Board_getRightBottomCorner(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Board_matchImagePoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_CharucoBoard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_checkCharucoCornersCollinear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_getChessboardCorners(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_getChessboardSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_getLegacyPattern(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_getMarkerLength(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_getSquareLength(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoBoard_setLegacyPattern(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_CharucoDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_CharucoDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_detectBoard(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_detectDiamonds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_CharucoDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_getBoard(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_getCharucoParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_CharucoDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_getDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_getRefineParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_CharucoDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_CharucoDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_setBoard(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_setCharucoParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_setDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoDetector_setRefineParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_CharucoDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_CharucoParameters_CharucoParameters(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_get_cameraMatrix(_self), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_set_cameraMatrix(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_get_distCoeffs(_self), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_set_distCoeffs(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_get_minMarkers(_self), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_set_minMarkers(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_get_tryRefineMarkers(_self), do: :erlang.nif_error(:undefined)
  def aruco_CharucoParameters_set_tryRefineMarkers(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_aruco_DetectorParameters_DetectorParameters(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_DetectorParameters_readDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_DetectorParameters_writeDetectorParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_adaptiveThreshConstant(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_adaptiveThreshConstant(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_adaptiveThreshWinSizeMax(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_adaptiveThreshWinSizeMax(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_adaptiveThreshWinSizeMin(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_adaptiveThreshWinSizeMin(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_adaptiveThreshWinSizeStep(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_adaptiveThreshWinSizeStep(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagCriticalRad(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagCriticalRad(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagDeglitch(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagDeglitch(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagMaxLineFitMse(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagMaxLineFitMse(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagMaxNmaxima(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagMaxNmaxima(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagMinClusterPixels(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagMinClusterPixels(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagMinWhiteBlackDiff(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagMinWhiteBlackDiff(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagQuadDecimate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagQuadDecimate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_aprilTagQuadSigma(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_aprilTagQuadSigma(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_cornerRefinementMaxIterations(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_cornerRefinementMaxIterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_cornerRefinementMethod(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_cornerRefinementMethod(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_cornerRefinementMinAccuracy(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_cornerRefinementMinAccuracy(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_cornerRefinementWinSize(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_cornerRefinementWinSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_detectInvertedMarker(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_detectInvertedMarker(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_errorCorrectionRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_errorCorrectionRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_markerBorderBits(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_markerBorderBits(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_maxErroneousBitsInBorderRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_maxErroneousBitsInBorderRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_maxMarkerPerimeterRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_maxMarkerPerimeterRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minCornerDistanceRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minCornerDistanceRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minDistanceToBorder(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minDistanceToBorder(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minGroupDistance(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minGroupDistance(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minMarkerDistanceRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minMarkerDistanceRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minMarkerLengthRatioOriginalImg(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minMarkerLengthRatioOriginalImg(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minMarkerPerimeterRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minMarkerPerimeterRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minOtsuStdDev(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minOtsuStdDev(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_minSideLengthCanonicalImg(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_minSideLengthCanonicalImg(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_perspectiveRemoveIgnoredMarginPerCell(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_perspectiveRemoveIgnoredMarginPerCell(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_perspectiveRemovePixelPerCell(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_perspectiveRemovePixelPerCell(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_polygonalApproxAccuracyRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_polygonalApproxAccuracyRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_relativeCornerRefinmentWinSize(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_relativeCornerRefinmentWinSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_get_useAruco3Detection(_self), do: :erlang.nif_error(:undefined)
  def aruco_DetectorParameters_set_useAruco3Detection(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_Dictionary(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_generateImageMarker(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_getBitsFromByteList_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_getByteListFromBits_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_getDistanceToId(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_identify(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_readDictionary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_Dictionary_writeDictionary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_get_bytesList(_self), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_set_bytesList(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_get_markerSize(_self), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_set_markerSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_get_maxCorrectionBits(_self), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_set_maxCorrectionBits(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_aruco_EstimateParameters_EstimateParameters(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_EstimateParameters_get_pattern(_self), do: :erlang.nif_error(:undefined)
  def aruco_EstimateParameters_set_pattern(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_EstimateParameters_get_solvePnPMethod(_self), do: :erlang.nif_error(:undefined)
  def aruco_EstimateParameters_set_solvePnPMethod(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_EstimateParameters_get_useExtrinsicGuess(_self), do: :erlang.nif_error(:undefined)
  def aruco_EstimateParameters_set_useExtrinsicGuess(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_aruco_GridBoard_GridBoard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_GridBoard_getGridSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_GridBoard_getMarkerLength(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_GridBoard_getMarkerSeparation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_RefineParameters_RefineParameters(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_RefineParameters_readRefineParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_aruco_RefineParameters_writeRefineParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_RefineParameters_get_checkAllOrders(_self), do: :erlang.nif_error(:undefined)
  def aruco_RefineParameters_set_checkAllOrders(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_RefineParameters_get_errorCorrectionRate(_self), do: :erlang.nif_error(:undefined)
  def aruco_RefineParameters_set_errorCorrectionRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def aruco_RefineParameters_get_minRepDistance(_self), do: :erlang.nif_error(:undefined)
  def aruco_RefineParameters_set_minRepDistance(_self, _prop), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_BarcodeDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_BarcodeDetector_decode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_BarcodeDetector_decodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_decodeWithType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_BarcodeDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_BarcodeDetector_detectAndDecode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_BarcodeDetector_detectAndDecodeMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_detectAndDecodeWithType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_BarcodeDetector_detectMulti(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_getDetectorScales(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_getDownsamplingThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_getGradientThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_setDetectorScales(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_setDownsamplingThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def barcode_barcode_BarcodeDetector_setGradientThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_getBackgroundImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_getIsParallel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_getMaxPixelStability(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_getMinPixelStability(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_getUseHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_setIsParallel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_setMaxPixelStability(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_setMinPixelStability(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorCNT_setUseHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getBackgroundPrior(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getDecisionThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getMaxVal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getMinVal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getNumFrames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getQuantizationLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getSmoothingRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setBackgroundPrior(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setDecisionThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setMaxVal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setMinVal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setNumFrames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setQuantizationLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setSmoothingRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGSOC_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorGSOC_getBackgroundImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorLSBP_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorLSBP_getBackgroundImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_getBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_getHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_getNMixtures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_getNoiseSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_setBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_setHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_setNMixtures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_BackgroundSubtractorMOG_setNoiseSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_SyntheticSequenceGenerator_SyntheticSequenceGenerator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_SyntheticSequenceGenerator_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_SyntheticSequenceGenerator_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_SyntheticSequenceGenerator_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_bgsegm_SyntheticSequenceGenerator_getNextFrame(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_SyntheticSequenceGenerator_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_SyntheticSequenceGenerator_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_SyntheticSequenceGenerator_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_activateContoursProcessing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_activateMovingContoursProcessing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_applyFastToneMapping(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_Retina_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_clearBuffers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_Retina_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_Retina_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_getInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_getMagno(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_getMagnoRAW(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_getOutputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_getParvo(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_getParvoRAW(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_printSetup(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_Retina_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_run(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_Retina_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_setColorSaturation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_setup(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_setupIPLMagnoChannel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_setupOPLandIPLParvoChannel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_Retina_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_RetinaFastToneMapping_applyFastToneMapping(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_RetinaFastToneMapping_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_RetinaFastToneMapping_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_RetinaFastToneMapping_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_RetinaFastToneMapping_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_RetinaFastToneMapping_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_RetinaFastToneMapping_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_RetinaFastToneMapping_setup(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_RetinaFastToneMapping_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_TransientAreasSegmentationModule_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_clearAllBuffers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_TransientAreasSegmentationModule_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_TransientAreasSegmentationModule_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_getSegmentationPicture(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_getSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_printSetup(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_TransientAreasSegmentationModule_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_run(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_TransientAreasSegmentationModule_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_setup(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_bioinspired_TransientAreasSegmentationModule_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_ColorCorrectionModel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_getCCM(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_getLoss(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_getMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_getWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_get_dst_rgbl(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_get_src_rgbl(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_infer(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_run(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setCCM_TYPE(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setColorSpace(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setEpsilon(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setInitialMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setLinear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setLinearDegree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setLinearGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setMaxCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setSaturatedThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setWeightCoeff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ccm_ccm_ColorCorrectionModel_setWeightsList(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_ColoredKinFu_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_ColoredKinFu_getCloud(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_ColoredKinFu_getNormals(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_ColoredKinFu_getPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_ColoredKinFu_render(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_ColoredKinFu_reset(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_ColoredKinFu_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_Params_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_Params_coarseParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_Params_coloredTSDFParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_Params_defaultParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_Params_hashTSDFParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_colored_kinfu_Params_setInitialVolumePose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_bilateral_kernel_size(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_bilateral_kernel_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_bilateral_sigma_depth(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_bilateral_sigma_depth(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_bilateral_sigma_spatial(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_bilateral_sigma_spatial(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_depthFactor(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_depthFactor(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_frameSize(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_frameSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_icpAngleThresh(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_icpAngleThresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_icpDistThresh(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_icpDistThresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_icpIterations(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_icpIterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_intr(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_intr(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_lightPose(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_lightPose(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_pyramidLevels(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_pyramidLevels(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_raycast_step_factor(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_raycast_step_factor(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_rgb_frameSize(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_rgb_frameSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_rgb_intr(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_rgb_intr(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_truncateThreshold(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_truncateThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_tsdf_max_weight(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_tsdf_max_weight(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_tsdf_min_camera_movement(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_tsdf_min_camera_movement(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_tsdf_trunc_dist(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_tsdf_trunc_dist(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_volumeDims(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_volumeDims(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_volumeType(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_volumeType(_self, _prop), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_get_voxelSize(_self), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_set_voxelSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_getBackgroundImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_getBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_getHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_getNMixtures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_getNoiseSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_setBackgroundRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_setHistory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_setNMixtures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG_setNoiseSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG2_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BackgroundSubtractorMOG2_getBackgroundImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BufferPool_BufferPool(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BufferPool_getAllocator(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_BufferPool_getBuffer(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CLAHE_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CannyEdgeDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CannyEdgeDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_getAppertureSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CannyEdgeDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_getHighThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_getL2Gradient(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_getLowThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CannyEdgeDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CannyEdgeDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_setAppertureSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_setHighThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_setL2Gradient(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CannyEdgeDetector_setLowThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CannyEdgeDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CascadeClassifier_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_convert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_detectMultiScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CascadeClassifier_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_getClassifierSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CascadeClassifier_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_getFindLargestObject(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_getMaxNumObjects(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_getMaxObjectSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_getMinNeighbors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_getMinObjectSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CascadeClassifier_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CascadeClassifier_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_setFindLargestObject(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_setMaxNumObjects(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_setMaxObjectSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_setMinNeighbors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_setMinObjectSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CascadeClassifier_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CascadeClassifier_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Convolution_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Convolution_convolve(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Convolution_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Convolution_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Convolution_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Convolution_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Convolution_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornernessCriteria_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CornernessCriteria_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornernessCriteria_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornernessCriteria_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornernessCriteria_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornernessCriteria_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornernessCriteria_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornersDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CornersDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornersDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornersDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornersDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornersDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CornersDetector_setMaxCorners(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_CornersDetector_setMinDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CornersDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DFT_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DFT_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DFT_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DFT_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DFT_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DFT_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DFT_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_add(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_createBFMatcher_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DescriptorMatcher_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_getTrainDescriptors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_isMaskSupported(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_knnMatchAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_knnMatchConvert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_matchAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_matchConvert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_radiusMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_radiusMatchAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_radiusMatchConvert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DescriptorMatcher_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DescriptorMatcher_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DescriptorMatcher_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DescriptorMatcher_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_DeviceInfo(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_ECCEnabled(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_asyncEngineCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_canMapHostMemory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_clockRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_computeMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_concurrentKernels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_deviceID(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_freeMemory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_integrated(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_isCompatible(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_kernelExecTimeoutEnabled(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_l2CacheSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_majorVersion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxGridSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxSurface1D(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxSurface1DLayered(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxSurface2D(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxSurface2DLayered(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxSurface3D(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxSurfaceCubemap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxSurfaceCubemapLayered(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture1D(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture1DLayered(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture1DLinear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture1DMipmap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture2D(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture2DGather(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture2DLayered(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture2DLinear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture2DMipmap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTexture3D(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTextureCubemap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxTextureCubemapLayered(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxThreadsDim(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxThreadsPerBlock(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_maxThreadsPerMultiProcessor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_memPitch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_memoryBusWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_memoryClockRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_minorVersion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_multiProcessorCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_pciBusID(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_pciDeviceID(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_pciDomainID(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_queryMemory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_regsPerBlock(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_sharedMemPerBlock(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_surfaceAlignment(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_tccDriver(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_textureAlignment(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_texturePitchAlignment(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_totalConstMem(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_totalGlobalMem(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_totalMemory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_unifiedAddressing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DeviceInfo_warpSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DisparityBilateralFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DisparityBilateralFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DisparityBilateralFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_getEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_getMaxDiscThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_getNumIters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_getRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_getSigmaRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DisparityBilateralFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DisparityBilateralFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_setEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_setMaxDiscThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_setNumIters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_setRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_DisparityBilateralFilter_setSigmaRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DisparityBilateralFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Event_Event(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Event_elapsedTime_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Event_queryIfComplete(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Event_record(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Event_waitForCompletion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_computeAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_convert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_detectAndComputeAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_detectAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_getMaxNumPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_setMaxNumPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_FastFeatureDetector_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Feature2DAsync_computeAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Feature2DAsync_convert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Feature2DAsync_detectAndComputeAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Feature2DAsync_detectAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Feature2DAsync_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Filter_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Filter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Filter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Filter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Filter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Filter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Filter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_GpuMat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_adjustROI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_assignTo(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_channels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_clone(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_col(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_colRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_convertTo(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_copyTo(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_create(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_cudaPtr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_defaultAllocator_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_depth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_download(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_elemSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_elemSize1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_isContinuous(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_locateROI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_reshape(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_row(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_rowRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_setDefaultAllocator_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_setTo(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_size(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_step1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_swap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_type(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_updateContinuityFlag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_GpuMat_upload(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_GpuMat_get_step(_self), do: :erlang.nif_error(:undefined)
  def cuda_HOG_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_detectMultiScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_detectMultiScaleWithoutConf(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_detectWithoutConf(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HOG_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getBlockHistogramSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HOG_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getDefaultPeopleDetector(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getDescriptorFormat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getGammaCorrection(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getGroupThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getHitThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getL2HysThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getNumLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getWinSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_getWinStride(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HOG_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HOG_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setDescriptorFormat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setGammaCorrection(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setGroupThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setHitThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setL2HysThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setNumLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setSVMDetector(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setWinSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HOG_setWinStride(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HOG_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_HostMem(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_channels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_clone(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_create(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_createMatHeader(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_depth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_elemSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_elemSize1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_isContinuous(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_reshape(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_size(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_step1(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_swap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HostMem_type(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HostMem_get_step(_self), do: :erlang.nif_error(:undefined)
  def cuda_HoughCirclesDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughCirclesDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_getCannyThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughCirclesDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_getDp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_getMaxCircles(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_getMaxRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_getMinDist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_getMinRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_getVotesThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughCirclesDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughCirclesDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_setCannyThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_setDp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_setMaxCircles(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_setMaxRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_setMinDist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_setMinRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughCirclesDetector_setVotesThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughCirclesDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughLinesDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_downloadResults(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughLinesDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughLinesDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_getDoSort(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_getMaxLines(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_getRho(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_getTheta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughLinesDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughLinesDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_setDoSort(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_setMaxLines(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_setRho(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_setTheta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughLinesDetector_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughLinesDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughSegmentDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughSegmentDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughSegmentDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_getMaxLineGap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_getMaxLines(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_getMinLineLength(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_getRho(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_getTheta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughSegmentDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughSegmentDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_setMaxLineGap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_setMaxLines(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_setMinLineLength(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_setRho(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_setTheta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_HoughSegmentDetector_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HoughSegmentDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_LookUpTable_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_LookUpTable_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_LookUpTable_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_LookUpTable_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_LookUpTable_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_LookUpTable_transform(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_LookUpTable_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_computeAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_convert(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_detectAndComputeAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_detectAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getBlurForDescriptor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getFastThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getFirstLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getNLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getPatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getScoreType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_getWTA_K(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setBlurForDescriptor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setEdgeThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setFastThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setFirstLevel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setMaxFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setNLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setPatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setScoreType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_ORB_setWTA_K(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_SURF_CUDA_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_SURF_CUDA_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_SURF_CUDA_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_SURF_CUDA_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_SURF_CUDA_detectWithDescriptors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_SURF_CUDA_downloadKeypoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_SURF_CUDA_get_extended(_self), do: :erlang.nif_error(:undefined)
  def cuda_SURF_CUDA_get_hessianThreshold(_self), do: :erlang.nif_error(:undefined)
  def cuda_SURF_CUDA_get_keypointsRatio(_self), do: :erlang.nif_error(:undefined)
  def cuda_SURF_CUDA_get_nOctaveLayers(_self), do: :erlang.nif_error(:undefined)
  def cuda_SURF_CUDA_get_nOctaves(_self), do: :erlang.nif_error(:undefined)
  def cuda_SURF_CUDA_get_upright(_self), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBM_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_estimateRecommendedParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_getDataWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_getDiscSingleJump(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_getDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_getMaxDataTerm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_getMaxDiscTerm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_getMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_getMsgType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_getNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_getNumIters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_getNumLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_getSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_getSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_setDataWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_setDiscSingleJump(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_setDisp12MaxDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_setMaxDataTerm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_setMaxDiscTerm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_setMinDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_setMsgType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_setNumDisparities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_setNumIters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoBeliefPropagation_setNumLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_setSpeckleRange(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_setSpeckleWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoConstantSpaceBP_estimateRecommendedParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoConstantSpaceBP_getNrPlane(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoConstantSpaceBP_getUseLocalInitDataCost(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoConstantSpaceBP_setNrPlane(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoConstantSpaceBP_setUseLocalInitDataCost(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoSGM_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_StereoSGM_compute_with_stream(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Stream_Stream(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Stream_Null_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Stream_cudaPtr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Stream_queryIfComplete(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Stream_waitEvent(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_Stream_waitForCompletion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TargetArchs_has_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TargetArchs_hasBin_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TargetArchs_hasEqualOrGreater_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TargetArchs_hasEqualOrGreaterBin_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TargetArchs_hasEqualOrGreaterPtx_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TargetArchs_hasEqualOrLessPtx_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TargetArchs_hasPtx_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TemplateMatching_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TemplateMatching_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TemplateMatching_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cuda_TemplateMatching_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TemplateMatching_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TemplateMatching_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TemplateMatching_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_EncodeQp_get_qpInterB(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncodeQp_set_qpInterB(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncodeQp_get_qpInterP(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncodeQp_set_qpInterP(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncodeQp_get_qpIntra(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncodeQp_set_qpIntra(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_EncoderParams_EncoderParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_averageBitRate(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_averageBitRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_constQp(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_constQp(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_encodingProfile(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_encodingProfile(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_gopLength(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_gopLength(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_idrPeriod(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_idrPeriod(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_maxBitRate(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_maxBitRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_multiPassEncoding(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_multiPassEncoding(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_nvPreset(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_nvPreset(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_rateControlMode(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_rateControlMode(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_targetQuality(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_targetQuality(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_get_tuningInfo(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_EncoderParams_set_tuningInfo(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_FormatInfo_FormatInfo(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_chromaFormat(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_chromaFormat(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_codec(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_codec(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_deinterlaceMode(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_deinterlaceMode(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_displayArea(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_displayArea(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_enableHistogram(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_enableHistogram(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_fps(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_fps(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_height(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_height(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_nBitDepthChromaMinus8(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_nBitDepthChromaMinus8(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_nBitDepthMinus8(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_nBitDepthMinus8(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_nCounterBitDepth(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_nCounterBitDepth(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_nMaxHistogramBins(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_nMaxHistogramBins(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_srcRoi(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_srcRoi(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_targetRoi(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_targetRoi(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_targetSz(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_targetSz(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_ulHeight(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_ulHeight(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_ulNumDecodeSurfaces(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_ulNumDecodeSurfaces(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_ulWidth(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_ulWidth(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_valid(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_valid(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_videoFullRangeFlag(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_videoFullRangeFlag(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_get_width(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_FormatInfo_set_width(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_format(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_get(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_getVideoReaderProps(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_grab(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_nextFrame(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_nextFrameWithHist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_retrieve(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_set(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReader_setVideoReaderProps(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoReaderInitParams_VideoReaderInitParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_allowFrameDrop(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_allowFrameDrop(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_enableHistogram(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_enableHistogram(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_firstFrameIdx(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_firstFrameIdx(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_minNumDecodeSurfaces(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_minNumDecodeSurfaces(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_rawMode(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_rawMode(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_srcRoi(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_srcRoi(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_targetRoi(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_targetRoi(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_targetSz(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_targetSz(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_get_udpSource(_self), do: :erlang.nif_error(:undefined)
  def cudacodec_VideoReaderInitParams_set_udpSource(_self, _prop), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoWriter_getEncoderParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoWriter_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_cudacodec_VideoWriter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_AffineBasedEstimator_AffineBasedEstimator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_AffineBestOf2NearestMatcher_AffineBestOf2NearestMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_AffineBestOf2NearestMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_AffineBestOf2NearestMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_AffineBestOf2NearestMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_AffineBestOf2NearestMatcher_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_AffineBestOf2NearestMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestMatcher_BestOf2NearestMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestMatcher_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestRangeMatcher_BestOf2NearestRangeMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestRangeMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestRangeMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestRangeMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestRangeMatcher_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BestOf2NearestRangeMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Blender_blend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Blender_createDefault_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Blender_feed(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Blender_prepare(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksChannelsCompensator_BlocksChannelsCompensator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_getNrFeeds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_getNrGainsFilteringIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_getSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_setNrFeeds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_setNrGainsFilteringIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksCompensator_setSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksGainCompensator_BlocksGainCompensator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksGainCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksGainCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BlocksGainCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterAffine_BundleAdjusterAffine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterAffinePartial_BundleAdjusterAffinePartial(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterBase_confThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterBase_refinementMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterBase_setConfThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterBase_setRefinementMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterBase_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterBase_termCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterRay_BundleAdjusterRay(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_BundleAdjusterReproj_BundleAdjusterReproj(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_CameraParams_K(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_get_R(_self), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_set_R(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_get_aspect(_self), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_set_aspect(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_get_focal(_self), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_set_focal(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_get_ppx(_self), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_set_ppx(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_get_ppy(_self), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_set_ppy(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_get_t(_self), do: :erlang.nif_error(:undefined)
  def detail_CameraParams_set_t(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_ChannelsCompensator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_getNrFeeds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_getSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_setNrFeeds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ChannelsCompensator_setSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_DpSeamFinder_DpSeamFinder(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_DpSeamFinder_setCostFunction(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Estimator_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ExposureCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ExposureCompensator_createDefault_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ExposureCompensator_feed(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ExposureCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ExposureCompensator_getUpdateGain(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ExposureCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ExposureCompensator_setUpdateGain(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeatherBlender_FeatherBlender(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeatherBlender_blend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeatherBlender_createWeightMaps(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeatherBlender_feed(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeatherBlender_prepare(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeatherBlender_setSharpness(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeatherBlender_sharpness(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeaturesMatcher_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeaturesMatcher_apply2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeaturesMatcher_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_FeaturesMatcher_isThreadSafe(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_GainCompensator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_getNrFeeds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_getSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_setNrFeeds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GainCompensator_setSimilarityThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GraphCutSeamFinder_GraphCutSeamFinder(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_GraphCutSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_HomographyBasedEstimator_HomographyBasedEstimator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_ImageFeatures_getKeypoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_get_descriptors(_self), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_set_descriptors(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_get_img_idx(_self), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_set_img_idx(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_get_img_size(_self), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_set_img_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_get_keypoints(_self), do: :erlang.nif_error(:undefined)
  def detail_ImageFeatures_set_keypoints(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_detail_MatchesInfo_getInliers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_MatchesInfo_getMatches(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_get_H(_self), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_set_H(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_get_confidence(_self), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_set_confidence(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_get_dst_img_idx(_self), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_set_dst_img_idx(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_get_inliers_mask(_self), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_set_inliers_mask(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_get_matches(_self), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_set_matches(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_get_num_inliers(_self), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_set_num_inliers(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_get_src_img_idx(_self), do: :erlang.nif_error(:undefined)
  def detail_MatchesInfo_set_src_img_idx(_self, _prop), do: :erlang.nif_error(:undefined)
  def detail_detail_MultiBandBlender_MultiBandBlender(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_MultiBandBlender_blend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_MultiBandBlender_feed(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_MultiBandBlender_numBands(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_MultiBandBlender_prepare(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_MultiBandBlender_setNumBands(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_NoBundleAdjuster_NoBundleAdjuster(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_NoExposureCompensator_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_NoExposureCompensator_getMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_NoExposureCompensator_setMatGains(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_NoSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_PairwiseSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_SeamFinder_createDefault_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_SeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_SphericalProjector_mapBackward(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_SphericalProjector_mapForward(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Timelapser_createDefault_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Timelapser_getDst(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Timelapser_initialize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_Timelapser_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_detail_VoronoiSeamFinder_find(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_ClassificationModel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_classify(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_getEnableSoftmaxPostProcessing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setEnableSoftmaxPostProcessing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_ClassificationModel_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_DetectionModel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_getNmsAcrossClasses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setNmsAcrossClasses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DetectionModel_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DictValue_DictValue(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DictValue_getIntValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DictValue_getRealValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DictValue_getStringValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DictValue_isInt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DictValue_isReal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_DictValue_isString(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Image2BlobParams_Image2BlobParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Image2BlobParams_blobRectToImageRect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Image2BlobParams_blobRectsToImageRects(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_borderValue(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_borderValue(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_datalayout(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_datalayout(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_ddepth(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_ddepth(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_mean(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_mean(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_paddingmode(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_paddingmode(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_scalefactor(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_scalefactor(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_size(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_get_swapRB(_self), do: :erlang.nif_error(:undefined)
  def dnn_Image2BlobParams_set_swapRB(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_KeypointsModel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_estimate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_KeypointsModel_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Layer_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Layer_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Layer_finalize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Layer_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Layer_outputNameToIndex(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Layer_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Layer_run(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Layer_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Layer_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Layer_get_blobs(_self), do: :erlang.nif_error(:undefined)
  def dnn_Layer_set_blobs(_self, _prop), do: :erlang.nif_error(:undefined)
  def dnn_Layer_get_name(_self), do: :erlang.nif_error(:undefined)
  def dnn_Layer_get_preferableTarget(_self), do: :erlang.nif_error(:undefined)
  def dnn_Layer_get_type(_self), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_Model(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Model_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_Net(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_connect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_dump(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_dumpToFile(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_dumpToPbtxt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_enableFusion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_forward(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_forwardAndRetrieve(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_forwardAsync(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getFLOPS(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getInputDetails(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getLayer(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getLayerId(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getLayerNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getLayerShapes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getLayerTypes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getLayersCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getLayersShapes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getMemoryConsumption(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getOutputDetails(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getParam(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getPerfProfile(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getUnconnectedOutLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_getUnconnectedOutLayersNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_quantize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_readFromModelOptimizer_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_setHalideScheduler(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_setInput(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_setInputShape(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_setInputsNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_setParam(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_Net_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_SegmentationModel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_segment(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_SegmentationModel_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_detectTextRectangles(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_TextDetectionModel_DB(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_detectTextRectangles(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_getBinaryThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_getMaxCandidates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_getPolygonThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_getUnclipRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setBinaryThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setMaxCandidates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setPolygonThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_DB_setUnclipRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_TextDetectionModel_EAST(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_detectTextRectangles(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_getConfidenceThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_getNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setConfidenceThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setNMSThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextDetectionModel_EAST_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_TextRecognitionModel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_enableWinograd(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_getDecodeType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_getVocabulary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_recognize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setDecodeOptsCTCPrefixBeamSearch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setDecodeType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setInputCrop(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setInputMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setInputParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setInputScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setInputSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setInputSwapRB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setOutputNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_dnn_TextRecognitionModel_setVocabulary(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_getAlgorithm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_getScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_readModel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_setModel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_setPreferableBackend(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_setPreferableTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_upsample(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_dnn_superres_DnnSuperResImpl_upsampleMultioutput(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_dynafu_DynaFu_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_dynafu_DynaFu_getCloud(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_dynafu_DynaFu_getNormals(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_dynafu_DynaFu_getPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_dynafu_DynaFu_render(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_dynafu_DynaFu_reset(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_dynafu_DynaFu_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_BIF_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BIF_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BIF_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_BIF_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_BIF_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BIF_getNumBands(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BIF_getNumRotations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_BIF_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_BIF_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_BIF_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_getEigenValues(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_getEigenVectors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_getLabels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_getMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_getNumComponents(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_getProjections(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_setNumComponents(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_BasicFaceRecognizer_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_EigenFaceRecognizer_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_FaceRecognizer_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_FaceRecognizer_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_FaceRecognizer_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_getLabelInfo(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_getLabelsByString(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_predict_collect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_predict_label(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_FaceRecognizer_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_setLabelInfo(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FaceRecognizer_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_Facemark_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_Facemark_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_Facemark_fit(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_Facemark_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_Facemark_loadModel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_Facemark_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_Facemark_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_Facemark_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_FisherFaceRecognizer_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_getGridX(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_getGridY(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_getHistograms(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_getLabels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_getNeighbors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_getRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_setGridX(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_setGridY(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_setNeighbors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_setRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_LBPHFaceRecognizer_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_MACE_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_MACE_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_MACE_salt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_MACE_same(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_MACE_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_StandardCollector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_StandardCollector_getMinDist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_StandardCollector_getMinLabel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def face_face_StandardCollector_getResults(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_Index(_opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_build(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_getAlgorithm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_getDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_knnSearch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_load(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_radiusSearch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def flann_flann_Index_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_HfsSegment_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_HfsSegment_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_HfsSegment_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_getMinRegionSizeI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_getMinRegionSizeII(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_getNumSlicIter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_getSegEgbThresholdI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_getSegEgbThresholdII(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_getSlicSpixelSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_getSpatialWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_performSegmentCpu(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_performSegmentGpu(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_HfsSegment_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_HfsSegment_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_setMinRegionSizeI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_setMinRegionSizeII(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_setNumSlicIter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_setSegEgbThresholdI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_setSegEgbThresholdII(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_setSlicSpixelSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_hfs_HfsSegment_setSpatialWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_HfsSegment_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_AverageHash_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_BlockMeanHash_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_BlockMeanHash_getMean(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_BlockMeanHash_setMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_ColorMomentHash_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_ImgHashBase_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_ImgHashBase_compare(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_ImgHashBase_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_ImgHashBase_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_ImgHashBase_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_ImgHashBase_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_ImgHashBase_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_ImgHashBase_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_MarrHildrethHash_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_MarrHildrethHash_getAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_MarrHildrethHash_getScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_MarrHildrethHash_setKernelParam(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_PHash_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_RadialVarianceHash_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_RadialVarianceHash_getNumOfAngleLine(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_RadialVarianceHash_getSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_RadialVarianceHash_setNumOfAngleLine(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_img_hash_RadialVarianceHash_setSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_KinFu_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_KinFu_getCloud(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_KinFu_getNormals(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_KinFu_getPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_KinFu_render(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_KinFu_reset(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_KinFu_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_Params_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_Params_coarseParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_Params_coloredTSDFParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_Params_defaultParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_Params_hashTSDFParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_Params_setInitialVolumePose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_bilateral_kernel_size(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_bilateral_kernel_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_bilateral_sigma_depth(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_bilateral_sigma_depth(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_bilateral_sigma_spatial(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_bilateral_sigma_spatial(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_depthFactor(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_depthFactor(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_frameSize(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_frameSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_icpAngleThresh(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_icpAngleThresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_icpDistThresh(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_icpDistThresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_icpIterations(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_icpIterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_intr(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_intr(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_lightPose(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_lightPose(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_pyramidLevels(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_pyramidLevels(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_raycast_step_factor(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_raycast_step_factor(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_rgb_intr(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_rgb_intr(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_truncateThreshold(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_truncateThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_tsdf_max_weight(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_tsdf_max_weight(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_tsdf_min_camera_movement(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_tsdf_min_camera_movement(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_tsdf_trunc_dist(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_tsdf_trunc_dist(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_volumeDims(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_volumeDims(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_volumeType(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_volumeType(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_Params_get_voxelSize(_self), do: :erlang.nif_error(:undefined)
  def kinfu_Params_set_voxelSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_VolumeParams_coarseParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_kinfu_VolumeParams_defaultParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_get_depthTruncThreshold(_self), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_set_depthTruncThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_get_maxWeight(_self), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_set_maxWeight(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_get_raycastStepFactor(_self), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_set_raycastStepFactor(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_get_resolution(_self), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_set_resolution(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_get_tsdfTruncDist(_self), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_set_tsdfTruncDist(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_get_type(_self), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_set_type(_self, _prop), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_get_voxelSize(_self), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_set_voxelSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_LargeKinfu_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_LargeKinfu_getCloud(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_LargeKinfu_getNormals(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_LargeKinfu_getPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_LargeKinfu_render(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_LargeKinfu_reset(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_LargeKinfu_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_Params_coarseParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_Params_defaultParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_large_kinfu_Params_hashTSDFParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_bilateral_kernel_size(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_bilateral_kernel_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_bilateral_sigma_depth(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_bilateral_sigma_depth(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_bilateral_sigma_spatial(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_bilateral_sigma_spatial(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_depthFactor(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_depthFactor(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_frameSize(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_frameSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_icpAngleThresh(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_icpAngleThresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_icpDistThresh(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_icpDistThresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_icpIterations(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_icpIterations(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_intr(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_intr(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_lightPose(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_lightPose(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_pyramidLevels(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_pyramidLevels(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_rgb_intr(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_rgb_intr(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_truncateThreshold(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_truncateThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_get_tsdf_min_camera_movement(_self), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_set_tsdf_min_camera_movement(_self, _prop), do: :erlang.nif_error(:undefined)
  def legacy_legacy_MultiTracker_MultiTracker(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_MultiTracker_add(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_MultiTracker_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_MultiTracker_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_MultiTracker_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_MultiTracker_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_MultiTracker_getObjects(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_MultiTracker_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_MultiTracker_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_MultiTracker_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_MultiTracker_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_Tracker_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_Tracker_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_Tracker_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_Tracker_init(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_Tracker_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_Tracker_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_Tracker_update(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_Tracker_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerBoosting_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerCSRT_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerCSRT_setInitialMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerKCF_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerMIL_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerMOSSE_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerMedianFlow_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_legacy_TrackerTLD_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptor_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_createBinaryDescriptor_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptor_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptor_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_getNumOfOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_getReductionRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_getWidthOfBand(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptor_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptor_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_setNumOfOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_setReductionRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptor_setWidthOfBand(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptor_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptorMatcher_BinaryDescriptorMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptorMatcher_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptorMatcher_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptorMatcher_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptorMatcher_knnMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptorMatcher_knnMatchQuery(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptorMatcher_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_BinaryDescriptorMatcher_matchQuery(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptorMatcher_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptorMatcher_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptorMatcher_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_KeyLine_KeyLine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_KeyLine_getEndPoint(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_KeyLine_getEndPointInOctave(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_KeyLine_getStartPoint(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_KeyLine_getStartPointInOctave(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_angle(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_angle(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_class_id(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_class_id(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_ePointInOctaveX(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_ePointInOctaveX(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_ePointInOctaveY(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_ePointInOctaveY(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_endPointX(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_endPointX(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_endPointY(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_endPointY(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_lineLength(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_lineLength(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_numOfPixels(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_numOfPixels(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_octave(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_octave(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_pt(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_pt(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_response(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_response(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_sPointInOctaveX(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_sPointInOctaveX(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_sPointInOctaveY(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_sPointInOctaveY(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_size(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_size(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_startPointX(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_startPointX(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_get_startPointY(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_KeyLine_set_startPointY(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_LSDDetector_LSDDetectorWithParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_LSDDetector_createLSDDetector_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_LSDDetector_createLSDDetectorWithParams_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_LSDDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_LSDParam_LSDParam(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_get_ang_th(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_set_ang_th(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_get_density_th(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_set_density_th(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_get_log_eps(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_set_log_eps(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_get_n_bins(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_set_n_bins(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_get_quant(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_set_quant(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_get_scale(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_set_scale(_self, _prop), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_get_sigma_scale(_self), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDParam_set_sigma_scale(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_linemod_ColorGradient_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_ColorGradient_get_num_features(_self), do: :erlang.nif_error(:undefined)
  def linemod_ColorGradient_get_strong_threshold(_self), do: :erlang.nif_error(:undefined)
  def linemod_ColorGradient_get_weak_threshold(_self), do: :erlang.nif_error(:undefined)
  def linemod_linemod_DepthNormal_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_DepthNormal_get_difference_threshold(_self), do: :erlang.nif_error(:undefined)
  def linemod_DepthNormal_get_distance_threshold(_self), do: :erlang.nif_error(:undefined)
  def linemod_DepthNormal_get_extract_threshold(_self), do: :erlang.nif_error(:undefined)
  def linemod_DepthNormal_get_num_features(_self), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_Detector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_addSyntheticTemplate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_addTemplate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_classIds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_getModalities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_getT(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_getTemplates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_numClasses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_numTemplates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_pyramidLevels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_readClasses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Detector_writeClasses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Feature_Feature(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_Feature_get_label(_self), do: :erlang.nif_error(:undefined)
  def linemod_Feature_set_label(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_Feature_get_x(_self), do: :erlang.nif_error(:undefined)
  def linemod_Feature_set_x(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_Feature_get_y(_self), do: :erlang.nif_error(:undefined)
  def linemod_Feature_set_y(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Match_Match(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_Match_get_class_id(_self), do: :erlang.nif_error(:undefined)
  def linemod_Match_set_class_id(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_Match_get_similarity(_self), do: :erlang.nif_error(:undefined)
  def linemod_Match_set_similarity(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_Match_get_template_id(_self), do: :erlang.nif_error(:undefined)
  def linemod_Match_set_template_id(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_Match_get_x(_self), do: :erlang.nif_error(:undefined)
  def linemod_Match_set_x(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_Match_get_y(_self), do: :erlang.nif_error(:undefined)
  def linemod_Match_set_y(_self, _prop), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Modality_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Modality_name(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Modality_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_Modality_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_QuantizedPyramid_extractTemplate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_QuantizedPyramid_pyrDown(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_linemod_QuantizedPyramid_quantize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_Template_get_features(_self), do: :erlang.nif_error(:undefined)
  def linemod_Template_get_height(_self), do: :erlang.nif_error(:undefined)
  def linemod_Template_get_pyramid_level(_self), do: :erlang.nif_error(:undefined)
  def linemod_Template_get_width(_self), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_getBox(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_getCenter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_getChartsRGB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_getChartsYCbCr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_getColorCharts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_getCost(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_getTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_setBox(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_setCenter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_setChartsRGB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_setChartsYCbCr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_setCost(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CChecker_setTarget(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDetector_getBestColorChecker(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDetector_getListColorChecker(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDetector_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDetector_processWithROI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDetector_setNet(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDraw_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_CCheckerDraw_draw(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_mcc_DetectorParameters_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_B0factor(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_B0factor(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_adaptiveThreshConstant(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_adaptiveThreshConstant(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_adaptiveThreshWinSizeMax(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_adaptiveThreshWinSizeMax(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_adaptiveThreshWinSizeMin(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_adaptiveThreshWinSizeMin(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_adaptiveThreshWinSizeStep(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_adaptiveThreshWinSizeStep(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_borderWidth(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_borderWidth(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_confidenceThreshold(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_confidenceThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_findCandidatesApproxPolyDPEpsMultiplier(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_findCandidatesApproxPolyDPEpsMultiplier(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_maxError(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_maxError(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minContourLengthAllowed(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minContourLengthAllowed(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minContourPointsAllowed(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minContourPointsAllowed(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minContourSolidity(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minContourSolidity(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minContoursArea(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minContoursArea(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minContoursAreaRate(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minContoursAreaRate(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minGroupSize(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minGroupSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minImageSize(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minImageSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minInterCheckerDistance(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minInterCheckerDistance(_self, _prop), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_get_minInterContourDistance(_self), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_set_minInterContourDistance(_self, _prop), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ANN_MLP_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getAnnealCoolingRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getAnnealFinalT(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getAnnealInitialT(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getAnnealItePerStep(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getBackpropMomentumScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getBackpropWeightScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ANN_MLP_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getLayerSizes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getRpropDW0(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getRpropDWMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getRpropDWMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getRpropDWMinus(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getRpropDWPlus(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getTrainMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_getWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ANN_MLP_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ANN_MLP_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setActivationFunction(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setAnnealCoolingRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setAnnealFinalT(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setAnnealInitialT(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setAnnealItePerStep(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setBackpropMomentumScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setBackpropWeightScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setLayerSizes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setRpropDW0(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setRpropDWMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setRpropDWMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setRpropDWMinus(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setRpropDWPlus(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_setTrainMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ANN_MLP_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ANN_MLP_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_Boost_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getBoostType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getCVFolds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_Boost_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getMaxCategories(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getPriors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getUse1SERule(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getWeakCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_getWeightTrimRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_Boost_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_Boost_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setBoostType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setCVFolds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setMaxCategories(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setPriors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setUse1SERule(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setWeakCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_setWeightTrimRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_Boost_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_Boost_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_DTrees_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getCVFolds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_DTrees_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getMaxCategories(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getPriors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getUse1SERule(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_DTrees_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_DTrees_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setCVFolds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setMaxCategories(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setPriors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setUse1SERule(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_setUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_DTrees_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_DTrees_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_EM_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_getClustersNumber(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_getCovarianceMatrixType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_getCovs(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_EM_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_getMeans(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_getWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_predict2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_EM_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_EM_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_setClustersNumber(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_setCovarianceMatrixType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_trainE(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_trainEM(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_EM_trainM(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_EM_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_KNearest_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_findNearest(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_getAlgorithmType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_getDefaultK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_KNearest_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_getEmax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_getIsClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_KNearest_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_KNearest_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_setAlgorithmType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_setDefaultK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_setEmax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_setIsClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_KNearest_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_KNearest_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_LogisticRegression_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_LogisticRegression_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_getIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_getLearningRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_getMiniBatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_getRegularization(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_getTrainMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_get_learnt_thetas(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_LogisticRegression_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_LogisticRegression_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_setIterations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_setLearningRate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_setMiniBatchSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_setRegularization(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_setTrainMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_LogisticRegression_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_LogisticRegression_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_NormalBayesClassifier_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_NormalBayesClassifier_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_predictProb(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_NormalBayesClassifier_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_NormalBayesClassifier_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_NormalBayesClassifier_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_NormalBayesClassifier_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_ParamGrid_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ParamGrid_get_logStep(_self), do: :erlang.nif_error(:undefined)
  def ml_ParamGrid_set_logStep(_self, _prop), do: :erlang.nif_error(:undefined)
  def ml_ParamGrid_get_maxVal(_self), do: :erlang.nif_error(:undefined)
  def ml_ParamGrid_set_maxVal(_self, _prop), do: :erlang.nif_error(:undefined)
  def ml_ParamGrid_get_minVal(_self), do: :erlang.nif_error(:undefined)
  def ml_ParamGrid_set_minVal(_self, _prop), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_RTrees_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getActiveVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getCVFolds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getCalculateVarImportance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_RTrees_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getMaxCategories(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getOOBError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getPriors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getUse1SERule(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getVarImportance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_getVotes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_RTrees_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_RTrees_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setActiveVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setCVFolds(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setCalculateVarImportance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setMaxCategories(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setMinSampleCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setPriors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setRegressionAccuracy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setTruncatePrunedTree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setUse1SERule(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_setUseSurrogates(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_RTrees_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_RTrees_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getC(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getClassWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getCoef0(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getDecisionFunction(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getDefaultGridPtr_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getDegree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getKernelType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getNu(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getP(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getSupportVectors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getUncompressedSupportVectors(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setC(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setClassWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setCoef0(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setDegree(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setKernel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setNu(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setP(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_setType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVM_trainAuto(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVMSGD_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVMSGD_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getInitialStepSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getMarginRegularization(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getMarginType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getShift(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getStepDecreasingPower(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getSvmsgdType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_getWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_load_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVMSGD_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVMSGD_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_setInitialStepSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_setMarginRegularization(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_setMarginType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_setOptimalParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_setStepDecreasingPower(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_setSvmsgdType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_setTermCriteria(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_SVMSGD_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVMSGD_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_StatModel_calcError(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_StatModel_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_StatModel_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_StatModel_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_StatModel_getVarCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_StatModel_isClassifier(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_StatModel_isTrained(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_StatModel_predict(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_StatModel_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_StatModel_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_StatModel_train(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_StatModel_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getCatCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getCatMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getCatOfs(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getClassLabels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getDefaultSubstValues(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getLayout(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getMissing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getNAllVars(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getNSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getNTestSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getNTrainSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getNVars(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getNames(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getNormCatResponses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getResponseType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getResponses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getSample(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getSampleWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getSubMatrix_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getSubVector_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTestNormCatResponses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTestResponses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTestSampleIdx(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTestSampleWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTestSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTrainNormCatResponses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTrainResponses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTrainSampleIdx(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTrainSampleWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getTrainSamples(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getValues(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getVarIdx(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getVarSymbolFlags(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_getVarType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_setTrainTestSplit(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_setTrainTestSplitRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ml_TrainData_shuffleTrainTest(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_Device(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_OpenCLVersion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_OpenCL_C_Version(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_addressBits(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_available(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_compilerAvailable(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_deviceVersionMajor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_deviceVersionMinor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_doubleFPConfig(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_driverVersion(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_endianLittle(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_errorCorrectionSupport(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_executionCapabilities(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_extensions(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_getDefault_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_globalMemCacheLineSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_globalMemCacheSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_globalMemCacheType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_globalMemSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_halfFPConfig(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_hasFP16(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_hasFP64(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_hostUnifiedMemory(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_image2DMaxHeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_image2DMaxWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_image3DMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_image3DMaxHeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_image3DMaxWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_imageFromBufferSupport(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_imageMaxArraySize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_imageMaxBufferSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_imageSupport(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_intelSubgroupsSupport(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_isAMD(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_isExtensionSupported(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_isIntel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_isNVidia(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_linkerAvailable(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_localMemSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_localMemType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxClockFrequency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxComputeUnits(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxConstantArgs(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxConstantBufferSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxMemAllocSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxParameterSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxReadImageArgs(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxSamplers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxWorkGroupSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxWorkItemDims(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_maxWriteImageArgs(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_memBaseAddrAlign(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_name(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_nativeVectorWidthChar(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_nativeVectorWidthDouble(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_nativeVectorWidthFloat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_nativeVectorWidthHalf(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_nativeVectorWidthInt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_nativeVectorWidthLong(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_nativeVectorWidthShort(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_preferredVectorWidthChar(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_preferredVectorWidthDouble(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_preferredVectorWidthFloat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_preferredVectorWidthHalf(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_preferredVectorWidthInt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_preferredVectorWidthLong(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_preferredVectorWidthShort(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_printfBufferSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_profilingTimerResolution(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_singleFPConfig(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_type(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_vendorID(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_vendorName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_ocl_Device_version(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_phase_unwrapping_HistogramPhaseUnwrapping_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_phase_unwrapping_HistogramPhaseUnwrapping_getInverseReliabilityMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_phase_unwrapping_HistogramPhaseUnwrapping_Params_HistogramPhaseUnwrapping_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_get_height(_self), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_set_height(_self, _prop), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_get_histThresh(_self), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_set_histThresh(_self, _prop), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_get_nbrOfLargeBins(_self), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_set_nbrOfLargeBins(_self, _prop), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_get_nbrOfSmallBins(_self), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_set_nbrOfSmallBins(_self, _prop), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_get_width(_self), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_Params_set_width(_self, _prop), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_PhaseUnwrapping_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_PhaseUnwrapping_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_PhaseUnwrapping_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_PhaseUnwrapping_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_PhaseUnwrapping_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_phase_unwrapping_PhaseUnwrapping_unwrapPhaseMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_PhaseUnwrapping_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_Plot2d_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_Plot2d_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_Plot2d_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_Plot2d_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_render(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_Plot2d_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setGridLinesNumber(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setInvertOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setMaxX(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setMaxY(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setMinX(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setMinY(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setNeedPlotLine(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPlotAxisColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPlotBackgroundColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPlotGridColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPlotLineColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPlotLineWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPlotSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPlotTextColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setPointIdxToPrint(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setShowGrid(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_plot_Plot2d_setShowText(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_Plot2d_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_ICP_ICP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_ICP_registerModelToScene(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_PPF3DDetector_PPF3DDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_PPF3DDetector_match(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_PPF3DDetector_trainModel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_Pose3D_Pose3D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_Pose3D_appendPose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_Pose3D_printPose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_Pose3D_updatePose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_ppf_match_3d_Pose3D_updatePoseQuat(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_alpha(_self), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_angle(_self), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_modelIndex(_self), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_numVotes(_self), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_pose(_self), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_q(_self), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_residual(_self), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_Pose3D_get_t(_self), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityBRISQUE_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityBRISQUE_computeFeatures_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityBRISQUE_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityBase_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityBase_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityBase_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityBase_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityBase_getQualityMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityBase_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityBase_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityBase_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityGMSD_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityGMSD_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityGMSD_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityGMSD_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityMSE_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityMSE_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityMSE_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityMSE_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityPSNR_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityPSNR_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityPSNR_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityPSNR_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityPSNR_getMaxPixelValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualityPSNR_setMaxPixelValue(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualitySSIM_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualitySSIM_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualitySSIM_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_quality_QualitySSIM_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_rapid_GOSTracker_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_rapid_OLSTracker_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_rapid_Rapid_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_Tracker_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_rapid_Tracker_clearState(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_rapid_Tracker_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_Tracker_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_Tracker_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_Tracker_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_Tracker_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_Tracker_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_Map_compose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_Map_inverseMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_Map_inverseWarp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_Map_scale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_Map_warp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapAffine_MapAffine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapAffine_compose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapAffine_getLinTr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapAffine_getShift(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapAffine_inverseMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapAffine_inverseWarp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapAffine_scale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapProjec_MapProjec(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapProjec_compose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapProjec_getProjTr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapProjec_inverseMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapProjec_inverseWarp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapProjec_normalize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapProjec_scale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapShift_MapShift(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapShift_compose(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapShift_getShift(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapShift_inverseMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapShift_inverseWarp(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapShift_scale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapTypeCaster_toAffine_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapTypeCaster_toProjec_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapTypeCaster_toShift_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_Mapper_calculate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_Mapper_getMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradAffine_MapperGradAffine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradAffine_calculate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradAffine_getMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradEuclid_MapperGradEuclid(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradEuclid_calculate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradEuclid_getMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradProj_MapperGradProj(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradProj_calculate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradProj_getMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradShift_MapperGradShift(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradShift_calculate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradShift_getMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradSimilar_MapperGradSimilar(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradSimilar_calculate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperGradSimilar_getMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperPyramid_MapperPyramid(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperPyramid_calculate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_reg_MapperPyramid_getMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_MapperPyramid_get_numIterPerScale_(_self), do: :erlang.nif_error(:undefined)
  def reg_MapperPyramid_set_numIterPerScale_(_self, _prop), do: :erlang.nif_error(:undefined)
  def reg_MapperPyramid_get_numLev_(_self), do: :erlang.nif_error(:undefined)
  def reg_MapperPyramid_set_numLev_(_self, _prop), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_DepthCleaner_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_DepthCleaner_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_DepthCleaner_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_getDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_getMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_getWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_initialize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_DepthCleaner_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_DepthCleaner_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_setDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_setMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_DepthCleaner_setWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_DepthCleaner_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getAngleThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getKernelSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getMaxDistDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getSigmaDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getSigmaSpatial(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_getTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_prepareFrameCache(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setAngleThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setKernelSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setMaxDistDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setSigmaDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setSigmaSpatial(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_FastICPOdometry_setTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getMaxDepthDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getMaxPointsPart(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getMaxRotation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getMaxTranslation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getMinDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getNormalsComputer(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_getTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_prepareFrameCache(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setMaxDepthDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setMaxPointsPart(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setMaxRotation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setMaxTranslation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setMinDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_ICPOdometry_setTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_DEFAULT_MAX_DEPTH(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_DEFAULT_MAX_DEPTH_DIFF(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_DEFAULT_MAX_POINTS_PART(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_DEFAULT_MAX_ROTATION(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_DEFAULT_MAX_TRANSLATION(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_DEFAULT_MIN_DEPTH(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_Odometry_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_compute2(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_Odometry_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_getCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_Odometry_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_getTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_prepareFrameCache(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_Odometry_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_Odometry_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_setCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_Odometry_setTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_Odometry_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_OdometryFrame_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_OdometryFrame_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_OdometryFrame_releasePyramids(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramidCloud(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramidDepth(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramidImage(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramidMask(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramidNormals(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramidNormalsMask(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramidTexturedMask(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramid_dI_dx(_self), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_get_pyramid_dI_dy(_self), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdFrame_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdFrame_release(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdFrame_get_ID(_self), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdFrame_get_depth(_self), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdFrame_get_image(_self), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdFrame_get_mask(_self), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdFrame_get_normals(_self), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getMaxDepthDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getMaxPointsPart(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getMaxRotation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getMaxTranslation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getMinDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getMinGradientMagnitudes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getNormalsComputer(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_getTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_prepareFrameCache(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setMaxDepthDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setMaxPointsPart(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setMaxRotation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setMaxTranslation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setMinDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setMinGradientMagnitudes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdICPOdometry_setTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdNormals_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdNormals_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_getCols(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdNormals_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_getDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_getK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_getMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_getRows(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_getWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_initialize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdNormals_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdNormals_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_setCols(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_setDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_setK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_setMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_setRows(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdNormals_setWindowSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdNormals_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getMaxDepthDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getMaxPointsPart(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getMaxRotation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getMaxTranslation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getMinDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getMinGradientMagnitudes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_getTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_prepareFrameCache(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setCameraMatrix(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setIterationCounts(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setMaxDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setMaxDepthDiff(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setMaxPointsPart(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setMaxRotation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setMaxTranslation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setMinDepth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setMinGradientMagnitudes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdOdometry_setTransformType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdPlane_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdPlane_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_getBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdPlane_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_getMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_getMinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_getSensorErrorA(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_getSensorErrorB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_getSensorErrorC(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_getThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdPlane_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdPlane_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_setBlockSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_setMethod(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_setMinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_setSensorErrorA(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_setSensorErrorB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_setSensorErrorC(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rgbd_RgbdPlane_setThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdPlane_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_computeSaliency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_getImageHeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_getImageWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_init(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_setImageHeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_setImageWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_MotionSaliencyBinWangApr2014_setImagesize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_computeSaliency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_getBase(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_getNSS(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_getW(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_getobjectnessValues(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_setBBResDir(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_setBase(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_setNSS(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_setTrainingPath(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_setW(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_ObjectnessBING_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_Saliency_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_Saliency_computeSaliency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_Saliency_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_Saliency_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_Saliency_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_Saliency_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_Saliency_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliency_computeBinaryMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencyFineGrained_computeSaliency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencyFineGrained_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencySpectralResidual_computeSaliency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencySpectralResidual_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencySpectralResidual_getImageHeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencySpectralResidual_getImageWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencySpectralResidual_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencySpectralResidual_setImageHeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_saliency_StaticSaliencySpectralResidual_setImageWidth(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_IntelligentScissorsMB(_opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_applyImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_applyImageFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_buildMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_getContour(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_setEdgeFeatureCannyParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_setEdgeFeatureZeroCrossingParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_setGradientMagnitudeMaxLimit(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def segmentation_segmentation_IntelligentScissorsMB_setWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_MatchQuasiDense_MatchQuasiDense(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_MatchQuasiDense_apply(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_MatchQuasiDense_get_corr(_self), do: :erlang.nif_error(:undefined)
  def stereo_MatchQuasiDense_set_corr(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_MatchQuasiDense_get_p0(_self), do: :erlang.nif_error(:undefined)
  def stereo_MatchQuasiDense_set_p0(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_MatchQuasiDense_get_p1(_self), do: :erlang.nif_error(:undefined)
  def stereo_MatchQuasiDense_set_p1(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_borderX(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_borderX(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_borderY(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_borderY(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_corrWinSizeX(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_corrWinSizeX(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_corrWinSizeY(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_corrWinSizeY(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_correlationThreshold(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_correlationThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_disparityGradient(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_disparityGradient(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_gftMaxNumFeatures(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_gftMaxNumFeatures(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_gftMinSeperationDist(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_gftMinSeperationDist(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_gftQualityThres(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_gftQualityThres(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_lkPyrLvl(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_lkPyrLvl(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_lkTemplateSize(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_lkTemplateSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_lkTermParam1(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_lkTermParam1(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_lkTermParam2(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_lkTermParam2(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_neighborhoodSize(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_neighborhoodSize(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_get_textrureThreshold(_self), do: :erlang.nif_error(:undefined)
  def stereo_PropagationParameters_set_textrureThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_getDenseMatches(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_getDisparity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_getMatch(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_getSparseMatches(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_loadParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_stereo_QuasiDenseStereo_saveParameters(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_QuasiDenseStereo_get_Param(_self), do: :erlang.nif_error(:undefined)
  def stereo_QuasiDenseStereo_set_Param(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_GrayCodePattern_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_GrayCodePattern_getImagesForShadowMasks(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_GrayCodePattern_getNumberOfPatternImages(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_GrayCodePattern_getProjPixel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_GrayCodePattern_setBlackThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_GrayCodePattern_setWhiteThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_SinusoidalPattern_computeDataModulationTerm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_SinusoidalPattern_computePhaseMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_SinusoidalPattern_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_SinusoidalPattern_findProCamMatches(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_SinusoidalPattern_unwrapPhaseMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_SinusoidalPattern_Params_SinusoidalPattern_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_height(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_height(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_horizontal(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_horizontal(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_methodId(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_methodId(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_nbrOfPeriods(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_nbrOfPeriods(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_nbrOfPixelsBetweenMarkers(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_nbrOfPixelsBetweenMarkers(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_setMarkers(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_setMarkers(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_shiftValue(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_shiftValue(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_get_width(_self), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_Params_set_width(_self, _prop), do: :erlang.nif_error(:undefined)
  def structured_light_StructuredLightPattern_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_StructuredLightPattern_decode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_StructuredLightPattern_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_structured_light_StructuredLightPattern_generate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_StructuredLightPattern_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_StructuredLightPattern_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_StructuredLightPattern_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_StructuredLightPattern_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_ERFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_ERFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_ERFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_ERFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_ERFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_ERFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_OCRBeamSearchDecoder_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_OCRBeamSearchDecoder_run(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_OCRHMMDecoder_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_OCRHMMDecoder_run(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_OCRTesseract_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_OCRTesseract_run(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_OCRTesseract_setWhiteList(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_TextDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_TextDetectorCNN_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_text_TextDetectorCNN_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_utils_ClassWithKeywordProperties_ClassWithKeywordProperties(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_ClassWithKeywordProperties_get_except(_self), do: :erlang.nif_error(:undefined)
  def utils_ClassWithKeywordProperties_get_lambda(_self), do: :erlang.nif_error(:undefined)
  def utils_ClassWithKeywordProperties_set_lambda(_self, _prop), do: :erlang.nif_error(:undefined)
  def utils_nested_utils_nested_OriginalClassName_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_utils_nested_OriginalClassName_getFloatParam(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_utils_nested_OriginalClassName_getIntParam(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_utils_nested_OriginalClassName_originalName_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_utils_nested_OriginalClassName_Params_OriginalClassName_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_OriginalClassName_Params_get_float_value(_self), do: :erlang.nif_error(:undefined)
  def utils_nested_OriginalClassName_Params_set_float_value(_self, _prop), do: :erlang.nif_error(:undefined)
  def utils_nested_OriginalClassName_Params_get_int_value(_self), do: :erlang.nif_error(:undefined)
  def utils_nested_OriginalClassName_Params_set_int_value(_self, _prop), do: :erlang.nif_error(:undefined)
  def wechat_qrcode_wechat_qrcode_WeChatQRCode_WeChatQRCode(_opts \\ []), do: :erlang.nif_error(:undefined)
  def wechat_qrcode_wechat_qrcode_WeChatQRCode_detectAndDecode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def wechat_qrcode_wechat_qrcode_WeChatQRCode_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def wechat_qrcode_wechat_qrcode_WeChatQRCode_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_AffineFeature2D_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BEBLID_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BEBLID_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BEBLID_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BEBLID_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BoostDesc_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BoostDesc_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BoostDesc_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BoostDesc_getUseScaleOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BoostDesc_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BoostDesc_setUseScaleOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BriefDescriptorExtractor_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BriefDescriptorExtractor_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BriefDescriptorExtractor_getDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BriefDescriptorExtractor_getUseOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BriefDescriptorExtractor_setDescriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_BriefDescriptorExtractor_setUseOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getH(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getInterpolation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getQHist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getQRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getQTheta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_getUseOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setH(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setInterpolation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setQHist(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setQRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setQTheta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_DAISY_setUseOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_getNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_getOrientationNormalized(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_getPatternScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_getScaleNormalized(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_setNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_setOrientationNormalized(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_setPatternScale(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_FREAK_setScaleNormalized(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_getCornThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_getDOGThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_getMaxCorners(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_getNumLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_getNumOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_setCornThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_setDOGThresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_setMaxCorners(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_setNumLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_HarrisLaplaceFeatureDetector_setNumOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_getBytes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_getHalfSSDsize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_getRotationInvariance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_getSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_setBytes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_setHalfSSDsize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_setRotationInvariance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LATCH_setSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LUCID_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LUCID_getBlurKernel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LUCID_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LUCID_getLucidKernel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LUCID_setBlurKernel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_LUCID_setLucidKernel(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getComputeOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getKNN(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getNScales(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getNmsRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getNmsScaleRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getPatchRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getSearchAreaRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_getThSaliency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setComputeOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setKNN(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setNScales(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setNmsRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setNmsScaleRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setPatchRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setSearchAreaRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_MSDDetector_setThSaliency(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_computeSignature(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_computeSignatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_drawSignature_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_generateInitPoints_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getClusterMinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getDistanceFunction(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getDropThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getGrayscaleBits(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getInitSeedCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getInitSeedIndexes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getIterationCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getJoiningDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getMaxClustersCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getSampleCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getSamplingPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWeightA(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWeightB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWeightContrast(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWeightEntropy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWeightL(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWeightX(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWeightY(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_getWindowRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setClusterMinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setDistanceFunction(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setDropThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setGrayscaleBits(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setInitSeedIndexes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setIterationCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setJoiningDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setMaxClustersCount(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setSamplingPoints(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setTranslation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setTranslations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeight(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeightA(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeightB(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeightContrast(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeightEntropy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeightL(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeightX(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeightY(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWeights(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignatures_setWindowRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignaturesSQFD_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignaturesSQFD_computeQuadraticFormDistance(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignaturesSQFD_computeQuadraticFormDistances(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_PCTSignaturesSQFD_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignaturesSQFD_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignaturesSQFD_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignaturesSQFD_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignaturesSQFD_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignaturesSQFD_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_getExtended(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_getHessianThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_getNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_getNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_getUpright(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_setExtended(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_setHessianThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_setNOctaveLayers(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_setNOctaves(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_SURF_setUpright(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_getLineThresholdBinarized(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_getLineThresholdProjected(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_getMaxSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_getResponseThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_getSuppressNonmaxSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_setLineThresholdBinarized(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_setLineThresholdProjected(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_setMaxSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_setResponseThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_StarDetector_setSuppressNonmaxSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_getMaxAreaRelative(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_getMinArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_getNScales(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_setMaxAreaRelative(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_setMinArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_setNScales(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TBMR_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TEBLID_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_TEBLID_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_compute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_defaultNorm(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_descriptorSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_descriptorType(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_detectAndCompute(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_getScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_getSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_getUseNormalizeDescriptor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_getUseNormalizeImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_getUseScaleOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_setScaleFactor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_setSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_setUseNormalizeDescriptor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_setUseNormalizeImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_xfeatures2d_VGG_setUseScaleOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_AdaptiveManifoldFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_AdaptiveManifoldFilter_collectGarbage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_AdaptiveManifoldFilter_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_AdaptiveManifoldFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_AdaptiveManifoldFilter_filter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_AdaptiveManifoldFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_AdaptiveManifoldFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_AdaptiveManifoldFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_AdaptiveManifoldFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ContourFitting_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ContourFitting_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ContourFitting_estimateTransformation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ContourFitting_getCtrSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ContourFitting_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ContourFitting_getFDSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ContourFitting_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ContourFitting_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ContourFitting_setCtrSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ContourFitting_setFDSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ContourFitting_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DTFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DTFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DTFilter_filter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DTFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DTFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DTFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DTFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DisparityFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DisparityFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityFilter_filter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DisparityFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DisparityFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DisparityFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_DisparityFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_getConfidenceMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_getDepthDiscontinuityRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_getLRCthresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_getLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_getROI(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_getSigmaColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_setDepthDiscontinuityRadius(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_setLRCthresh(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_setLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_DisparityWLSFilter_setSigmaColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_getFGSLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_getFGSSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_getK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_getLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_getSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_getUsePostProcessing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_setCostMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_setFGSLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_setFGSSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_setK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_setLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_setSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeAwareInterpolator_setUsePostProcessing(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeBoxes_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeBoxes_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getBeta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getBoundingBoxes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getClusterMinMag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeBoxes_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getEdgeMergeThr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getEdgeMinMag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getEta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getKappa(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getMaxAspectRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getMaxBoxes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getMinBoxArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_getMinScore(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeBoxes_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeBoxes_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setBeta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setClusterMinMag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setEdgeMergeThr(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setEdgeMinMag(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setEta(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setGamma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setKappa(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setMaxAspectRatio(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setMaxBoxes(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setMinBoxArea(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeBoxes_setMinScore(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeBoxes_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_detectEdges(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_detectEllipses(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_detectLines(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_getEdgeImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_getGradientImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_getSegmentIndicesOfLines(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_getSegments(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_setParams(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_EdgeDrawing_Params_EdgeDrawing_Params(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_AnchorThresholdValue(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_AnchorThresholdValue(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_EdgeDetectionOperator(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_EdgeDetectionOperator(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_GradientThresholdValue(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_GradientThresholdValue(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_LineFitErrorThreshold(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_LineFitErrorThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_MaxDistanceBetweenTwoLines(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_MaxDistanceBetweenTwoLines(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_MaxErrorThreshold(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_MaxErrorThreshold(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_MinLineLength(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_MinLineLength(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_MinPathLength(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_MinPathLength(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_NFAValidation(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_NFAValidation(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_PFmode(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_PFmode(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_ScanInterval(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_ScanInterval(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_Sigma(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_Sigma(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_get_SumFlag(_self), do: :erlang.nif_error(:undefined)
  def ximgproc_EdgeDrawing_Params_set_SumFlag(_self, _prop), do: :erlang.nif_error(:undefined)
  def ximgproc_FastBilateralSolverFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastBilateralSolverFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_FastBilateralSolverFilter_filter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastBilateralSolverFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastBilateralSolverFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastBilateralSolverFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastBilateralSolverFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastGlobalSmootherFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastGlobalSmootherFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_FastGlobalSmootherFilter_filter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastGlobalSmootherFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastGlobalSmootherFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastGlobalSmootherFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastGlobalSmootherFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastLineDetector_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_FastLineDetector_detect(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_FastLineDetector_drawSegments(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastLineDetector_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastLineDetector_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastLineDetector_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastLineDetector_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastLineDetector_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GuidedFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GuidedFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_GuidedFilter_filter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GuidedFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GuidedFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GuidedFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GuidedFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RFFeatureGetter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RFFeatureGetter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RFFeatureGetter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RFFeatureGetter_getFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RFFeatureGetter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RFFeatureGetter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RFFeatureGetter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getFGSLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getFGSSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getMaxFlow(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getModelIter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getRefineModels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getSuperpixelMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getSuperpixelNNCnt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getSuperpixelRuler(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getSuperpixelSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getUseGlobalSmootherFilter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_getUseVariationalRefinement(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setAlpha(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setCostMap(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setFGSLambda(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setFGSSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setMaxFlow(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setModelIter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setRefineModels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setSuperpixelMode(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setSuperpixelNNCnt(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setSuperpixelRuler(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setSuperpixelSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setUseGlobalSmootherFilter(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RICInterpolator_setUseVariationalRefinement(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RidgeDetectionFilter_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RidgeDetectionFilter_create_static(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RidgeDetectionFilter_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RidgeDetectionFilter_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_RidgeDetectionFilter_getRidgeFilteredImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RidgeDetectionFilter_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RidgeDetectionFilter_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RidgeDetectionFilter_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ScanSegment_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ScanSegment_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ScanSegment_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ScanSegment_getLabelContourMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ScanSegment_getLabels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ScanSegment_getNumberOfSuperpixels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_ScanSegment_iterate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ScanSegment_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ScanSegment_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ScanSegment_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SparseMatchInterpolator_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SparseMatchInterpolator_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SparseMatchInterpolator_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SparseMatchInterpolator_interpolate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SparseMatchInterpolator_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SparseMatchInterpolator_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SparseMatchInterpolator_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_StructuredEdgeDetection_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_StructuredEdgeDetection_computeOrientation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_StructuredEdgeDetection_detectEdges(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_StructuredEdgeDetection_edgesNms(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_StructuredEdgeDetection_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_StructuredEdgeDetection_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_StructuredEdgeDetection_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_StructuredEdgeDetection_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_StructuredEdgeDetection_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelLSC_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelLSC_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelLSC_enforceLabelConnectivity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelLSC_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelLSC_getLabelContourMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelLSC_getLabels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelLSC_getNumberOfSuperpixels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelLSC_iterate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelLSC_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelLSC_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelLSC_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSEEDS_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSEEDS_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSEEDS_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSEEDS_getLabelContourMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSEEDS_getLabels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSEEDS_getNumberOfSuperpixels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSEEDS_iterate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSEEDS_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSEEDS_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSEEDS_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSLIC_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSLIC_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSLIC_enforceLabelConnectivity(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSLIC_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSLIC_getLabelContourMask(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSLIC_getLabels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSLIC_getNumberOfSuperpixels(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_ximgproc_SuperpixelSLIC_iterate(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSLIC_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSLIC_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_SuperpixelSLIC_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_GraphSegmentation_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_GraphSegmentation_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_GraphSegmentation_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_GraphSegmentation_getK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_GraphSegmentation_getMinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_GraphSegmentation_getSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_GraphSegmentation_processImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_GraphSegmentation_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_GraphSegmentation_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_GraphSegmentation_setK(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_GraphSegmentation_setMinSize(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_GraphSegmentation_setSigma(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_GraphSegmentation_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_addGraphSegmentation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_addImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_addStrategy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentation_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_clearGraphSegmentations(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_clearImages(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_clearStrategies(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentation_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentation_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_process(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentation_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentation_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_setBaseImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_switchToSelectiveSearchFast(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_switchToSelectiveSearchQuality(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentation_switchToSingleStrategy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentation_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentationStrategy_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentationStrategy_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentationStrategy_get(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentationStrategy_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentationStrategy_merge(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentationStrategy_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentationStrategy_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentationStrategy_setImage(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_SelectiveSearchSegmentationStrategy_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentationStrategyMultiple_addStrategy(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_ximgproc_segmentation_SelectiveSearchSegmentationStrategyMultiple_clearStrategies(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_GrayworldWB_getSaturationThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_GrayworldWB_setSaturationThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_LearningBasedWB_extractSimpleFeatures(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_LearningBasedWB_getHistBinNum(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_LearningBasedWB_getRangeMaxVal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_LearningBasedWB_getSaturationThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_LearningBasedWB_setHistBinNum(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_LearningBasedWB_setRangeMaxVal(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_LearningBasedWB_setSaturationThreshold(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_getInputMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_getInputMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_getOutputMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_getOutputMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_getP(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_setInputMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_setInputMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_setOutputMax(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_setOutputMin(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_SimpleWB_setP(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_getContrast(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_getSaturation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_getSigmaColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_getSigmaSpace(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_setContrast(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_setSaturation(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_setSigmaColor(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_TonemapDurand_setSigmaSpace(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_xphoto_WhiteBalancer_balanceWhite(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_WhiteBalancer_clear(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_WhiteBalancer_empty(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_WhiteBalancer_getDefaultName(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_WhiteBalancer_read(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_WhiteBalancer_save(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_WhiteBalancer_write(_self, _opts \\ []), do: :erlang.nif_error(:undefined)
  def ipp_getIppVersion(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ipp_setUseIPP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ipp_setUseIPP_NotExact(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ipp_useIPP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ipp_useIPP_NotExact(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_copyMatAndDumpNamedArguments(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpBool(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpCString(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpDouble(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpFloat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpInputArray(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpInputArrayOfArrays(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpInputOutputArray(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpInputOutputArrayOfArrays(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpInt(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpInt64(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpRange(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpRotatedRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpSizeT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpString(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpTermCriteria(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpVec2i(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpVectorOfDouble(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpVectorOfInt(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_dumpVectorOfRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_generateVectorOfInt(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_generateVectorOfMat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_generateVectorOfRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testAsyncArray(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testAsyncException(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testOverloadResolution(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testOverwriteNativeMethod(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testRaiseGeneralException(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testReservedKeywordConversion(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testRotatedRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_testRotatedRectVector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_ExportClassName_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_ExportClassName_originalName(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_OriginalClassName_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_OriginalClassName_originalName(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_nested_testEchoBooleanFunction(_opts \\ []), do: :erlang.nif_error(:undefined)
  def utils_fs_getCacheDirectoryForDownloads(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_BestOf2NearestMatcher_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_Blender_createDefault(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_ExposureCompensator_createDefault(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_SeamFinder_createDefault(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_Timelapser_createDefault(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_calibrateRotatingCamera(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_computeImageFeatures(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_computeImageFeatures2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_createLaplacePyr(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_createLaplacePyrGpu(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_createWeightMap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_focalsFromHomography(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_leaveBiggestComponent(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_matchesGraphAsString(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_normalizeUsingWeightMap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_overlapRoi(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_restoreImageFromLaplacePyr(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_restoreImageFromLaplacePyrGpu(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_resultRoi(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_resultRoiIntersection(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_resultTl(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_selectRandomSubset(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_stitchingLogLevel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detail_waveCorrect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_CascadeClassifier_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_DescriptorMatcher_createBFMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Event_elapsedTime(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_FastFeatureDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_GpuMat_defaultAllocator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_GpuMat_setDefaultAllocator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_HOG_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ORB_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_SURF_CUDA_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoBeliefPropagation_estimateRecommendedParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_StereoConstantSpaceBP_estimateRecommendedParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_Stream_Null(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TargetArchs_has(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TargetArchs_hasBin(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TargetArchs_hasEqualOrGreater(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TargetArchs_hasEqualOrGreaterBin(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TargetArchs_hasEqualOrGreaterPtx(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TargetArchs_hasEqualOrLessPtx(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_TargetArchs_hasPtx(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_abs(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_absSum(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_absdiff(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_add(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_addWeighted(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_alphaComp(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_bilateralFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_bitwise_and(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_bitwise_not(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_bitwise_or(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_bitwise_xor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_blendLinear(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_buildWarpAffineMaps(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_buildWarpPerspectiveMaps(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_calcAbsSum(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_calcHist(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_calcNorm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_calcNormDiff(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_calcSqrSum(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_calcSum(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cartToPolar(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_compare(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_connectedComponents(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_connectedComponentsWithAlgorithm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_convertSpatialMoments(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_copyMakeBorder(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_countNonZero(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createBackgroundSubtractorMOG(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createBackgroundSubtractorMOG2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createBoxFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createBoxMaxFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createBoxMinFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createCLAHE(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createCannyEdgeDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createColumnSumFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createContinuous(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createConvolution(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createDFT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createDerivFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createDisparityBilateralFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createGaussianFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createGeneralizedHoughBallard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createGeneralizedHoughGuil(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createGoodFeaturesToTrackDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createGpuMatFromCudaMemory(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createHarrisCorner(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createHoughCirclesDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createHoughLinesDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createHoughSegmentDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createLaplacianFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createLinearFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createLookUpTable(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createMedianFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createMinEigenValCorner(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createMorphologyFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createRowSumFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createScharrFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createSeparableLinearFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createSobelFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createStereoBM(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createStereoBeliefPropagation(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createStereoConstantSpaceBP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createStereoSGM(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_createTemplateMatching(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_cvtColor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_demosaicing(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_dft(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_divide(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_drawColorDisp(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_ensureSizeIsEnough(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_equalizeHist(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_evenLevels(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_exp(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_fastNlMeansDenoising(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_fastNlMeansDenoisingColored(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_findMinMax(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_findMinMaxLoc(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_flip(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_gammaCorrection(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_gemm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_getCudaEnabledDeviceCount(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_getDevice(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_histEven(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_histRange(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_inRange(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_integral(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_log(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_lshift(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_magnitude(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_magnitudeSqr(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_max(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_meanShiftFiltering(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_meanShiftProc(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_meanShiftSegmentation(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_meanStdDev(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_merge(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_min(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_minMax(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_minMaxLoc(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_moments(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_mulAndScaleSpectrums(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_mulSpectrums(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_multiply(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_nonLocalMeans(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_norm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_normalize(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_numMoments(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_phase(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_polarToCart(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_pow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_printCudaDeviceInfo(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_printShortCudaDeviceInfo(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_pyrDown(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_pyrUp(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_rectStdDev(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_reduce(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_registerPageLocked(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_remap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_reprojectImageTo3D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_resetDevice(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_resize(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_rotate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_rshift(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_setBufferPoolConfig(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_setBufferPoolUsage(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_setDevice(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_spatialMoments(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_split(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_sqr(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_sqrIntegral(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_sqrSum(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_sqrt(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_subtract(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_sum(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_threshold(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_transpose(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_unregisterPageLocked(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_warpAffine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_warpPerspective(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cuda_wrapStream(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_Device_getDefault(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_finish(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_haveAmdBlas(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_haveAmdFft(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_haveOpenCL(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_setUseOpenCL(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ocl_useOpenCL(_opts \\ []), do: :erlang.nif_error(:undefined)
  def parallel_setParallelForBackend(_opts \\ []), do: :erlang.nif_error(:undefined)
  def samples_addSamplesDataSearchPath(_opts \\ []), do: :erlang.nif_error(:undefined)
  def samples_addSamplesDataSearchSubDirectory(_opts \\ []), do: :erlang.nif_error(:undefined)
  def samples_findFile(_opts \\ []), do: :erlang.nif_error(:undefined)
  def samples_findFileOrKeep(_opts \\ []), do: :erlang.nif_error(:undefined)
  def intensity_transform_BIMEF(_opts \\ []), do: :erlang.nif_error(:undefined)
  def intensity_transform_BIMEF2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def intensity_transform_autoscaling(_opts \\ []), do: :erlang.nif_error(:undefined)
  def intensity_transform_contrastStretching(_opts \\ []), do: :erlang.nif_error(:undefined)
  def intensity_transform_gammaCorrection(_opts \\ []), do: :erlang.nif_error(:undefined)
  def intensity_transform_logTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ANN_MLP_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ANN_MLP_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_Boost_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_Boost_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_DTrees_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_DTrees_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_EM_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_EM_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_KNearest_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_KNearest_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_LogisticRegression_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_LogisticRegression_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_NormalBayesClassifier_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_NormalBayesClassifier_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_ParamGrid_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_RTrees_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_RTrees_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVMSGD_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVMSGD_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_getDefaultGridPtr(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_SVM_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_TrainData_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_TrainData_getSubMatrix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ml_TrainData_getSubVector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def phase_unwrapping_HistogramPhaseUnwrapping_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def plot_Plot2d_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityBRISQUE_compute(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityBRISQUE_computeFeatures(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityBRISQUE_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityGMSD_compute(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityGMSD_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityMSE_compute(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityMSE_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityPSNR_compute(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualityPSNR_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualitySSIM_compute(_opts \\ []), do: :erlang.nif_error(:undefined)
  def quality_QualitySSIM_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_MapTypeCaster_toAffine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_MapTypeCaster_toProjec(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reg_MapTypeCaster_toShift(_opts \\ []), do: :erlang.nif_error(:undefined)
  def signal_resampleSignal(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_addNoisePC(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_computeNormalsPC3d(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_getRandomPose(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_loadPLYSimple(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_samplePCByQuantization(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_transformPCPose(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_writePLY(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ppf_match_3d_writePLYVisibleNormals(_opts \\ []), do: :erlang.nif_error(:undefined)

  def dnn_NMSBoxes(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_NMSBoxesBatched(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_softNMSBoxes(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_NMSBoxesRotated(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_Net_readFromModelOptimizer(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_blobFromImage(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_blobFromImageWithParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_blobFromImages(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_blobFromImagesWithParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_getAvailableTargets(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_imagesFromBlob(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNet(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNetFromCaffe(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNetFromDarknet(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNetFromModelOptimizer(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNetFromONNX(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNetFromTFLite(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNetFromTensorflow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readNetFromTorch(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readTensorFromONNX(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_readTorchBlob(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_shrinkCaffeModel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_writeTextGraph(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dnn_superres_DnnSuperResImpl_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT02D_FL_process(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT02D_FL_process_float(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT02D_components(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT02D_inverseFT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT02D_iteration(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT02D_process(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT12D_components(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT12D_createPolynomMatrixHorizontal(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT12D_createPolynomMatrixVertical(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT12D_inverseFT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT12D_polynomial(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_FT12D_process(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_createKernel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_createKernel1(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_filter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ft_inpaint(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hfs_HfsSegment_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_AverageHash_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_BlockMeanHash_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_ColorMomentHash_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_MarrHildrethHash_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_PHash_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_RadialVarianceHash_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_averageHash(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_blockMeanHash(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_colorMomentHash(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_marrHildrethHash(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_pHash(_opts \\ []), do: :erlang.nif_error(:undefined)
  def img_hash_radialVarianceHash(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_BinaryDescriptor_createBinaryDescriptor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_line_descriptor_LSDDetector_LSDDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_createLSDDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_LSDDetector_createLSDDetectorWithParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_drawKeylines(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line_descriptor_drawLineMatches(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_MotionSaliencyBinWangApr2014_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_ObjectnessBING_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_StaticSaliencyFineGrained_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def saliency_StaticSaliencySpectralResidual_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_OCRBeamSearchDecoder_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_OCRHMMDecoder_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_OCRTesseract_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_TextDetectorCNN_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_computeNMChannels(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_createERFilterNM1(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_createERFilterNM2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_createOCRHMMTransitionsTable(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_detectRegions(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_detectTextSWT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_erGrouping(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_loadClassifierNM1(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_loadClassifierNM2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_loadOCRBeamSearchClassifierCNN(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_loadOCRHMMClassifier(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_loadOCRHMMClassifierCNN(_opts \\ []), do: :erlang.nif_error(:undefined)
  def text_loadOCRHMMClassifierNM(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getBackendName(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getBackends(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getCameraBackendPluginVersion(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getCameraBackends(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getStreamBackendPluginVersion(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getStreamBackends(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getWriterBackendPluginVersion(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_getWriterBackends(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_hasBackend(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoio_registry_isBackendBuiltIn(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_applyChannelGains(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_bm3dDenoising(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_createGrayworldWB(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_createLearningBasedWB(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_createSimpleWB(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_createTonemapDurand(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_dctDenoising(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_inpaint(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xphoto_oilPainting(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_calibrate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_distortPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_estimateNewCameraMatrixForUndistortRectify(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_initUndistortRectifyMap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_projectPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_solvePnP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_stereoCalibrate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_stereoRectify(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_undistortImage(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fisheye_undistortPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_MapHist(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_createVideoReader(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cudacodec_createVideoWriter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CCheckerDraw_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_CChecker_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mcc_DetectorParameters_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_getBitsFromByteList(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_Dictionary_getByteListFromBits(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_calibrateCameraAruco(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_calibrateCameraArucoExtended(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_calibrateCameraCharuco(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_calibrateCameraCharucoExtended(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_detectCharucoDiamond(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_detectMarkers(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_drawCharucoDiamond(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_drawDetectedCornersCharuco(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_drawDetectedDiamonds(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_drawDetectedMarkers(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_drawPlanarBoard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_estimatePoseBoard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_estimatePoseCharucoBoard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_estimatePoseSingleMarkers(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_extendDictionary(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_generateImageMarker(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_getBoardObjectAndImagePoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_getPredefinedDictionary(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_interpolateCornersCharuco(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_refineDetectedMarkers(_opts \\ []), do: :erlang.nif_error(:undefined)
  def aruco_testCharucoCornersCollinear(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_GOSTracker_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_OLSTracker_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_Rapid_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_convertCorrespondencies(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_drawCorrespondencies(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_drawSearchLines(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_drawWireframe(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_extractControlPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_extractLineBundle(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_findCorrespondencies(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rapid_rapid(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_ColoredKinFu_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_coarseParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_coloredTSDFParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_defaultParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colored_kinfu_Params_hashTSDFParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_DepthCleaner_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_FastICPOdometry_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_ICPOdometry_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_OdometryFrame_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_Odometry_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdFrame_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdICPOdometry_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdNormals_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdOdometry_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_RgbdPlane_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_depthTo3d(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_depthTo3dSparse(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_registerDepth(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_rescaleDepth(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rgbd_warpFrame(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dynafu_DynaFu_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_KinFu_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_Params_coarseParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_Params_coloredTSDFParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_Params_defaultParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_Params_hashTSDFParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_coarseParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_VolumeParams_defaultParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kinfu_makeVolume(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_LargeKinfu_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_coarseParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_defaultParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def large_kinfu_Params_hashTSDFParams(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_ColorGradient_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_DepthNormal_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_Modality_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_colormap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_drawFeatures(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_getDefaultLINE(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linemod_getDefaultLINEMOD(_opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_GrayCodePattern_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def structured_light_SinusoidalPattern_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BEBLID_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BoostDesc_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_BriefDescriptorExtractor_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_DAISY_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_FREAK_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_HarrisLaplaceFeatureDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LATCH_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_LUCID_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_MSDDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignaturesSQFD_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_drawSignature(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_PCTSignatures_generateInitPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SIFT_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_SURF_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_StarDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TBMR_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_TEBLID_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_VGG_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_matchGMS(_opts \\ []), do: :erlang.nif_error(:undefined)
  def xfeatures2d_matchLOGOS(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_AdaptiveManifoldFilter_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_FastHoughTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GradientDericheX(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_GradientDericheY(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_HoughPoint2Line(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_PeiLinNormalization(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RadonTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_RidgeDetectionFilter_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_amFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_anisotropicDiffusion(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_bilateralTextureFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_colorMatchTemplate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_computeBadPixelPercent(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_computeMSE(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_contourSampling(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_covarianceEstimation(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createAMFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createContourFitting(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createDTFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createDisparityWLSFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createDisparityWLSFilterGeneric(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createEdgeAwareInterpolator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createEdgeBoxes(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createEdgeDrawing(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createFastBilateralSolverFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createFastGlobalSmootherFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createFastLineDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createGuidedFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createQuaternionImage(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createRFFeatureGetter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createRICInterpolator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createRightMatcher(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createScanSegment(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createStructuredEdgeDetection(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createSuperpixelLSC(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createSuperpixelSEEDS(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_createSuperpixelSLIC(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_dtFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_edgePreservingFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_fastBilateralSolverFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_fastGlobalSmootherFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_findEllipses(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_fourierDescriptor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_getDisparityVis(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_guidedFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_jointBilateralFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_l0Smooth(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_niBlackThreshold(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_qconj(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_qdft(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_qmultiply(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_qunitary(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_readGT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_rollingGuidanceFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_thinning(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_transformFD(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_weightedMedianFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_createGraphSegmentation(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_createSelectiveSearchSegmentation(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_createSelectiveSearchSegmentationStrategyColor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_createSelectiveSearchSegmentationStrategyFill(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_createSelectiveSearchSegmentationStrategyMultiple(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_createSelectiveSearchSegmentationStrategySize(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ximgproc_segmentation_createSelectiveSearchSegmentationStrategyTexture(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_createBackgroundSubtractorCNT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_createBackgroundSubtractorGMG(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_createBackgroundSubtractorGSOC(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_createBackgroundSubtractorLSBP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_createBackgroundSubtractorMOG(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bgsegm_createSyntheticSequenceGenerator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_RetinaFastToneMapping_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_Retina_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bioinspired_TransientAreasSegmentationModule_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_calibrate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_initUndistortRectifyMap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_projectPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_stereoCalibrate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_stereoReconstruct(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_stereoRectify(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_undistortImage(_opts \\ []), do: :erlang.nif_error(:undefined)
  def omnidir_undistortPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_BIF_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_EigenFaceRecognizer_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_FisherFaceRecognizer_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_LBPHFaceRecognizer_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_MACE_load(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_StandardCollector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_createFacemarkAAM(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_createFacemarkKazemi(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_createFacemarkLBF(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_drawFacemarks(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_getFacesHAAR(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_loadDatasetList(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_loadFacePoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def face_loadTrainingData(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_MultiTracker_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_TrackerBoosting_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_TrackerCSRT_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_TrackerKCF_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_TrackerMIL_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_TrackerMOSSE_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_TrackerMedianFlow_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_TrackerTLD_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def legacy_upgradeTrackingAPI(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereo_QuasiDenseStereo_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def akaze_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def affineFeature_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def agastFeatureDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bfMatcher_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def brisk_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def camShift(_opts \\ []), do: :erlang.nif_error(:undefined)
  def canny(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cascadeClassifier_convert(_opts \\ []), do: :erlang.nif_error(:undefined)
  def disOpticalFlow_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def descriptorMatcher_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def emd(_opts \\ []), do: :erlang.nif_error(:undefined)
  def faceDetectorYN_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def faceRecognizerSF_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def farnebackOpticalFlow_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fastFeatureDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def flannBasedMatcher_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def gfttDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def gaussianBlur(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_getDaimlerPeopleDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hogDescriptor_getDefaultPeopleDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def houghCircles(_opts \\ []), do: :erlang.nif_error(:undefined)
  def houghLines(_opts \\ []), do: :erlang.nif_error(:undefined)
  def houghLinesP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def houghLinesPointSet(_opts \\ []), do: :erlang.nif_error(:undefined)
  def houghLinesWithAccumulator(_opts \\ []), do: :erlang.nif_error(:undefined)
  def huMoments(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kaze_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def keyPoint_convert(_opts \\ []), do: :erlang.nif_error(:undefined)
  def keyPoint_overlap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def lut(_opts \\ []), do: :erlang.nif_error(:undefined)
  def laplacian(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mser_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mahalanobis(_opts \\ []), do: :erlang.nif_error(:undefined)
  def orb_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pcaBackProject(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pcaCompute(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pcaCompute2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pcaProject(_opts \\ []), do: :erlang.nif_error(:undefined)
  def psnr(_opts \\ []), do: :erlang.nif_error(:undefined)
  def qrCodeEncoder_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rqDecomp3x3(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rodrigues(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sift_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def svBackSubst(_opts \\ []), do: :erlang.nif_error(:undefined)
  def svdDecomp(_opts \\ []), do: :erlang.nif_error(:undefined)
  def scharr(_opts \\ []), do: :erlang.nif_error(:undefined)
  def simpleBlobDetector_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sobel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sparsePyrLKOpticalFlow_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoBM_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoSGBM_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stitcher_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerCSRT_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerDaSiamRPN_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerGOTURN_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerKCF_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerMIL_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerNano_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trackerVit_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_context(_opts \\ []), do: :erlang.nif_error(:undefined)
  def uMat_queue(_opts \\ []), do: :erlang.nif_error(:undefined)
  def variationalRefinement_create(_opts \\ []), do: :erlang.nif_error(:undefined)
  def videoWriter_fourcc(_opts \\ []), do: :erlang.nif_error(:undefined)
  def absdiff(_opts \\ []), do: :erlang.nif_error(:undefined)
  def accumulate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def accumulateProduct(_opts \\ []), do: :erlang.nif_error(:undefined)
  def accumulateSquare(_opts \\ []), do: :erlang.nif_error(:undefined)
  def accumulateWeighted(_opts \\ []), do: :erlang.nif_error(:undefined)
  def adaptiveThreshold(_opts \\ []), do: :erlang.nif_error(:undefined)
  def add(_opts \\ []), do: :erlang.nif_error(:undefined)
  def addText(_opts \\ []), do: :erlang.nif_error(:undefined)
  def addWeighted(_opts \\ []), do: :erlang.nif_error(:undefined)
  def applyColorMap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def approxPolyDP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def arcLength(_opts \\ []), do: :erlang.nif_error(:undefined)
  def arrowedLine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def batchDistance(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bilateralFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bitwise_and(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bitwise_not(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bitwise_or(_opts \\ []), do: :erlang.nif_error(:undefined)
  def bitwise_xor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def blendLinear(_opts \\ []), do: :erlang.nif_error(:undefined)
  def blur(_opts \\ []), do: :erlang.nif_error(:undefined)
  def borderInterpolate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def boundingRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def boxFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def boxPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def broadcast(_opts \\ []), do: :erlang.nif_error(:undefined)
  def buildOpticalFlowPyramid(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calcBackProject(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calcCovarMatrix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calcHist(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calcOpticalFlowFarneback(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calcOpticalFlowPyrLK(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCamera(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCameraExtended(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCameraRO(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateCameraROExtended(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateHandEye(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrateRobotWorldHandEye(_opts \\ []), do: :erlang.nif_error(:undefined)
  def calibrationMatrixValues(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cartToPolar(_opts \\ []), do: :erlang.nif_error(:undefined)
  def checkChessboard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def checkHardwareSupport(_opts \\ []), do: :erlang.nif_error(:undefined)
  def checkRange(_opts \\ []), do: :erlang.nif_error(:undefined)
  def circle(_opts \\ []), do: :erlang.nif_error(:undefined)
  def clipLine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def colorChange(_opts \\ []), do: :erlang.nif_error(:undefined)
  def compare(_opts \\ []), do: :erlang.nif_error(:undefined)
  def compareHist(_opts \\ []), do: :erlang.nif_error(:undefined)
  def completeSymm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def composeRT(_opts \\ []), do: :erlang.nif_error(:undefined)
  def computeCorrespondEpilines(_opts \\ []), do: :erlang.nif_error(:undefined)
  def computeECC(_opts \\ []), do: :erlang.nif_error(:undefined)
  def connectedComponents(_opts \\ []), do: :erlang.nif_error(:undefined)
  def connectedComponentsWithAlgorithm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def connectedComponentsWithStats(_opts \\ []), do: :erlang.nif_error(:undefined)
  def connectedComponentsWithStatsWithAlgorithm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def contourArea(_opts \\ []), do: :erlang.nif_error(:undefined)
  def convertFp16(_opts \\ []), do: :erlang.nif_error(:undefined)
  def convertMaps(_opts \\ []), do: :erlang.nif_error(:undefined)
  def convertPointsFromHomogeneous(_opts \\ []), do: :erlang.nif_error(:undefined)
  def convertPointsToHomogeneous(_opts \\ []), do: :erlang.nif_error(:undefined)
  def convertScaleAbs(_opts \\ []), do: :erlang.nif_error(:undefined)
  def convexHull(_opts \\ []), do: :erlang.nif_error(:undefined)
  def convexityDefects(_opts \\ []), do: :erlang.nif_error(:undefined)
  def copyMakeBorder(_opts \\ []), do: :erlang.nif_error(:undefined)
  def copyTo(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cornerEigenValsAndVecs(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cornerHarris(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cornerMinEigenVal(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cornerSubPix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def correctMatches(_opts \\ []), do: :erlang.nif_error(:undefined)
  def countNonZero(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createAffineTransformer(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createAlignMTB(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createBackgroundSubtractorKNN(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createBackgroundSubtractorMOG2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createCLAHE(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createCalibrateDebevec(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createCalibrateRobertson(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createChiHistogramCostExtractor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createEMDHistogramCostExtractor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createEMDL1HistogramCostExtractor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createGeneralizedHoughBallard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createGeneralizedHoughGuil(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createHanningWindow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createHausdorffDistanceExtractor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createLineSegmentDetector(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createMergeDebevec(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createMergeMertens(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createMergeRobertson(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createNormHistogramCostExtractor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createShapeContextDistanceExtractor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createThinPlateSplineShapeTransformer(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createTonemap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createTonemapDrago(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createTonemapMantiuk(_opts \\ []), do: :erlang.nif_error(:undefined)
  def createTonemapReinhard(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cubeRoot(_opts \\ []), do: :erlang.nif_error(:undefined)
  def currentUIFramework(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cvtColor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def cvtColorTwoPlane(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dct(_opts \\ []), do: :erlang.nif_error(:undefined)
  def decolor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def decomposeEssentialMat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def decomposeHomographyMat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def decomposeProjectionMatrix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def demosaicing(_opts \\ []), do: :erlang.nif_error(:undefined)
  def denoise_TVL1(_opts \\ []), do: :erlang.nif_error(:undefined)
  def detailEnhance(_opts \\ []), do: :erlang.nif_error(:undefined)
  def determinant(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dft(_opts \\ []), do: :erlang.nif_error(:undefined)
  def dilate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def displayOverlay(_opts \\ []), do: :erlang.nif_error(:undefined)
  def displayStatusBar(_opts \\ []), do: :erlang.nif_error(:undefined)
  def distanceTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def distanceTransformWithLabels(_opts \\ []), do: :erlang.nif_error(:undefined)
  def divSpectrums(_opts \\ []), do: :erlang.nif_error(:undefined)
  def divide(_opts \\ []), do: :erlang.nif_error(:undefined)
  def drawChessboardCorners(_opts \\ []), do: :erlang.nif_error(:undefined)
  def drawContours(_opts \\ []), do: :erlang.nif_error(:undefined)
  def drawFrameAxes(_opts \\ []), do: :erlang.nif_error(:undefined)
  def drawKeypoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def drawMarker(_opts \\ []), do: :erlang.nif_error(:undefined)
  def drawMatches(_opts \\ []), do: :erlang.nif_error(:undefined)
  def drawMatchesKnn(_opts \\ []), do: :erlang.nif_error(:undefined)
  def edgePreservingFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def eigen(_opts \\ []), do: :erlang.nif_error(:undefined)
  def eigenNonSymmetric(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ellipse(_opts \\ []), do: :erlang.nif_error(:undefined)
  def ellipse2Poly(_opts \\ []), do: :erlang.nif_error(:undefined)
  def equalizeHist(_opts \\ []), do: :erlang.nif_error(:undefined)
  def erode(_opts \\ []), do: :erlang.nif_error(:undefined)
  def estimateAffine2D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def estimateAffine3D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def estimateAffinePartial2D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def estimateChessboardSharpness(_opts \\ []), do: :erlang.nif_error(:undefined)
  def estimateTranslation3D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def exp(_opts \\ []), do: :erlang.nif_error(:undefined)
  def extractChannel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fastAtan2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fastNlMeansDenoising(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fastNlMeansDenoisingColored(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fastNlMeansDenoisingColoredMulti(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fastNlMeansDenoisingMulti(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fillConvexPoly(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fillPoly(_opts \\ []), do: :erlang.nif_error(:undefined)
  def filter2D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def filterHomographyDecompByVisibleRefpoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def filterSpeckles(_opts \\ []), do: :erlang.nif_error(:undefined)
  def find4QuadCornerSubpix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findChessboardCorners(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findChessboardCornersSB(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findChessboardCornersSBWithMeta(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findCirclesGrid(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findContours(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findContoursLinkRuns(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findEssentialMat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findFundamentalMat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findHomography(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findNonZero(_opts \\ []), do: :erlang.nif_error(:undefined)
  def findTransformECC(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fitEllipse(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fitEllipseAMS(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fitEllipseDirect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def fitLine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def flip(_opts \\ []), do: :erlang.nif_error(:undefined)
  def flipND(_opts \\ []), do: :erlang.nif_error(:undefined)
  def floodFill(_opts \\ []), do: :erlang.nif_error(:undefined)
  def gemm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getAffineTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getBuildInformation(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getCPUFeaturesLine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getCPUTickCount(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getDefaultNewCameraMatrix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getDerivKernels(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getFontScaleFromHeight(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getGaborKernel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getGaussianKernel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getHardwareFeatureName(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getLogLevel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getNumThreads(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getNumberOfCPUs(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getOptimalDFTSize(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getOptimalNewCameraMatrix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getPerspectiveTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getRectSubPix(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getRotationMatrix2D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getStructuringElement(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getTextSize(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getThreadNum(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getTickCount(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getTickFrequency(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getTrackbarPos(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getValidDisparityROI(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getVersionMajor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getVersionMinor(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getVersionRevision(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getVersionString(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getWindowImageRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def getWindowProperty(_opts \\ []), do: :erlang.nif_error(:undefined)
  def goodFeaturesToTrack(_opts \\ []), do: :erlang.nif_error(:undefined)
  def goodFeaturesToTrackWithQuality(_opts \\ []), do: :erlang.nif_error(:undefined)
  def grabCut(_opts \\ []), do: :erlang.nif_error(:undefined)
  def groupRectangles(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hasNonZero(_opts \\ []), do: :erlang.nif_error(:undefined)
  def haveImageReader(_opts \\ []), do: :erlang.nif_error(:undefined)
  def haveImageWriter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def haveOpenVX(_opts \\ []), do: :erlang.nif_error(:undefined)
  def hconcat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def idct(_opts \\ []), do: :erlang.nif_error(:undefined)
  def idft(_opts \\ []), do: :erlang.nif_error(:undefined)
  def illuminationChange(_opts \\ []), do: :erlang.nif_error(:undefined)
  def imcount(_opts \\ []), do: :erlang.nif_error(:undefined)
  def imdecodemulti(_opts \\ []), do: :erlang.nif_error(:undefined)
  def imencode(_opts \\ []), do: :erlang.nif_error(:undefined)
  def imread(_opts \\ []), do: :erlang.nif_error(:undefined)
  def imreadmulti(_opts \\ []), do: :erlang.nif_error(:undefined)
  def imwrite(_opts \\ []), do: :erlang.nif_error(:undefined)
  def imwritemulti(_opts \\ []), do: :erlang.nif_error(:undefined)
  def inRange(_opts \\ []), do: :erlang.nif_error(:undefined)
  def initCameraMatrix2D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def initInverseRectificationMap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def initUndistortRectifyMap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def inpaint(_opts \\ []), do: :erlang.nif_error(:undefined)
  def insertChannel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def integral(_opts \\ []), do: :erlang.nif_error(:undefined)
  def integral2(_opts \\ []), do: :erlang.nif_error(:undefined)
  def integral3(_opts \\ []), do: :erlang.nif_error(:undefined)
  def intersectConvexConvex(_opts \\ []), do: :erlang.nif_error(:undefined)
  def invert(_opts \\ []), do: :erlang.nif_error(:undefined)
  def invertAffineTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def isContourConvex(_opts \\ []), do: :erlang.nif_error(:undefined)
  def kmeans(_opts \\ []), do: :erlang.nif_error(:undefined)
  def line(_opts \\ []), do: :erlang.nif_error(:undefined)
  def linearPolar(_opts \\ []), do: :erlang.nif_error(:undefined)
  def log(_opts \\ []), do: :erlang.nif_error(:undefined)
  def logPolar(_opts \\ []), do: :erlang.nif_error(:undefined)
  def magnitude(_opts \\ []), do: :erlang.nif_error(:undefined)
  def matMulDeriv(_opts \\ []), do: :erlang.nif_error(:undefined)
  def matchShapes(_opts \\ []), do: :erlang.nif_error(:undefined)
  def matchTemplate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def max(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mean(_opts \\ []), do: :erlang.nif_error(:undefined)
  def meanShift(_opts \\ []), do: :erlang.nif_error(:undefined)
  def meanStdDev(_opts \\ []), do: :erlang.nif_error(:undefined)
  def medianBlur(_opts \\ []), do: :erlang.nif_error(:undefined)
  def merge(_opts \\ []), do: :erlang.nif_error(:undefined)
  def min(_opts \\ []), do: :erlang.nif_error(:undefined)
  def minAreaRect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def minEnclosingCircle(_opts \\ []), do: :erlang.nif_error(:undefined)
  def minEnclosingTriangle(_opts \\ []), do: :erlang.nif_error(:undefined)
  def minMaxLoc(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mixChannels(_opts \\ []), do: :erlang.nif_error(:undefined)
  def moments(_opts \\ []), do: :erlang.nif_error(:undefined)
  def morphologyEx(_opts \\ []), do: :erlang.nif_error(:undefined)
  def moveWindow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mulSpectrums(_opts \\ []), do: :erlang.nif_error(:undefined)
  def mulTransposed(_opts \\ []), do: :erlang.nif_error(:undefined)
  def multiply(_opts \\ []), do: :erlang.nif_error(:undefined)
  def namedWindow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def norm(_opts \\ []), do: :erlang.nif_error(:undefined)
  def normalize(_opts \\ []), do: :erlang.nif_error(:undefined)
  def patchNaNs(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pencilSketch(_opts \\ []), do: :erlang.nif_error(:undefined)
  def perspectiveTransform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def phase(_opts \\ []), do: :erlang.nif_error(:undefined)
  def phaseCorrelate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pointPolygonTest(_opts \\ []), do: :erlang.nif_error(:undefined)
  def polarToCart(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pollKey(_opts \\ []), do: :erlang.nif_error(:undefined)
  def polylines(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def preCornerDetect(_opts \\ []), do: :erlang.nif_error(:undefined)
  def projectPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def putText(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pyrDown(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pyrMeanShiftFiltering(_opts \\ []), do: :erlang.nif_error(:undefined)
  def pyrUp(_opts \\ []), do: :erlang.nif_error(:undefined)
  def randShuffle(_opts \\ []), do: :erlang.nif_error(:undefined)
  def randn(_opts \\ []), do: :erlang.nif_error(:undefined)
  def randu(_opts \\ []), do: :erlang.nif_error(:undefined)
  def readOpticalFlow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def recoverPose(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rectangle(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rectangleIntersectionArea(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rectify3Collinear(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reduce(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reduceArgMax(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reduceArgMin(_opts \\ []), do: :erlang.nif_error(:undefined)
  def remap(_opts \\ []), do: :erlang.nif_error(:undefined)
  def repeat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def reprojectImageTo3D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def resize(_opts \\ []), do: :erlang.nif_error(:undefined)
  def resizeWindow(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rotate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def rotatedRectangleIntersection(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sampsonDistance(_opts \\ []), do: :erlang.nif_error(:undefined)
  def scaleAdd(_opts \\ []), do: :erlang.nif_error(:undefined)
  def seamlessClone(_opts \\ []), do: :erlang.nif_error(:undefined)
  def selectROI(_opts \\ []), do: :erlang.nif_error(:undefined)
  def selectROIs(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sepFilter2D(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setIdentity(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setLogLevel(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setNumThreads(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setRNGSeed(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setTrackbarMax(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setTrackbarMin(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setTrackbarPos(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setUseOpenVX(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setUseOptimized(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setWindowProperty(_opts \\ []), do: :erlang.nif_error(:undefined)
  def setWindowTitle(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solve(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solveCubic(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solveLP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solveP3P(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solvePnP(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solvePnPGeneric(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solvePnPRansac(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solvePnPRefineLM(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solvePnPRefineVVS(_opts \\ []), do: :erlang.nif_error(:undefined)
  def solvePoly(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sort(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sortIdx(_opts \\ []), do: :erlang.nif_error(:undefined)
  def spatialGradient(_opts \\ []), do: :erlang.nif_error(:undefined)
  def split(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sqrBoxFilter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sqrt(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stackBlur(_opts \\ []), do: :erlang.nif_error(:undefined)
  def startWindowThread(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoCalibrate(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoCalibrateExtended(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoRectify(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stereoRectifyUncalibrated(_opts \\ []), do: :erlang.nif_error(:undefined)
  def stylization(_opts \\ []), do: :erlang.nif_error(:undefined)
  def subtract(_opts \\ []), do: :erlang.nif_error(:undefined)
  def sumElems(_opts \\ []), do: :erlang.nif_error(:undefined)
  def textureFlattening(_opts \\ []), do: :erlang.nif_error(:undefined)
  def threshold(_opts \\ []), do: :erlang.nif_error(:undefined)
  def trace(_opts \\ []), do: :erlang.nif_error(:undefined)
  def transform(_opts \\ []), do: :erlang.nif_error(:undefined)
  def transpose(_opts \\ []), do: :erlang.nif_error(:undefined)
  def transposeND(_opts \\ []), do: :erlang.nif_error(:undefined)
  def triangulatePoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def undistort(_opts \\ []), do: :erlang.nif_error(:undefined)
  def undistortImagePoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def undistortPoints(_opts \\ []), do: :erlang.nif_error(:undefined)
  def undistortPointsIter(_opts \\ []), do: :erlang.nif_error(:undefined)
  def useOpenVX(_opts \\ []), do: :erlang.nif_error(:undefined)
  def useOptimized(_opts \\ []), do: :erlang.nif_error(:undefined)
  def validateDisparity(_opts \\ []), do: :erlang.nif_error(:undefined)
  def vconcat(_opts \\ []), do: :erlang.nif_error(:undefined)
  def waitKeyEx(_opts \\ []), do: :erlang.nif_error(:undefined)
  def warpAffine(_opts \\ []), do: :erlang.nif_error(:undefined)
  def warpPerspective(_opts \\ []), do: :erlang.nif_error(:undefined)
  def warpPolar(_opts \\ []), do: :erlang.nif_error(:undefined)
  def watershed(_opts \\ []), do: :erlang.nif_error(:undefined)
  def writeOpticalFlow(_opts \\ []), do: :erlang.nif_error(:undefined)

end
