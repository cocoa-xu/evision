name: windows-precompile

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mix_compile:
    runs-on: windows-latest
    env:
      MIX_ENV: prod
      OPENCV_VER: "4.6.0"
      OTP_VERSION: "25.0.4"
      NIF_VERSION: "2.16"
      ELIXIR_VERSION: "1.14.0"
      EVISION_PREFER_PRECOMPILED: "false"
      EVISION_GENERATE_LANG: "erlang,elixir"
      MAKE: "nmake"
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              arch: arm64
              arch_name: aarch64
              msbuild_platform: ARM64
              vcvarsall: amd64_arm64
              CMAKE_GENERATOR_TYPE: "Visual Studio 17"
              CMAKE_TOOLCHAIN_FILE: "cc_toolchain/aarch64-windows-msvc.cmake"
          - pair:
              arch: x64
              arch_name: x86_64
              msbuild_platform: x64
              vcvarsall: x64
              CMAKE_GENERATOR_TYPE: "Ninja"

    steps:
      - uses: actions/checkout@v3

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.pair.vcvarsall }}

      - name: Cache mix packages
        id: cache-mix-deps
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}
          path: |
            ./deps

      - name: Get mix deps
        if: steps.cache-mix-deps.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mix deps.get

      - name: Cache OpenCV
        id: cache-opencv
        uses: actions/cache@v3
        with:
          key: opencv-${{ env.OPENCV_VER }}
          path: |
            ./3rd_party

      - name: Download OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        shell: bash
        run: |
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cache compiled OpenCV
        id: cache-mix-compile
        uses: actions/cache@v3
        with:
          key: precompile-${{ runner.os }}-${{ hashFiles('cc_toolchain/**') }}-${{ hashFiles('c_src/**') }}-${{ hashFiles('py_src/**') }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('Makefile.win') }}-${{ env.OPENCV_VER }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}
          path: |
            ./_build
            ./c_src/headers.txt
            ./c_src/configuration.private.hpp
            ./lib
            ./src

      - name: Mix compile
        if: steps.cache-mix-compile.outputs.cache-hit != 'true'
        shell: bash
        run: |
          export CMAKE_OPENCV_OPTIONS="-D WITH_FFMPEG=OFF"
          if [ -n "${{ matrix.pair.CMAKE_TOOLCHAIN_FILE }}" ]; then
            export CMAKE_GENERATOR_TYPE="${{ matrix.pair.CMAKE_GENERATOR_TYPE }}"
            export MSBUILD_PLATFORM="${{ matrix.pair.MSBUILD_PLATFORM }}"
            export CMAKE_TOOLCHAIN_FILE="$(pwd)/${{ matrix.pair.CMAKE_TOOLCHAIN_FILE }}"
            export TOOLCHAIN_FILE="$(pwd)/${{ matrix.pair.CMAKE_TOOLCHAIN_FILE }}"
          fi
          rm -f Makefile
          mix compile

      - name: Create precompiled library
        shell: bash
        run: |
          export PKG_NAME=evision-nif_${NIF_VERSION}-${{ matrix.pair.arch_name }}-windows-msvc-${GITHUB_REF##*/v}
          mkdir -p "${PKG_NAME}"
          rm -rf "_build/${MIX_ENV}/lib/evision/priv/${{ matrix.pair.msbuild_platform }}"
          cp -a _build/${MIX_ENV}/lib/evision/priv "${PKG_NAME}"
          cp -a lib/generated "${PKG_NAME}/elixir_generated"
          cp -a src/generated "${PKG_NAME}/erlang_generated"
          tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
          rm -rf "${PKG_NAME}"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz
