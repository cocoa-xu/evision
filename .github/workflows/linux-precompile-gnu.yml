name: linux-precompile-gnu

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mix_compile:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VER: "4.6.0"
      MIX_ENV: prod
      OTP_VERSION: "25.1.2"
      NIF_VERSION: "2.16"
      ELIXIR_VERSION: "1.14.2"
      EVISION_PREFER_PRECOMPILED: "false"
      EVISION_GENERATE_LANG: "erlang,elixir"
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              arch: x86_64-linux-gnu
              cmake_toolchain_file: ""
              c_compiler: gcc
              cpp_compiler: g++
              deb_arch: amd64
          - pair:
              arch: i686-linux-gnu
              cmake_toolchain_file: cc_toolchain/i686-linux-gnu.cmake
              c_compiler: gcc-i686-linux-gnu
              cpp_compiler: g++-i686-linux-gnu
              deb_arch: i386
          - pair:
              arch: aarch64-linux-gnu
              cmake_toolchain_file: cc_toolchain/aarch64-linux-gnu.cmake
              c_compiler: gcc-aarch64-linux-gnu
              cpp_compiler: g++-aarch64-linux-gnu
              deb_arch: arm64
          - pair:
              arch: armv7l-linux-gnueabihf
              cmake_toolchain_file: cc_toolchain/armv7l-linux-gnueabihf.cmake
              c_compiler: gcc-arm-linux-gnueabihf
              cpp_compiler: g++-arm-linux-gnueabihf
              deb_arch: armhf
          - pair:
              arch: ppc64le-linux-gnu
              cmake_toolchain_file: cc_toolchain/ppc64le-linux-gnu.cmake
              c_compiler: gcc-powerpc64le-linux-gnu
              cpp_compiler: g++-powerpc64le-linux-gnu
              deb_arch: ppc64el
          - pair:
              arch: s390x-linux-gnu
              cmake_toolchain_file: cc_toolchain/s390x-linux-gnu.cmake
              c_compiler: gcc-s390x-linux-gnu
              cpp_compiler: g++-s390x-linux-gnu
              deb_arch: s390x
          - pair:
              arch: riscv64-linux-gnu
              cmake_toolchain_file: cc_toolchain/riscv64-linux-gnu.cmake
              c_compiler: gcc-riscv64-linux-gnu
              cpp_compiler: g++-riscv64-linux-gnu
              deb_arch: riscv64

    steps:
      - uses: actions/checkout@v3

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git gzip python3 ca-certificates ${{ matrix.pair.c_compiler }} ${{ matrix.pair.cpp_compiler }} libncurses5-dev libssl-dev

      - name: Cache mix packages
        id: cache-mix-deps
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}
          path: |
            ./deps

      - name: Get mix deps
        if: steps.cache-mix-deps.outputs.cache-hit != 'true'
        run: |
          mix deps.get

      - name: Cache OpenCV source code
        id: cache-opencv
        uses: actions/cache@v3
        with:
          key: opencv-${{ env.OPENCV_VER }}
          path: |
            ./3rd_party

      - name: Download OpenCV source code
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: |
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cache compiled OpenCV
        id: cache-mix-compile_opencv
        uses: actions/cache@v3
        with:
          key: precompile-opencv-${{ env.OPENCV_VER }}-${{ matrix.pair.arch }}-${{ hashFiles('cc_toolchain/*linux-gnu.cmake') }}-${{ hashFiles('Makefile') }}-${{ hashFiles('py_src/*.py') }}
          path: |
            ./_build/${{ env.MIX_ENV }}/lib/evision
            ./c_src/headers.txt
            ./c_src/configuration.private.hpp

      - name: Compile OpenCV
        if: steps.cache-mix-compile_opencv.outputs.cache-hit != 'true'
        run: |
          if [ "${{ matrix.pair.cmake_toolchain_file }}" != "" ]; then
            export CMAKE_TOOLCHAIN_FILE="$(pwd)/${{ matrix.pair.cmake_toolchain_file }}"
          fi
          echo "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}"
          mix compile_opencv

      - name: Mix compile
        run: |
          if [ "${{ matrix.pair.cmake_toolchain_file }}" != "" ]; then
            export CMAKE_TOOLCHAIN_FILE="$(pwd)/${{ matrix.pair.cmake_toolchain_file }}"
          fi
          echo "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}"
          rm -f _build/${MIX_ENV}/lib/evision/priv/evision.so

          mkdir -p lib/generated
          mkdir -p src/generated
          cat c_src/headers.txt
          python3 py_src/gen2.py c_src lib/generated src/generated c_src/headers.txt "${EVISION_GENERATE_LANG}"

          mix compile

      - name: Create precompiled library
        run: |
          export PKG_NAME=evision-nif_${NIF_VERSION}-${{ matrix.pair.arch }}-${GITHUB_REF##*/v}
          mkdir -p "${PKG_NAME}"
          cp -a _build/${MIX_ENV}/lib/evision/priv "${PKG_NAME}"
          cp -a lib/generated "${PKG_NAME}/elixir_generated"
          cp -a src/generated "${PKG_NAME}/erlang_generated"
          tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
          rm -rf "${PKG_NAME}"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz
