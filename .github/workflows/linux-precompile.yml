name: linux-precompile

on:
  push:
    tags:
      - '*-dev'
      - '*-prod'
      - '*-dev-linux'
      - 'v*'

jobs:
  mix_test:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VER: "4.6.0"
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              arch_name: x86_64
              deb_arch: amd64
              cmake_toolchain_file: ""
              c_compiler: gcc
              cpp_compiler: g++
          - pair:
              arch_name: aarch64
              deb_arch: arm64
              cmake_toolchain_file: cc_toolchain/linux-aarch64.cmake
              c_compiler: gcc-aarch64-linux-gnu
              cpp_compiler: g++-aarch64-linux-gnu
          - pair:
              arch_name: armv7l
              deb_arch: armhf
              cmake_toolchain_file: cc_toolchain/linux-armv7l.cmake
              c_compiler: gcc-arm-linux-gnueabihf
              cpp_compiler: g++-arm-linux-gnueabihf
          - pair:
              arch_name: ppc64le
              deb_arch: ppc64le
              cmake_toolchain_file: cc_toolchain/linux-ppc64le.cmake
              c_compiler: gcc-powerpc64le-linux-gnu
              cpp_compiler: g++-powerpc64le-linux-gnu
          - pair:
              arch_name: s390x
              deb_arch: s390x
              cmake_toolchain_file: cc_toolchain/linux-s390x.cmake
              c_compiler: gcc-s390x-linux-gnu
              cpp_compiler: g++-s390x-linux-gnu
          - pair:
              arch_name: riscv64
              deb_arch: riscv64
              cmake_toolchain_file: cc_toolchain/linux-riscv64.cmake
              c_compiler: gcc-riscv64-linux-gnu
              cpp_compiler: g++-riscv64-linux-gnu

    steps:
      - uses: actions/checkout@v2

      - uses: erlef/setup-beam@v1
        with:
          otp-version: "25.0.2"
          elixir-version: "1.13.4"

      - name: Install system dependecies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git libssl-dev gzip libncurses5-dev python3 ca-certificates ${{ matrix.pair.c_compiler }} ${{ matrix.pair.cpp_compiler }}
      
      - name: Cache mix packages and OpenCV
        id: cache-mix-and-opencv
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OPENCV_VER }}
          path: |
            ./deps
            ./3rd_party

      - name: Get mix deps and download OpenCV
        if: steps.cache-mix-and-opencv.outputs.cache-hit != 'true'
        run: |
          mix deps.get
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cache compiled OpenCV
        id: cache-mix-compile
        uses: actions/cache@v3
        with:
          key: precompile-${{ runner.os }}-${{ matrix.pair.arch_name }}-${{ hashFiles('cc_toolchain/**') }}-${{ hashFiles('c_src/**') }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('Makefile') }}-${{ env.OPENCV_VER }}
          path: |
            ./_build
            ./c_src/headers.txt
            ./c_src/configuration.private.hpp
            ./lib
            ./src

      - name: Create precompiled library
        run: |
          if [ "${{ matrix.pair.cmake_toolchain_file }}" != "" ]; then
            export CMAKE_TOOLCHAIN_FILE="$(pwd)/${{ matrix.pair.cmake_toolchain_file }}"
          fi
          echo "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}"
          rm -f _build/dev/lib/evision/priv/evision.so
          mix compile
          export PKG_NAME=evision-linux-${{ matrix.pair.arch_name }}-${GITHUB_REF##*/v}
          mkdir -p "${PKG_NAME}"
          cp -a _build/dev/lib/evision/priv "${PKG_NAME}"
          cp -a lib/generated "${PKG_NAME}/elixir_generated"
          cp -a src/generated "${PKG_NAME}/erlang_generated"
          tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
          rm -rf "${PKG_NAME}"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz
