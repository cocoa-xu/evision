name: nerves-build

on:
  pull_request:
    paths-ignore:
      - '**/README.md'
      - 'LICENSE*'
      - 'examples/**'
      - 'test/**'
      - 'Makefile.win'
      - 'cc_toolchain/**'
      - '.github/FUNDING.yml'
      - '.github/workflows/linux-*'
      - '.github/workflows/macos-*'
      - '.github/workflows/windows-*'
      - '.github/workflows/test-*.yml'
  push:
    branches:
      - main
      - nerves-*
    paths-ignore:
      - '**/README.md'
      - 'LICENSE*'
      - 'examples/**'
      - 'Makefile.win'
      - 'cc_toolchain/**'
      - '.github/FUNDING.yml'
      - '.github/workflows/linux-*'
      - '.github/workflows/macos-*'
      - '.github/workflows/windows-*'
      - '.github/workflows/test-*.yml'
  workflow_dispatch:

jobs:
  mix_test:
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: prod
      NERVES_PROJ_NAME: nerves_evision
      OPENCV_VER: "4.5.5"
      NERVES_LIVEBOOK_VER: "v0.6.2"

    strategy:
      matrix:
        target: [rpi4, rpi3a, rpi3, rpi2, rpi0, rpi, bbb, osd32mp1, npi_imx6ull, grisp2]

    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "25.0.2"
          elixir-version: "1.13.4"

      - name: Install nerves and system dependecies
        run: |
          mkdir -p ~/.ssh
          echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCulZpVE/JdpWX53C35n45RSIMtaIIiTMnmRo5oDEMbyh0NnKI5byikkOvGnGLOO2KTlq4We+MF5iKx72B1Ixl8RY7L6Kc/h3R6jG4uOWBhw/WBhIebteJVYDzrlU8fHTewquWYT6tJ7v7g54Qe5vofsDeKBDqTJqJPlwNSxP8AjPZ0vQ4O4IhG0CXaDzU/G50sqzquKckgGWURLN9LcsA+kzciKJRhKw4Q7kpOiTNG/fzYxBpgpNrnyyr7bhj0jdOsg9KoG57aLSqbmEVCOyWa6yh6lOTp37S6ijBfQORxUu3I+6B04zUBSEvN4wgqslHU9pbIio8Szz1vbnlqsgO0tG1yqALfs6RVSjW81AujKefeH/8seE7q0yiHJXkE4tejIcewJT+2e6p/fP2pVSwyRqZ1bObtRUCMG3Pwdi0IpfsyBSa02Qc7eT9VB1WN7XD1vpfMDQ/nIWmoA40VkX3F3v5Mht5PZwVmlRyM8BrLtCYTreUP5xl6ZZCSX2IfOI8= nerves-ci-build' > ~/.ssh/id_rsa.pub
          sudo apt-get update && sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git libssl-dev libncurses5-dev python3 ca-certificates squashfs-tools ssh-askpass libmnl-dev
          mix local.hex --force
          mix local.rebar --force
      
      - name: Cache mix packages and OpenCV
        id: cache-mix-and-opencv
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OPENCV_VER }}
          path: |
            ./deps
            ./3rd_party

      - name: Get mix deps and download OpenCV
        if: steps.cache-mix-and-opencv.outputs.cache-hit != 'true'
        run: |
          mix deps.get
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cahche nerves
        id: cache-nerves
        uses: actions/cache@v3
        with:
          key: nerves
          path: |
            ~/.nerves

      - name: Install Nerves
        if: steps.cache-nerves.outputs.cache-hit != 'true'
        run: |
          mix archive.install hex nerves_bootstrap --force || true

      - name: Cache nerves builds
        id: cache-nerves-builds
        uses: actions/cache@v3
        with:
          key: compile-nerves-${{ runner.os }}-${{ hashFiles('cc_toolchain/**') }}-${{ hashFiles('c_src/**') }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('Makefile') }}-${{ env.OPENCV_VER }}-${{ env.NERVES_LIVEBOOK_VER }}
          path: |
            ../nerves_livebook

      - name: Make a nerves project
        run: |
          wget -k https://github.com/fwup-home/fwup/releases/download/v1.9.0/fwup_1.9.0_amd64.deb -O ./fwup_1.9.0_amd64.deb
          sudo dpkg -i ./fwup_1.9.0_amd64.deb
          cd ../
          git clone https://github.com/livebook-dev/nerves_livebook.git
          cd nerves_livebook
          git checkout "${NERVES_LIVEBOOK_VER}"
          git checkout mix.exs
          LINE="$(grep -n 'toolshed' mix.exs | awk -F: '{print $1+1}')"
          head -n "${LINE}" mix.exs > mix.exs.tmp
          echo '      {:evision, "~> 0.1.0", path: "../evision"},' >> mix.exs.tmp
          tail -n "+${LINE}" mix.exs >> mix.exs.tmp
          mv mix.exs.tmp mix.exs
          cat mix.exs
          export MIX_TARGET=${{ matrix.target }}
          mix deps.get
          cp -a ../evision/examples                        ./priv/evision_examples
          sed -i 's/"welcome.livemd"\,/"welcome.livemd"\, "evision_examples",/g' lib/nerves_livebook/application.ex
          export MAKE_BUILD_FLAGS="-j$(nproc)"
          mix deps.compile
          mix firmware
          mkdir -p "/tmp/firmware"
          cp "./_build/${MIX_TARGET}_${MIX_ENV}/nerves/images/nerves_livebook.fw" "/tmp/firmware/${NERVES_PROJ_NAME}_${{ matrix.target }}_${MIX_ENV}.fw"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ env.NERVES_PROJ_NAME }}_${{ matrix.target }}_${{ env.MIX_ENV }}.fw
          path: /tmp/firmware/${{ env.NERVES_PROJ_NAME }}_${{ matrix.target }}_${{ env.MIX_ENV }}.fw
