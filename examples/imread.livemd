<!-- vim: syntax=markdown -->

<!-- livebook:{"persist_outputs":true} -->

# core - imread related

```elixir
# set `EVISION_PREFER_PRECOMPILED` to `false` 
# if you prefer `:evision` to be compiled from source
# note that to compile from source, you may need at least 1GB RAM
# System.put_env("EVISION_PREFER_PRECOMPILED", "false")

Mix.install([
  {:evision, "~> 0.1.9"},
  {:req, "~> 0.3"},
  {:kino, "~> 0.7"}
])
```

## Helper Function

```elixir
defmodule Helper do
  def download!(url, save_as, overwrite \\ false)

  def download!(url, save_as, false) do
    unless File.exists?(save_as) do
      download!(url, save_as, true)
    end

    :ok
  end

  def download!(url, save_as, true) do
    body =
      case Req.get!(url) do
        %Req.Response{status: 200, body: body} ->
          body

        error ->
          raise inspect(error)
      end

    File.write!(save_as, body)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Helper, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:download!, 3}}
```

## alias

```elixir
alias Evision, as: Cv
```

<!-- livebook:{"output":true} -->

```
Evision
```

## Cv.imread

### Read an image from file

```elixir
lenna_test_image_path = Path.join(__DIR__, "lenna_test_image.png")

Helper.download!(
  "https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png",
  lenna_test_image_path
)
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
mat = Cv.imread(lenna_test_image_path)
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 3,
  dims: 2,
  type: {:u, 8},
  raw_type: 16,
  shape: {512, 512, 3},
  ref: #Reference<0.2992585850.4173463580.172624>
}
```

```elixir
encoded = Cv.imencode(".png", mat)
Kino.Image.new(encoded, :png)
```

### Resize image `Cv.resize`

```elixir
resized_mat = Cv.resize(mat, [_width = 256, _height = 128])
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 3,
  dims: 2,
  type: {:u, 8},
  raw_type: 16,
  shape: {128, 256, 3},
  ref: #Reference<0.2992585850.4173463572.169509>
}
```

```elixir
encoded = Cv.imencode(".png", resized_mat)
Kino.Image.new(encoded, :png)
```

### Encode and decode image in memory

```elixir
# encode in memory
encoded_in_memory = Cv.imencode(".png", resized_mat)
```

<!-- livebook:{"output":true} -->

```
<<137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 0, 128, 8, 2, 0,
  0, 0, 107, 215, 32, 93, 0, 0, 32, 0, 73, 68, 65, 84, 120, 1, 20, 193, 93, 175, 110, 105, 118,
  ...>>
```

```elixir
# decode in memory
decoded_mat = Cv.imdecode(encoded_in_memory, Cv.cv_IMREAD_ANYCOLOR())
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 3,
  dims: 2,
  type: {:u, 8},
  raw_type: 16,
  shape: {128, 256, 3},
  ref: #Reference<0.2992585850.4173463572.169510>
}
```

### Read png file with/without alpha channel

```elixir
# download the test image (has alpha channel)
download_path = Path.join(__DIR__, "test.png")
Helper.download!("https://github.com/cocoa-xu/evision/raw/main/test/test.png", download_path)
```

<!-- livebook:{"output":true} -->

```

21:54:43.110 [debug] follow_redirects: redirecting to https://raw.githubusercontent.com/cocoa-xu/evision/main/test/test.png

```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
without_alpha = Cv.imread(download_path)
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 3,
  dims: 2,
  type: {:u, 8},
  raw_type: 16,
  shape: {2, 3, 3},
  ref: #Reference<0.2992585850.4173463580.172680>
}
```

```elixir
Cv.imread(download_path, flags: Cv.cv_IMREAD_UNCHANGED())
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 4,
  dims: 2,
  type: {:u, 8},
  raw_type: 24,
  shape: {2, 3, 4},
  ref: #Reference<0.2992585850.4173463580.172696>
}
```

### Read an image as grayscale

```elixir
gray_scale_mat = Cv.imread(lenna_test_image_path, flags: Cv.cv_IMREAD_GRAYSCALE())
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 1,
  dims: 2,
  type: {:u, 8},
  raw_type: 0,
  shape: {512, 512},
  ref: #Reference<0.2992585850.4173463580.172727>
}
```

```elixir
gray_scale = Cv.imencode(".png", gray_scale_mat)
Kino.Image.new(gray_scale, :png)
```
