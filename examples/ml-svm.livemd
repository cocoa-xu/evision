<!-- vim: syntax=markdown -->

<!-- livebook:{"persist_outputs":true} -->

# Evision ML - SVM

## Setup

```elixir
# # a quick fix for the free tier livebook session
# ## allocate 2GB swap
# System.cmd("fallocate", ["-l", "2G", "/swap"])
# System.cmd("chmod", ["400", "/swap"])
# System.cmd("mkswap", ["/swap"])
# System.cmd("swapon", ["/swap"])
# ## need unzip to unzip the source code
# System.cmd("apt", ["update", "-q", "-y"])
# System.cmd("apt", ["install", "-y", "unzip", "python3", "cmake"])

# If you are using the pre-built nerves firmware
# you can comment out the following installation step
Mix.install([
  {:evision, "~> 0.1.0", github: "cocoa-xu/evision"},
  {:kino, "~> 0.6"}
])
```

```output
# unnecessary output removed
Generated evision app
```

```output
:ok
```

```elixir
# change to the file's directory
# or somewhere you have write permission
File.cd!(__DIR__)
```

```output
:ok
```

## alias
```elixir
# alias Evision as OpenCV
# please see the Namespace section in the README.md for reasons/motivations
# (in the root directory of the source code)
alias Evision, as: OpenCV
```

### Set up training data

This example is based on the [Introduction to Support Vector Machines](https://docs.opencv.org/4.x/d1/d73/tutorial_introduction_to_svm.html) from OpenCV.

```elixir
labels = [1, -1, -1, -1]
training_data = [[501, 10], [255, 10], [501, 255], [10, 501]]

{:ok, labels_mat} =
  OpenCV.Mat.from_binary(Enum.into(labels, <<>>, fn d -> << d::integer()-size(32)-little >> end), {:s, 32}, 4, 1, 1)

{:ok, training_data_mat} =
  OpenCV.Mat.from_binary(
    Enum.into(List.flatten(training_data), <<>>, fn d -> << d::float()-size(32)-little >> end),
    {:f, 32},
    4,
    2,
    1
  )
```

## Train the SVM

```elixir
{:ok, svm} = OpenCV.ML.SVM.create()
{:ok, _svm} = OpenCV.ML.SVM.setType(svm, OpenCV.cv_C_SVC())
{:ok, _svm} = OpenCV.ML.SVM.setKernel(svm, OpenCV.cv_LINEAR())
{:ok, _svm} = OpenCV.ML.SVM.setTermCriteria(svm, {OpenCV.cv_MAX_ITER(), 100, 0.000001})
assert :ok = OpenCV.ML.SVM.train(svm, training_data_mat, OpenCV.cv_ROW_SAMPLE(), labels_mat)
assert :ok = OpenCV.ML.SVM.isTrained(svm)
```

## Show support vectors

```elixir
{:ok, sv} = OpenCV.ML.SVM.getUncompressedSupportVectors(svm)
{:ok, {rows, cols}} = OpenCV.Mat.shape(sv)
{:ok, sv_binary} = OpenCV.Mat.to_binary(sv)
float_bytes = 4
support_vector =
  for i <- (rows-1)..0, reduce: [] do
    support_vector ->
      current_vector = for j <- (cols-1)..0, reduce: [] do
        vec ->
          << float_data::float()-size(32)-little >> = :binary.part(sv_binary, (i*cols + j) * float_bytes, 4)
          [trunc(float_data) | vec]
      end
      [current_vector | support_vector]
  end
assert [[501, 10], [255, 10], [501, 255]] == support_vector
support_vector
```

## Data for visual representation

```elixir
green = [0, 255, 0]
blue = [255, 0, 0]
width = 512
height = 512
response_data =
  for x <- (width-1)..0, y <- (height-1)..0, reduce: [] do
    acc ->
      {:ok, sample} = OpenCV.Mat.from_binary(<< y::float()-size(32)-little, x::float()-size(32)-little >>, {:f, 32}, 1, 2, 1)
      {:ok, {_, response_mat}} = OpenCV.ML.SVM.predict(svm, sample)
      assert {:ok, {1, 1}} = OpenCV.Mat.shape(response_mat)
      {:ok, << response::float()-size(32)-little >>} = OpenCV.Mat.to_binary(response_mat)
      response = trunc(response)
      assert response == 1 or response == -1
      case response do
        1 ->
          [green | acc]
        -1 ->
          [blue | acc]
      end
  end

response_data = response_data |> List.flatten |> IO.iodata_to_binary
{:ok, response_map} = OpenCV.Mat.from_binary(response_data, {:u, 8}, height, width, 3)

# show the training data
thickness = 1
{:ok, response_map} = OpenCV.circle(response_map, Enum.at(training_data, 0), 5, [0,   0,   0], thickness: thickness)
{:ok, response_map} = OpenCV.circle(response_map, Enum.at(training_data, 1), 5, [255, 255, 255], thickness: thickness)
{:ok, response_map} = OpenCV.circle(response_map, Enum.at(training_data, 2), 5, [255, 255, 255], thickness: thickness)
{:ok, response_map} = OpenCV.circle(response_map, Enum.at(training_data, 3), 5, [255, 255, 255], thickness: thickness)

# show support vectors
{:ok, response_map} = OpenCV.circle(response_map, Enum.at(support_vector, 0), 6, [128, 128, 128], thickness: thickness)
{:ok, response_map} = OpenCV.circle(response_map, Enum.at(support_vector, 1), 6, [128, 128, 128], thickness: thickness)
{:ok, response_map} = OpenCV.circle(response_map, Enum.at(support_vector, 2), 6, [128, 128, 128], thickness: thickness)

OpenCV.imencode(".png", response_map)
|> then(fn {:ok, val} -> val end)
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```
