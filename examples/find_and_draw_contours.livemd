<!-- livebook:{"persist_outputs":true} -->

# Find and Draw Contours in an Image

```elixir
# set `EVISION_PREFER_PRECOMPILED` to `false` 
# if you prefer `:evision` to be compiled from source
# note that to compile from source, you may need at least 1GB RAM
# System.put_env("EVISION_PREFER_PRECOMPILED", "false")

Mix.install([
  {:evision, "~> 0.1.16"},
  {:kino, "~> 0.7"},
  {:req, "~> 0.3"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Helper Function

```elixir
defmodule Helper do
  def download!(url, save_as, overwrite \\ false)

  def download!(url, save_as, false) do
    unless File.exists?(save_as) do
      download!(url, save_as, true)
    end

    :ok
  end

  def download!(url, save_as, true) do
    body =
      case Req.get!(url) do
        %Req.Response{status: 200, body: body} ->
          body

        error ->
          raise inspect(error)
      end

    File.write!(save_as, body)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Helper, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:download!, 3}}
```

```elixir
Helper.download!("https://docs.opencv.org/4.x/pca_test1.jpg", "pca_test.jpg")
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Load Image As Gray Scale

```elixir
gray = Evision.imread("pca_test.jpg", flags: Evision.cv_IMREAD_GRAYSCALE())
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 1,
  dims: 2,
  type: {:u, 8},
  raw_type: 0,
  shape: {600, 800},
  ref: #Reference<0.2172638371.2268463131.71223>
}
```

## Get A Binary Image

```elixir
# import Bitwise so that we can use `|||` (bitwise or)
import Bitwise

# binarization
{_, bw} =
  Evision.threshold(gray, 50, 255, Evision.cv_THRESH_BINARY() ||| Evision.cv_THRESH_OTSU())

bw
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 1,
  dims: 2,
  type: {:u, 8},
  raw_type: 0,
  shape: {600, 800},
  ref: #Reference<0.2172638371.2268463122.70922>
}
```

## Find All Contours in the Binary Image

```elixir
# Find all the contours in the thresholded image
{contours, _} = Evision.findContours(bw, Evision.cv_RETR_LIST(), Evision.cv_CHAIN_APPROX_NONE())

IO.puts("Find #{Enum.count(contours)} contour(s)")
```

<!-- livebook:{"output":true} -->

```
Find 7 contour(s)
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Ignore Contours That Are Too Small or Too Large

```elixir
minimal_area = 100
maximal_area = 100_000

contours =
  Enum.reject(contours, fn c ->
    # Calculate the area of each contour
    area = Evision.contourArea(c)
    # Ignore contours that are too small or too large
    # (return true to reject)
    area < minimal_area or area > maximal_area
  end)

IO.puts("#{Enum.count(contours)} contour(s) remains")
```

<!-- livebook:{"output":true} -->

```
6 contour(s) remains
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Draw All Contours

```elixir
# color in {Blue, Green, Red}, range from 0-255
edge_color = {0, 0, 255}

# draw all contours by setting `index` to `-1`
index = -1

# Load image in color
src = Evision.imread("pca_test.jpg")

# draw all contours on the color image
Evision.drawContours(src, contours, index, edge_color, thickness: 2)
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 3,
  dims: 2,
  type: {:u, 8},
  raw_type: 16,
  shape: {600, 800, 3},
  ref: #Reference<0.2172638371.2268463122.70944>
}
```
