<!-- vim: syntax=markdown -->

<!-- livebook:{"persist_outputs":true} -->

# Stitcher Demo

```elixir
# set `EVISION_PREFER_PRECOMPILED` to `false` 
# if you prefer `:evision` to be compiled from source
# note that to compile from source, you may need at least 1GB RAM
# System.put_env("EVISION_PREFER_PRECOMPILED", "false")

Mix.install([
  {:evision, "~> 0.1.9"},
  {:req, "~> 0.3"},
  {:kino, "~> 0.7"}
])
```

## Helper Function

```elixir
defmodule Helper do
  def download!(url, save_as, overwrite \\ false)

  def download!(url, save_as, false) do
    unless File.exists?(save_as) do
      download!(url, save_as, true)
    end

    :ok
  end

  def download!(url, save_as, true) do
    body =
      case Req.get!(url) do
        %Req.Response{status: 200, body: body} ->
          body

        error ->
          raise inspect(error)
      end

    File.write!(save_as, body)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Helper, <<70, 79, 82, 49, 0, 0, 16, ...>>, {:download!, 3}}
```

### alias

```elixir
alias Evision, as: Cv
```

<!-- livebook:{"output":true} -->

```
Evision
```

```elixir
# change to the file's directory
# or somewhere you have write permission
File.cd!(__DIR__)

# https://github.com/opencv/opencv_extra/tree/4.x/testdata/stitching
Helper.download!(
  "https://raw.githubusercontent.com/opencv/opencv_extra/master/testdata/stitching/a1.png",
  "a1.png"
)

Helper.download!(
  "https://raw.githubusercontent.com/opencv/opencv_extra/master/testdata/stitching/a2.png",
  "a2.png"
)

Helper.download!(
  "https://raw.githubusercontent.com/opencv/opencv_extra/master/testdata/stitching/a3.png",
  "a3.png"
)
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Stitching

```elixir
a1 = Cv.imread("./a1.png")
a2 = Cv.imread("./a2.png")
a3 = Cv.imread("./a3.png")
sticher = Cv.Stitcher.create()
{status_code, result} = Cv.Stitcher.stitch(sticher, [a1, a2, a3])
0 = status_code
# status_code should be 0 (OK),
# for other status_code, please refer to https://github.com/opencv/opencv/blob/4.5.4/modules/stitching/include/opencv2/stitching.hpp#L152

Cv.imencode(".png", result)
|> Kino.Image.new(:png)
```
