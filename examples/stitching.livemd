<!-- vim: syntax=markdown -->

# OpenCV Stitcher Demo

## Install deps

```elixir
# a quick fix for the free tier livebook session
## allocate 2GB swap
# System.cmd("fallocate", ["-l", "2G", "/swap"])
# System.cmd("chmod", ["400", "/swap"])
# System.cmd("mkswap", ["/swap"])
# System.cmd("swapon", ["/swap"])
## need unzip to unzip the source code
# System.cmd("apt", ["update"])
# System.cmd("apt", ["install", "-y", "unzip", "python3"])

# If you are using the pre-built nerves firmware
# you can comment out the following installation step
Mix.install([
  {:evision, "~> 0.1.0", github: "cocoa-xu/evision"},
  {:kino, "~> 0.6"}
])
```

## Helper Function

```elixir
defmodule Helper do
  def download!(url, save_as) do
    http_opts = []
    opts = [body_format: :binary]
    arg = {url, []}

    body =
      case :httpc.request(:get, arg, http_opts, opts) do
        {:ok, {{_, 200, _}, _, body}} ->
          body

        {:error, reason} ->
          raise inspect(reason)
      end

    File.write!(save_as, body)
  end
end
```

## Download test images

```elixir
# change to the file's directory
# or somewhere you have write permission
File.cd!(__DIR__)

# https://github.com/opencv/opencv_extra/tree/4.x/testdata/stitching
Helper.download!("https://raw.githubusercontent.com/opencv/opencv_extra/master/testdata/stitching/a1.png", "a1.png")
Helper.download!("https://raw.githubusercontent.com/opencv/opencv_extra/master/testdata/stitching/a2.png", "a2.png")
Helper.download!("https://raw.githubusercontent.com/opencv/opencv_extra/master/testdata/stitching/a3.png", "a3.png")
```

## alias
```elixir
# alias Evision as OpenCV
# please see the Namespace section in the README.md for reasons/motivations
# (in the root directory of the source code)
alias Evision, as: OpenCV
```

## Stitching

```elixir
{:ok, a1} = OpenCV.imread("./a1.png")
{:ok, a2} = OpenCV.imread("./a2.png")
{:ok, a3} = OpenCV.imread("./a3.png")
{:ok, sticher} = OpenCV.Stitcher.create
{:ok, {status_code, result}} = OpenCV.Stitcher.stitch(sticher, [a1, a2, a3])
0 = status_code
# status_code should be 0 (OK),
# for other status_code, please refer to https://github.com/opencv/opencv/blob/4.5.4/modules/stitching/include/opencv2/stitching.hpp#L152

OpenCV.imencode(".png", result)
|> then(fn {:ok, val} -> val end)
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```
