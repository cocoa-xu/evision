<!-- vim: syntax=markdown -->

# photo - High Dynamic Range Imaging

## Setup

```elixir
# # a quick fix for the free tier livebook session
# ## allocate 2GB swap
# System.cmd("fallocate", ["-l", "2G", "/swap"])
# System.cmd("chmod", ["400", "/swap"])
# System.cmd("mkswap", ["/swap"])
# System.cmd("swapon", ["/swap"])
# ## need unzip to unzip the source code
# System.cmd("apt", ["update", "-q", "-y"])
# System.cmd("apt", ["install", "-y", "unzip", "python3", "cmake"])

# If you are using the pre-built nerves firmware
# you can comment out the following installation step
Mix.install([
  {:evision, "~> 0.1.0", github: "cocoa-xu/evision"},
  {:kino, "~> 0.6"}
])

# this example is based on https://docs.opencv.org/4.x/d3/db7/tutorial_hdr_imaging.html
```

## Helper Function

```elixir
defmodule Helper do
  def download!(url, save_as, overwrite \\ false)

  def download!(url, save_as, false) do
    unless File.exists?(save_as) do
      download!(url, save_as, true)
    end

    :ok
  end

  def download!(url, save_as, true) do
    http_opts = []
    opts = [body_format: :binary]
    arg = {url, []}

    body =
      case :httpc.request(:get, arg, http_opts, opts) do
        {:ok, {{_, 200, _}, _, body}} ->
          body

        {:error, reason} ->
          raise inspect(reason)
      end

    File.write!(save_as, body)
  end

  @doc """
  This function chunks binary data by every requested `chunk_size`

  To make it more general, this function allows the length of the last chunk
  to be less than the request `chunk_size`.

  For example, if you have a 7-byte binary data, and you'd like to chunk it by every
  4 bytes, then this function will return two chunks with the first gives you the
  byte 0 to 3, and the second one gives byte 4 to 6.
  """
  def chunk_binary(binary, chunk_size) when is_binary(binary) do
    total_bytes = byte_size(binary)
    full_chunks = div(total_bytes, chunk_size)
    chunks =
      if full_chunks > 0 do
        for i <- 0..(full_chunks-1), reduce: [] do
          acc -> [:binary.part(binary, chunk_size * i, chunk_size) | acc]
        end
      else
        []
      end
    remaining = rem(total_bytes, chunk_size)
    chunks =
      if remaining > 0 do
        [:binary.part(binary, chunk_size * full_chunks, remaining) | chunks]
      else
        chunks
      end
    Enum.reverse(chunks)
  end
end
```

```elixir
# change to the file's directory
# or somewhere you have write permission
File.cd!(__DIR__)

# create a directory for storing the test images
File.mkdir_p!("photo_hdr_test")
```

### Download the test images
```elixir
exposure_filenames =
  0..15
  |> Enum.map(&Integer.to_string(&1))
  |> Enum.map(&String.pad_leading(&1, 2, "0"))
  |> Enum.map(&"memorial" <> &1 <> ".png")

exposure_file_urls =
  exposure_filenames
  |> Enum.map(&"https://raw.githubusercontent.com/opencv/opencv_extra/4.x/testdata/cv/hdr/exposures/" <> &1)

exposure_file_save_paths =
  exposure_filenames
  |> Enum.map(&Path.join([__DIR__, "photo_hdr_test", &1]))

exposure_file_urls
  |> Enum.zip(exposure_file_save_paths)
  |> Enum.map(fn {url, save_as} -> OpenCV.TestHelper.download!(url, save_as) end)
  |> Enum.all?(&:ok = &1)
```

### Download `list.txt`

```elixir
list_txt_file = Path.join([__DIR__, "photo_hdr_test", "list.txt"])
Helper.download!("https://raw.githubusercontent.com/opencv/opencv_extra/4.x/testdata/cv/hdr/exposures/list.txt", list_txt_file)
```

## alias
```elixir
# alias Evision as OpenCV
# please see the Namespace section in the README.md for reasons/motivations
# (in the root directory of the source code)
alias Evision, as: OpenCV
```

### Load exposure sequences
```elixir
# Firstly we load input images and exposure times from user-defined folder.
# The folder should contain images and list.txt - file that contains file names and inverse exposure times.
exposure_sequences =
  list_txt_file
  |> File.read!()
  |> String.split("\n")
  |> Enum.reject(&String.length(&1)==0)
  |> Enum.map(&String.split(&1, " "))
  |> Enum.map(&List.to_tuple(&1))
  |> Enum.map(fn {image_filename, times} ->
    {:ok, mat} = OpenCV.imread(Path.join([__DIR__, "photo_hdr_test", image_filename]))
    {val, ""} = Float.parse(times)
    {mat, 1/val}
  end)

images =
  exposure_sequences
  |> Enum.map(&elem(&1, 0))

# `times` HAS to be float32, otherwise OpenCV will crash
{:ok, times} =
  exposure_sequences
  |> Enum.map(&elem(&1, 1))
  |> Enum.into(<<>>, fn d -> << d::float()-size(32)-little >> end)
  |> OpenCV.Mat.from_binary_by_shape({:f, 32}, {1, Enum.count(images)})
```

### Estimate camera response
```elixir
# It is necessary to know camera response function (CRF) for a lot of HDR construction algorithms.
# We use one of the calibration algorithms to estimate inverse CRF for all 256 pixel values.
{:ok, calibrate} = OpenCV.createCalibrateDebevec()
{:ok, response} = OpenCV.CalibrateDebevec.process(calibrate, images, times)
```

### Make HDR image
```
# We use Debevec's weighting scheme to construct HDR image
# using response calculated in the previous item.
{:ok, merge_debevec} = OpenCV.createMergeDebevec()
{:ok, hdr} = OpenCV.MergeDebevec.process(merge_debevec, images, times, response: response)
```

### Tonemap HDR image
```elixir
# Since we want to see our results on common LDR display we have to map our HDR image to 8-bit range
# preserving most details.
# It is the main goal of tonemapping methods.
# We use tonemapper with bilateral filtering and set 2.2 as the value for gamma correction.
{:ok, tonemap} = OpenCV.createTonemap(gamma: 2.2)
{:ok, ldr} = OpenCV.Tonemap.process(tonemap, hdr)
```

### Perform exposure fusions
```elixir
# There is an alternative way to merge our exposures in case when we don't need HDR image.
# This process is called exposure fusion and produces LDR image that doesn't require gamma correction.
# It also doesn't use exposure values of the photographs.
{:ok, merge_mertens} = OpenCV.createMergeMertens()
{:ok, fusion} = OpenCV.MergeMertens.process(merge_mertens, images)
```

### Write fusion
```elixir
output_fusion_file = Path.join([__DIR__, "photo_hdr_test", "fusion.png"])
result =
  fusion
  |> OpenCV.Nx.to_nx()
  |> Nx.multiply(255)
  |> Nx.clip(0, 255)
  |> Nx.as_type({:u, 8})
  |> OpenCV.Nx.to_mat
  |> then(fn {:ok, result} ->
    OpenCV.imwrite(output_fusion_file, result)
    result
  end)

{:ok, result} = OpenCV.imencode(".png", result)
result
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```

### Write LDR image
```elixir
output_ldr_file = Path.join([__DIR__, "photo_hdr_test", "ldr.png"])
{:ok, f32_shape} = OpenCV.Mat.shape(ldr)
nan          = << 0, 0, 192, 255 >>
positive_inf = << 0, 0, 128, 127 >>
negative_inf = << 0, 0, 128, 255 >>
result = ldr
  |> OpenCV.Mat.to_binary()
  |> elem(1)
  |> Helper.chunk_binary(4)
  |> Enum.map(fn f32 ->
    case f32 do
      ^nan ->
        << 0, 0, 0, 0 >>

      ^positive_inf ->
        << 0, 0, 0, 0 >>

      ^negative_inf ->
        << 0, 0, 0, 0 >>

      # legal value
      _ ->
        f32
    end
  end)
  |> IO.iodata_to_binary()
  |> Nx.from_binary({:f, 32})
  |> Nx.reshape(f32_shape)
  |> Nx.multiply(255)
  |> Nx.clip(0, 255)
  |> Nx.as_type({:u, 8})
  |> OpenCV.Nx.to_mat
  |> elem(1)

{:ok, result} = OpenCV.imencode(".png", result)
result
|> IO.iodata_to_binary()
|> Kino.Image.new(:png)
```

### Write HDR image
```elixir
output_hdr_file = Path.join([__DIR__, "photo_hdr_test", "hdr.hdr"])
OpenCV.imwrite(output_hdr_file, hdr)
```
